Global: Use _gwy_assign_string() where appropriate.

Serialization: Rewrite again.  Do not pass GWY file types as the item type,
               pass GType instead (which is constant only for fundamental
               types).  Arrays are distinguished by non-zero array_size.
               Zero-sized arrays are invalid for serialization and skipped
               with a non-fatal error in deserialization.  This makes arrays
               of serializable boxed types possible as the GType is passed
               properly.  It also permits to get rid of
               _gwy_check_object_component() and do this directly in
               gwy_deserialize_filter_items() if the caller provides a
               specific type.

               At present we overload array_size with the GType for boxed types
               that would stop, and with the number of components for objects
               and that could continue as the real array size would be in the
               component, never in a GWY_SERIALIZE_HEADER item.

Packing: Is unfinished.  Might need a review and go with the code-generation
         path instead.

Container: assign() does not emit signals.  Implement it via transfer()?

Inventory: Make possible to change sort function, make possible to simply state
           that items are sorted by name (which requires GDataCompareFunc, not
           just GCompareFunc).

Math: Review the mechanism the functions they are brought in as something must
      request the system extensions but we must not do that automatically as
      the user may not want it.  Also, the only useful non-C99 function is
      exp10() which, while frequently used in Gwyddion code, may not worth all
      the complications to provide it in sane form for out-of-tree users.

Resources: Convenience method for resource parsing (possibly dumping too).
           Make them really convenient, otherwise it does not make sense.
           One possibility is using properties, though defining propertis
           for all GwyRawFilePreset parameters seems a bit overkill.

Value Format: Fields are available as properties but the user cannot be
              expected to call g_object_notify() when something changes.
              Must make it more/less encapsulated for consistency.

Classes: Review class definitions that have class data (resources, selection,
         ...) and move them to C files once private class data are made
         possible by GObject.

Serializable boxed: Review type lookup locking once GAtomicArray is available,
                    it might help.

Fit Function: Handle different sources of fitting functions (even different
              sources of built-ins).

User fit function: No interface to manipulate the filter, parameters may need
                   markup or constraints.

                   The interface does not distinguish between code-friednly and
                   presentational parameters and formula.  This needs some
                   deliberation.

libgwy: Review directory tests once we install the standard directory structure
        (data and modules).  Deal with lib vs. lib64 vs. lib/64 vs. lib32 mess.

Internal headers: Some utility functions and macros do not really belong
                  anywhere.  Their implementations are also placed in quite
                  arbitrary source files.  Review.
