#!/bin/bash
# $Id$
pkgname=gwyddion
projectdir=$PWD
logdir="$projectdir/_logs"
installprefix="$projectdir/_inst"
libdirs="libgwy libgwyui libgwyapp"
podirs="po po-libgwy po-libgwyui po-libgwyapp"
oks="build documentation install dists"

source $HOME/.bashrc
export LC_ALL=C
PATH="$HOME/bin:$PATH"

# =====[ subroutines ]=======================================================
# execute a function/command with logging and some setup
function call() {
  pushd "$projectdir" >/dev/null
  $@ >"$logdir/$1.log" 2>"$logdir/$1.err"
  popd >/dev/null
}

function set_extra_version() {
  test -n "$disable_set_extra_version" && return
  xver=$(date +%Y%m%d)
  cp -fv configure.ac configure.ac~
  sed -ri -e 's/^(m4_define\(\[gwy_version_extra\]), *\[.*\]/\1,[.'"$xver"']/' \
          -e '/AM_INIT_AUTOMAKE/s/ +check-news\>//' \
          configure.ac
}

function autogen() {
  CONFIG_SHELL=/bin/sh ./autogen.sh \
    --enable-gtk-doc --with-valgrind \
    --prefix="$installprefix"
}

function build() {
  # Exclude documentation to get a separate log
  sed -ri '/^SUBDIRS *=/s/^/###NIGHT-BUILD###/' docs/Makefile
  make -k all gwyddion4_vim_sources= \
    && touch .ok-build
  sed -ri 's/^###NIGHT-BUILD###//' docs/Makefile
}

function update_translations() {
  for dir in $podirs; do
    pushd $dir >/dev/null
    gettext_package=$(sed -r 's/^GETTEXT_PACKAGE *= *//;t;d' Makefile)
    if test -z $(ls *.po 2>/dev/null); then
      echo "No translations for $gettext_package" 1>&2
      popd >/dev/null
      continue
    fi
    make -k update-po
    make -k all-yes
    for lang in *.po; do
      x=${lang%.po}
      echo -n "TRANSLATION $gettext_package $x: " 1>&2
      msgfmt --statistics $x.po -o /dev/null
    done
    echo -n "TRANSLATION $gettext_package total: " 1>&2
    grep -c ^msgstr $gettext_package.pot 1>&2
    popd >/dev/null
  done
}

function build_documentation() {
  make -C docs -k docs-prepare \
      && make -C docs -k docs \
      && touch .ok-documentation
  rm -f data/gwyddion4.vim
  make -C data gwyddion4.vim
}

function build_introspection() {
  pushd libraries >/dev/null
  for dir in $libdirs; do
    pushd $dir >/dev/null
    rm -f Gwy*.{gir,typelib}
    make GOBJECT_INTROSPECTION_SCANNER_FLAGS=--warn-all
    popd >/dev/null
  done
  popd >/dev/null
}

function unit_test() {
  pushd libraries >/dev/null
  for dir in $libdirs; do
    pushd $dir >/dev/null
    make test-report
    if test -s test-report.html; then
      cp -f test-report.html $dir-test-report.html
      sed -e "s/test-report\\.html/$dir-test-report\\.html/" \
          -e "s/coverage\\.html/$dir-coverage\\.html/" \
          test-report-brief.html >$dir-test-report-brief.html
    fi
    popd >/dev/null
  done
  popd >/dev/null
}

function check_debug() {
  grep -r --include '*.c' '^ *# *define \+DEBUG\>' . \
    | sed -e 's/^/Debugging is on in: /' 1>&2
}

function check_headers() {
  pushd libraries >/dev/null
  for dir in $libdirs; do
    pushd $dir >/dev/null
    make check-headers
    popd >/dev/null
  done
  popd >/dev/null
}

function check_symbols() {
  pushd libraries >/dev/null
  for dir in $libdirs; do
    pushd $dir >/dev/null
    make check-symbols
    popd >/dev/null
  done
  popd >/dev/null
}

function check_marshallers() {
  pushd libraries >/dev/null
  for dir in $libdirs; do
    pushd $dir >/dev/null
    make check-marshallers
    popd >/dev/null
  done
  popd >/dev/null
}

function check_doc_sections() {
  pushd libraries >/dev/null
  for dir in $libdirs; do
    pushd docs/$dir >/dev/null
    ../../build/check-doc-sections.sh
    popd >/dev/null
  done
  popd >/dev/null
}

function check_deps_versions() {
  # Keep the `GENERATED' string quoted to prevent match here
  grep -r --include '*.[ch]' -L ' This is a 'GENERATED' file\>' \
    libraries/libgwy libraries/libgwyui libraries/libgwyapp \
    gwyddion modules resources \
    | xargs gtkdoc-depscan -b atk -b cairo -b gdk3 -b gdk-pixbuf -b gio \
                           -b glib -b gobject -b gtk3 \
    | ./build/check-dep-versions.py
}

function install() {
  make -k install && touch .ok-install
}

function make_dists() {
  make dist && touch .ok-dists
}

function distcheck() {
  make distcheck
}

function coverage() {
  # Must be run after install, recompiles things with different CFLAGS.
  pushd libraries >/dev/null
  for dir in $libdirs; do
    pushd $dir >/dev/null
    ../build/coverage-test.sh
    popd >/dev/null
  done
  popd >/dev/null
}

function unit_test_valgrind() {
  # Must be run after install, recompiles things with different CFLAGS.
  pushd libraries >/dev/null
  for dir in $libdirs; do
    pushd $dir >/dev/null
    if grep -q -s '^test-valgrind:' Makefile; then
        make clean
        make CFLAGS="-O0 -ggdb"
        make test-valgrind
    fi
    popd >/dev/null
  done
  popd >/dev/null
}

function build_rpm() {
  version=$(sed -r 's/^GWY_VERSION_STRING *= *//;t;d' Makefile)
  TAR_OPTIONS=--wildcards CCACHE_DISABLE=1 \
      rpmbuild -ta --clean $pkgname-$version.tar.xz
}

function help() {
  sed <$0 -e '1,/^  # LIST-BEGIN/d' \
          -e '/^  # LIST-END/,$d' \
          -e 's/^ *call *//'
}

# =====[ main ]==============================================================
test -d "$logdir" || mkdir "$logdir"

if test -n "$1"; then
  if test "$1" == help; then
    help
  else
    for x in $@; do
      call $x
    done
  fi
else
  rm -f .ok-* .releaseme
  # To set the extra version you have to ask for it explicitly
  disable_set_extra_version=yes
  # LIST-BEGIN
  call set_extra_version
  call autogen
  call build
  call build_documentation
  call build_introspection
  call update_translations
  call unit_test
  call check_debug
  call check_headers
  call check_symbols
  call check_marshallers
  call check_doc_sections
  call check_deps_versions
  call install
  call make_dists
  call unit_test_valgrind
  call coverage
  call build_rpm
  call distcheck
  # LIST-END
  touch .releaseme
  for x in $oks; do
    test -f .ok-$x || rm -f .releaseme
  done
  rm -rf .ok-* "$installprefix"
fi

