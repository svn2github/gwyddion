#!/bin/bash
# $Id$
pkgname=gwyddion
projectdir=$PWD
logdir="$projectdir/_logs"
tmplog="$logdir/tmplog"
libdirs="libgwy libgwyui libgwyapp"
podirs="po po-libgwy po-libgwyui"

source $HOME/.bashrc
export LC_ALL=C
PATH="$HOME/bin:$PATH"
cd "$logdir" || exit 1


cat >autogen.ignore <<':'
^aclocal: installing [`']m4/([-a-z0-9]+)\.m4' from [`']/usr/share/aclocal/\1\.m4'
^configure\.ac:[0-9]+: installing [`']build/[-a-z.]+'
^Makefile\.am: installing [`']\./INSTALL'
^libgwy[a-z]*/Makefile\.am: installing [`']build/depcomp'
^docs/libgwy[a-z]*/Makefile\.am: installing [`']build/depcomp'
':'
:


cat >build.ignore <<':'
^/usr/include/bits/cmathcalls.h:[0-9]+: syntax error, unexpected identifier, expecting .* _Complex
':'
:


cat >build_documentation.ignore <<':'
^Writing .* for [^ ]+\(.*\)
^Computing chunks\.\.\.
^.*: warning: no link for: 'gwy-[-a-z]*\<foo\>
^.*: warning: no link for: 'GwyFoo
^Use of uninitialized value within %DeclarationTypes in lc at /usr/bin/gtkdoc-mkdb line [0-9]+\.
^WARNING: Malformed symbol name: "The Poke\(\) method" \(type=method\) in gio\.$
':'
:


cat >build_introspection.ignore <<':'
':'
:


cat >distcheck.ignore <<':'
^Writing .* for [^ ]+\(.*\)
^libtool: install: warning: [`'][^ ]+/libgwy(ui|)3\.la' has not been installed in [`']/home/[^ ]+'$
^libtool: install: warning: remember to run [`']libtool --finish /home/[^ ]+'$
':'
:


cat >update_translations.ignore <<':'
^TRANSLATION
^[.]{5,} done\.$
^[0-9]+ translated messages?, [0-9]+ fuzzy translations?, [0-9]+ untranslated messages?\.$
^[0-9]+ translated messages?, [0-9]+ untranslated messages?\.$
':'
:


cat >build_rpm.ignore <<':'
^\+
^libtool: install: warning: remember to run [`']libtool --finish /usr/lib64'$
^libtool: install: warning: relinking [`']libgwy(ui|)3\.la'$
^libtool: install: warning: [`'][^ ]+/libgwy(ui|)3\.la' has not been installed in [`']/usr/lib64'$
^[0-9]+ blocks
':'
:
cat >>build_rpm.ignore <build_documentation.ignore


cat >check_deps_versions.ignore <<':'
^WARNING: Malformed symbol name: "The Poke\(\) method" \(type=method\) in gio\.$
':'
:


function printerr() {
  f=$1
  shift

  test -s $f.err || return
  cat --squeeze-blank $f.err \
  | {
    # Exclude errors matching a list of regexps
    if test -s $f.ignore; then
      grep -Evf $f.ignore
    else
      cat
    fi
  } | {
    # Exclude literal errors, typically those from other part of the build
    if test -n "$1"; then
      grep -Fvf "$1"
    else
      cat
    fi
  } >"$tmplog"
  test -s "$tmplog" || return
  echo "=====[ $f ]====="
  cat "$tmplog"
}

function filtererr() {
  f=$1
  shift

  test -s $f.err || return
  cat --squeeze-blank $f.err \
  | {
    # Exclude errors matching a list of regexps
    if test -s $f.ignore; then
      grep -Evf $f.ignore
    else
      cat
    fi
  } | {
    # Exclude literal errors, typically those from other part of the build
    if test -n "$1"; then
      grep -Fvf "$1"
    else
      cat
    fi
  } >"$tmplog"
  cat "$tmplog" >$f.err
  rm -f "$tmplog"
}

function extract_build_documentation() {
  logfile=build_documentation.err
  grep -Evf build_documentation.ignore <$logfile >"$tmplog"
  logfile=build_documentation.log
  grep -E '\<(warning|error):' <$logfile \
    | grep -Evf build_documentation.ignore >>"$tmplog"
  if test -s "$tmplog"; then
    echo "=====[ build_documentation ]====="
  fi
  cat "$tmplog"
}

function extract_build_introspection() {
  logfile=build_introspection.err
  outfile=introspection.log
  grep -Evf build_introspection.ignore <$logfile >$outfile
}

function extract_documentation_stats() {
  logfile=build_documentation.log
  htmlfile=documentation-stats.html
  logs=$(echo "$libdirs" | sed -r "s:[a-z0-9]+:$projectdir/docs/\\0/\\0-undocumented.txt:g")
  "$projectdir/build/documentation-stats.py" $logs >"$htmlfile"
  cp $logs "$logdir"
}

function extract_translation_stats() {
  logfile=update_translations.err
  for dir in $podirs; do
    gettext_package=$(sed -r 's/^GETTEXT_PACKAGE *= *//;t;d' "$projectdir/$dir/Makefile")
    htmlfile=translation-stats-$gettext_package.html
    "$projectdir/build/translation-stats.py" $logfile $gettext_package >$htmlfile
  done
}

function extract_coverage_stats() {
  for dir in $libdirs; do
    if test -s "$projectdir/$dir/$dir-test-report.html"; then
      mv -f "$projectdir/$dir"/$dir-test-report{,-brief}.html .
      if test -s "$projectdir/$dir/coverage/coverage.html"; then
        sed -rn -e 's:(<a href=")([^"]*)\.c\.gcov":\1'"$dir"'/\2-gcov.log":' \
             -e '/<table/,/<\/table>/p' "$projectdir/$dir/coverage/coverage.html" \
             >$dir-coverage.html
      fi
      if test -d "$projectdir/$dir/coverage"; then
        pushd "$projectdir/$dir/coverage" >/dev/null
        rename -- .c.gcov -gcov.log *.c.gcov
        popd >/dev/null
      fi
    fi
  done
}

cat build.err make_dists.err build_documentation.err install.err \
  check_headers.err check_symbols.err check_doc_sections.err >all.err
printerr set_extra_version
printerr autogen
printerr build
extract_build_documentation
extract_build_introspection
printerr update_translations
printerr check_debug
printerr check_headers
printerr check_symbols
printerr check_marshallers
printerr check_doc_sections
printerr check_deps_versions
printerr install build.err
printerr make_dists build.err
printerr build_rpm build.err
printerr distcheck all.err
filtererr unit_test_valgrind all.err
extract_translation_stats
extract_documentation_stats
extract_coverage_stats

rm -f *.ignore "$tmplog"
