2.99.0

Compared to Gwyddion 2.x:

Global:
- Gwyddion is licensed under GNU General Public License version 3 (or later).
- The code is written in C 99.  Legacy compilers will not compile it, recent
  GCC or MSVC8 should suffice.

Requirements:
- GLib >= 2.22 is required.

Libraries in general:
- The mess of libraries was reorganized to:
  - libgwy: infrastructure, data processing, all data-like objects, basic
            rendering -- does not need X11 or Gtk+
  - libgwyui: user interface, i.e. new widgets and UI helper functions
  - libgwyapp: modules, application-level functions
- Libraries are thread-aware, similarly to GLib and Gtk+.  This means that they
  protect their static data by locks, but individual objects do not use any
  internal locking.
- Libraries have a test suite (well, libgwy does), run `make check', if it
  passes run also `make check-valgrind'.
- Intralibrary symbol resolution does not go through PLT, the technique was
  blatantly copied from GLib (though not the implementation).

libgwy:
- Explicit library initialization is no longer necessary (unless the library
  user implements custom deserializers or otherwise needs to register all
  types beforhand).
- Functions for finding Gwyddion directories were reworked and unified among
  Unix and Win32 systems (as far as the differences of Win32 from other systems
  permit).

Serialization:
- GWY format was changed to version 3, with 64bit object and array sizes and
  support for 16bit integers.
- Serialization and deserialization errors are reported through GError, i.e.
  a malformed GWY file no longer causes the program to abort.
- GwySerializable interface is binary format-agnostic.  That is, objects no
  longer get into direct contact with the raw binary data which permits other
  representations, for instance XML or HDF5.  Serializers and deserializers are
  completely seprarated from the interface.
- The methods of GwySerializable have changed in consequence, implementations
  of the interface need to be rewritten.
- GWY serialization can be performed to arbitrary GOutputStream: memory, file,
  or something more fancy.
- Serialization is streamed, i.e. it no longer requires to keep the complete
  dump in core.
- Method clone was replaced with assign which better represents the intention
  and is called, again more closely following the OO patterns, on the assignee,
  not the assigned object.
- The interface now follows the usual convention with function arguments being
  GwySerializable* instead of GObject*.
- Boxed types can be serialized, although not standalone only as components
  of objects.

Math:
- Namespace is no longer polluted with unprefixed names, unless explicitly
  requested.
- There are much fewer fallback math functions as all C 99 functions are
  assumed to be available.
- gwy_math_sort() can sort an index array along with the actual data.

Pack:
- Completely new. FIXME

Unit:
- Renamed from GwySIUnit to GwyUnit.
- GwyValueFormat is an object now, it provides convenience formatting methods
  that are suggested to be used instead of manual formatting.
- Arithmetic functions follow the common convention and take the result as
  the first argument (think a = b/c).
- It has a proper default parameterless constructor, the number of functions
  for construction from strings was reduced.
- All formats support the standalone/after-value disctinction, consequently,
  GWY_SI_VALUE_FORMAT_VFMARKUP was removed.
- There were some minor parser improvements, such as the support for ² symbol
  and automatic attempt of Latin1 -> UTF-8 conversion if the input is not
  valid UTF-8.

Container:
- Functions taking and not taking ownership of stored non-atomic items were
  differentiated to follow the GObject convention.  Functions with ‘take’ in
  their name take the ownership, functions with ‘set’ in the name make copies.
- The previous point means that gwy_container_set_string() now copies the
  passed string and the Gwyddion-2 usage means a memory leak.
- Some unused functions were removed, signatures of other made more consistent
  (strings are no longer guchar*, etc.).
- Many function names were changed, usually shortended.
- gwy_container_transfer() can perform both shallow and deep copies.
- Serializable boxed types can be stored in containers.

Expr:
- GwyExpr is an object now.
- Expressions can be UTF-8 strings (as opposed to ASCII) which permits UTF-8
  identifier and constant names such as π or β₂.
- It uses GSlice instead of the deprecated GMemChunk internally.
- A few more math functions were added.

Inventory:
- It is internally based on GSequence, which permitted to get rid of some
  really ugly code.
- It no longer supports constant inventories.  GwyArray might be usable for
  that.
- It has a proper default parameterless constructor, the item type can be set
  whenever the inventory is empty.
- Fixed items are expressed with is_modifiable() method instead of is_fixed()
  with the opposite meaning.
- Many function names were changed, usually shortended.

Resource:
- Resource name is included in the file, allowing for resource names not
  representable in the file system (file name is used for 2.x resources).
- Functions for saving and loading are available, low-level dump, restore and
  modification bookkeeping functions were removed (some may reappear in a
  different form the future, though).
- Helper functions for parsing/dumping resource files are available.
- There is an explicit distinction between managed resources (present in the
  class inventory) and free-standing resources (private), represented by
  property "is-managed".  Free-standing resources can be freely renamed.
- Property "is-const" changed to "is-modifiable" with the opposite meaning
  (this matches GwyInventory).
- The class interface has changed.  In particular, individual resources no
  longer need to access any data members of GwyResourceClass.
- Errors are properly reported.

Interpolation:
- Inappropriate GWY_INTERPOLATION_NONE ‘interpolation’ type is gone.
- New 6-point interpolation GWY_INTERPOLATION_BSPLINE6 was added.

Fitting:
- Fitting was rewritten from scratch.  Instead of GwyNLFitter, there are two
  classes.
- GwyFitter provides the Marquardt-Levenberg algorithm while being completely
  model- and data-agnostic.  It works only with concepts such as paramters,
  sums of squares, gradiens and Hessians.
- GwyFitter implements the scaled Marquardt-Levenberg algorithm (as opposed to
  the unscaled algorithm in GwyNLFitter that gave us so much trouble).
- GwyFitTask can wrap several kinds of data and model and provide the abstract
  evaluation function for GwyFitter.

RGBA:
- It can be serialized and directly put to containers.
- Obsolete auxiliary functions connecting GwyRGBA with GdkColor and containers
  are not present.

GwyArray:
- New data type, a GArray wrapper that can emit signals when items are added
  removed and otherwise changed.
