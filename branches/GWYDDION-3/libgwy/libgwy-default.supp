# $Id$

###########################################################################
# Gwyddion

# Classes are not supposed to go away, so g_signal_new_class_handler() in
# init_types() cannot be freed and thus is OK.

{
   libgwy3-init-types
   Memcheck:Leak
   fun:calloc
   fun:g_malloc0
   fun:g_closure_new_simple
   fun:g_cclosure_new
   fun:g_signal_new_class_handler
   fun:gwy_resource_class_init
   fun:gwy_resource_class_intern_init
   fun:g_type_class_ref
   fun:init_types
   fun:g_once_impl
   fun:gwy_type_init
}

###########################################################################
# GNU libc

# http://sourceware.org/bugzilla/show_bug.cgi?id=12424
# Ulrich Drepper says it's OK and should be ignored.
# It takes various forms...

{
   glibc-2.12-x86_64-strtod-buffer-overrun-cond
   Memcheck:Cond
   fun:__GI___strncasecmp_l
   fun:____strtod_l_internal
   ...
   fun:gwy_unit_set_from_string
}

{
   glibc-2.12-x86_64-strtod-buffer-overrun-value
   Memcheck:Value8
   fun:__GI___strncasecmp_l
   fun:____strtod_l_internal
   ...
   fun:gwy_unit_set_from_string
}

{
   glibc-2.12-x86_64-strtod-buffer-overrun-addr
   Memcheck:Addr8
   fun:__GI___strncasecmp_l
   fun:____strtod_l_internal
   ...
   fun:gwy_unit_set_from_string
}

# Appeared in 2.15, again reading by larger blocks.

{
    glibc-2.15-x86_64-wcslen-addr
    Memcheck:Addr8
    fun:wcslen
    fun:wcsxfrm_l
    fun:g_utf8_collate_key
    fun:gwy_resource_compare
}

###########################################################################
# Dynamic linker errors that appeared with GNU ld 2.13.

{
   glibc-2.13-x86_64-ld-dl_start-cond1
   Memcheck:Cond
   fun:index
   fun:expand_dynamic_string_token
   fun:_dl_map_object
   fun:map_doit
   fun:_dl_catch_error
   fun:do_preload
   fun:dl_main
   fun:_dl_sysdep_start
   fun:_dl_start
}

{
   glibc-2.13-x86_64-ld-dl_start-cond2
   Memcheck:Cond
   fun:_dl_relocate_object
   fun:dl_main
   fun:_dl_sysdep_start
   fun:_dl_start
}

###########################################################################
# GLib quark/interned string handling.  These are created forever and the
# corresponding data not intended to be freed.

{
   glib2-static-quark-1
   Memcheck:Leak
   fun:realloc
   fun:g_realloc
   fun:g_quark_from_string
}

{
   glib2-static-quark-2
   Memcheck:Leak
   fun:malloc
   fun:g_malloc
   fun:g_quark_from_string
}

{
   glib2-static-quark-3
   Memcheck:Leak
   fun:calloc
   fun:g_malloc0
   fun:g_hash_table_resize
   fun:g_hash_table_insert_internal
   fun:g_quark_from_string
}

{
   glib-static-quark-4
   Memcheck:Leak
   fun:malloc
   fun:g_malloc
   fun:g_quark_from_static_string
   fun:g_type_init_with_debug_flags
}

###########################################################################
# GObject type registration ‘leaks’.  The types are registered forever and
# the corresponding data not intended to be freed.

{
   glib2-static-type-registration-1
   Memcheck:Leak
   fun:malloc
   fun:g_malloc
   fun:g_slice_alloc
   fun:freelist_alloc
   fun:_g_atomic_array_copy
   fun:type_node_any_new_W
   fun:g_type_register_static
   fun:g_type_register_static_simple
}

{
   glib2-static-type-registration-2
   Memcheck:Leak
   fun:realloc
   fun:g_realloc
   fun:type_node_any_new_W
   fun:g_type_register_static
}

{
   glib2-static-type-registration-3
   Memcheck:Leak
   fun:malloc
   fun:realloc
   fun:g_realloc
   fun:type_node_any_new_W
   fun:g_type_register_static
}

{
   glib2-static-interface-registration-1
   Memcheck:Leak
   fun:malloc
   fun:g_malloc
   fun:g_slice_alloc
   fun:freelist_alloc
   fun:_g_atomic_array_copy
   ...
   fun:type_node_add_iface_entry_W
   fun:type_add_interface_Wm
   fun:g_type_add_interface_static
}

{
   glib2-static-class-ref-1
   Memcheck:Leak
   fun:calloc
   fun:g_malloc0
   fun:g_type_class_ref
}

{
   glib2-static-class-ref-2
   Memcheck:Leak
   fun:malloc
   fun:g_malloc
   fun:g_memdup
   fun:type_iface_vtable_base_init_Wm
   fun:g_type_class_ref
}

