/* -*- Mode: C; c-basic-offset: 4 -*- */
%%
headers
#include <Python.h>
#include <pygobject.h>
#include <libprocess/gwyprocess.h>
#include <libgwyddion/gwyddion.h>
#include <libprocess/cdline.h>
#include <libprocess/hough.h>
#include <libprocess/tip.h>
#include <libgwymodule/gwymodule.h>
#include <libgwymodule/gwymodule-process.h>
// ##include "pywrap.h"
%%
modulename gwyddion
%%
import gobject.GObject as PyGObject_Type
// import glib.GQuark as PyGQuark_Type
%%
ignore-glob
  *_get_type                            
  gwy_data_field_get_drift_from_sample
  gwy_data_field_get_drift_from_isotropy
  gwy_data_field_get_data
  gwy_data_line_get_data
  *get_string 
%%
ignore-type 
  GwyCDLine
  
%%
define gwy_app_data_browser_get_current_key noargs
static PyObject *
_wrap_gwy_app_data_browser_get_current_key(PyGObject *self)
{
   GQuark key;

   gwy_app_data_browser_get_current(GWY_APP_DATA_FIELD_KEY, &key, NULL);
   return PyInt_FromLong(key);
}
%%
define gwy_app_data_browser_get_current_datafield noargs
static PyObject *
_wrap_gwy_app_data_browser_get_current_datafield(PyGObject *self)
{
   GwyDataField *dfield;

   gwy_app_data_browser_get_current(GWY_APP_DATA_FIELD, &dfield, NULL);
   return pygobject_new((GObject *)dfield);
}
%%
define gwy_app_data_browser_get_current_mask noargs
static PyObject *
_wrap_gwy_app_data_browser_get_current_mask(PyGObject *self)
{
   GwyDataField *dmask;

   gwy_app_data_browser_get_current(GWY_APP_MASK_FIELD, &dmask, NULL);
   return pygobject_new((GObject *)dmask);
}
%%
define gwy_app_data_browser_get_current_datafield_id noargs
static PyObject *
_wrap_gwy_app_data_browser_get_current_datafield_id(PyGObject *self)
{
   gint id;

   gwy_app_data_browser_get_current(GWY_APP_DATA_FIELD_ID, &id, NULL);
   return PyInt_FromLong(id);
}
%%
define gwy_app_data_browser_get_current_showfield_key noargs
static PyObject *
_wrap_gwy_app_data_browser_get_current_showfield_key(PyGObject *self)
{
   GQuark key;

   gwy_app_data_browser_get_current(GWY_APP_DATA_FIELD_ID, &key, NULL);
   return PyInt_FromLong(key);
}
%%
define gwy_app_data_browser_get_current_showfield noargs
static PyObject *
_wrap_gwy_app_data_browser_get_current_showfield(PyGObject *self)
{
   GwyDataField *sfield;

   gwy_app_data_browser_get_current(GWY_APP_SHOW_FIELD, &sfield, NULL);
   return pygobject_new((GObject *)sfield);
}
%%
define gwy_app_data_browser_get_current_container noargs
static PyObject *
_wrap_gwy_app_data_browser_get_current_container(PyGObject *self)

{
   GwyContainer *c;

   gwy_app_data_browser_get_current(GWY_APP_CONTAINER, &c, NULL);
   return pygobject_new((GObject *)c);
}
%%
define GwyDataField.duplicate noargs
static PyObject *
_wrap_gwy_data_field_duplicate(PyGObject *self)
{   
   GwyDataField *ret;

   ret = gwy_data_field_duplicate(GWY_DATA_FIELD(self->obj));

   return pygobject_new((GObject *)ret); 
}

%%
override gwy_app_undo_qcheckpointv kwargs
static PyObject *
_wrap_gwy_app_undo_qcheckpointv(PyObject *self, PyObject *args, PyObject *kwargs) 
{
   static char *kwlist[] = {"container", "key", NULL};

   PyGObject *cont;
   GQuark key;

   if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!i:gwy_app_undo_qcheckpointv", kwlist, &PyGwyContainer_Type, &cont, &key))
        return NULL;
   gwy_app_undo_qcheckpointv(GWY_CONTAINER(cont->obj), 1, &key);
   Py_INCREF(Py_None);
   return Py_None;
}
%%
define GwyDataField.get_data noargs
static PyObject *
_wrap_gwy_data_field_get_data(PyGObject *self)
{   
   gdouble *data;
   gint len, xres, yres;
   PyObject *tuple;
   int i;

   xres = gwy_data_field_get_xres(GWY_DATA_FIELD(self->obj));
   yres = gwy_data_field_get_yres(GWY_DATA_FIELD(self->obj));
   // Get size of data field
   len = xres * yres;
   // Create tuple by size of data field
   tuple = PyTuple_New(len);
   
   data = gwy_data_field_get_data(GWY_DATA_FIELD(self->obj));
   // fill tuple with data field values
   for (i = 0; i < len; i++) {
      /* get data read only, any changes to the tuple does not reflect on actual datafield */
      PyTuple_SetItem(tuple, i, PyFloat_FromDouble(data[i]));
   }

   return tuple;
}
%%
define GwyDataLine.get_data noargs
static PyObject *
_wrap_gwy_data_line_get_data(PyGObject *self)
{   
   gdouble *data;
   gint res;
   PyObject *tuple;
   int i;

   // Get size of data line
   res = gwy_data_line_get_res(GWY_DATA_LINE(self->obj));
   // Create tuple by size of data field
   tuple = PyTuple_New(res);
   
   data = gwy_data_line_get_data(GWY_DATA_LINE(self->obj));
   // fill tuple with data field values
   for (i = 0; i < res; i++) {
      /* get data read only, any changes to the tuple does not reflect on actual datafield */
      PyTuple_SetItem(tuple, i, PyFloat_FromDouble(data[i]));
   }

   return tuple;
}
%%
override gwy_app_data_browser_get_data_ids kwargs
static PyObject *
_wrap_gwy_app_data_browser_get_data_ids(PyObject *self, PyObject *args, PyObject *kwargs) 
{
   static char *kwlist[] = {"container", NULL};
   PyGObject *cont;
   gint *id_it; // id array iterator
   gint members = 0; // members of array of ids
   gint i, *ids;
   PyObject *tuple;
   
   if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:gwy_app_data_browser_get_data_ids", kwlist, &PyGwyContainer_Type, &cont))
      return NULL;

   ids = gwy_app_data_browser_get_data_ids(GWY_CONTAINER(cont->obj));
   id_it = ids;
   // Get number of members in array
   while (*id_it != -1) {
      members++;
      id_it++;
   }
   // Create tuple by size ids array
   tuple = PyTuple_New(members);
   if (!tuple)
      return NULL;
   // fill tuple with ids
   for (i = 0 ; i < members; i++) { 
      PyTuple_SetItem(tuple, i, PyInt_FromLong(ids[i]));
   }
   g_free(ids);
   return tuple;
}

%%
define GwyContainer.set_object_by_name kwargs
static PyObject *
_wrap_gwy_container_set_object_by_name(PyGObject *self, PyObject *args, PyObject *kwargs) 
{
   static char *kwlist[] = {"name", "obj",  NULL};
   GwyContainer *container;   
   gchar *key, *class_str;
   PyObject *obj, *type;

   container = GWY_CONTAINER(self->obj);
   if (!PyArg_ParseTupleAndKeywords(args, 
                                    kwargs,
                                    "sO:GwyContainer.set_object_by_name", 
                                    kwlist, 
                                    &key, 
                                    &obj))
        return NULL;
   // convert obj into right C type
   type = PyObject_GetAttrString(obj, "__class__");
   if (type) {
      PyObject *name = PyObject_GetAttrString(type, "__name__");
      //Py_DECREF(type);
      if (name) {
         class_str = PyString_AsString(name);
         if (!strcmp(class_str, "DataField")) {
            PyGObject* d;

            if (!PyArg_ParseTupleAndKeywords(args, 
                                             kwargs,
                                             "sO!:GwyContainer.set_object_by_name", 
                                             kwlist, 
                                             &key, 
                                             &PyGwyDataField_Type, 
                                             &d)) {
               return NULL;
            }            
            gwy_container_set_object_by_name(container, key, GWY_DATA_FIELD(d->obj));
            g_object_unref(GWY_DATA_FIELD(d->obj));
         } else if (!strcmp(class_str, "Container")) {
            PyGObject* d;

            if (!PyArg_ParseTupleAndKeywords(args, 
                                             kwargs,
                                             "sO!:GwyContainer.set_object_by_name", 
                                             kwlist, 
                                             &key, 
                                             &PyGwyContainer_Type, 
                                             &d)) {
               return NULL;
            }
            gwy_container_set_object_by_name(container, key, GWY_CONTAINER(d->obj));
         }
             
         //Py_DECREF(name);
      }
   }
   
   Py_INCREF(Py_None);
   return Py_None;

}
/*

define gwy_load_datafield kwargs
static PyObject *
_wrap_gwy_load_datafield(PyGObject *self, PyObject *args, PyObject *kwargs) 
{    
   static char *kwlist[] = {"data",  NULL};
   GwyContainer *container;
   GwyDataField *d;
   gchar *key, *class_str;
   PyObject *obj, *type;

   if (!PyArg_ParseTupleAndKeywords(args, 
                                    kwargs,
                                    "O!:GwyContainer.set_object_by_name", 
                                    kwlist, 
                                    &PyGwyDataField_Type, 
                                    &d))
        return NULL;
   // create container
   container = gwy_container_new();
   gwy_container_set_object_by_name(container, "/0/data", d);
   Py_INCREF(Py_None);
   return Py_None;

}
*/
// TODO: use G_OBJECT_TYPE_NAME instead of string values in set_object_by_name
/* vim: set cin et ts=4 sw=4 cino=>1s,e0,n0,f0,{0,}0,^0,\:1s,=0,g1s,h0,t0,+1s,c3,(0,u0 : */
