/* -*- Mode: C; c-basic-offset: 4 -*- */
%%
headers
#include <Python.h>
#include <pygobject.h>
#include <pygtk/pygtk.h>
#include <libprocess/gwyprocess.h>
#include <libgwyddion/gwyddion.h>
#include <libprocess/cdline.h>
#include <libprocess/hough.h>
#include <libprocess/tip.h>
#include <libgwymodule/gwymodule.h>
#include <libgwymodule/gwymodule-process.h>
#include <libdraw/gwygradient.h>
#include <libdraw/gwyglmaterial.h>
#include <libdraw/gwypixfield.h>
#include <libdraw/gwydraw.h>
#include <libgwydgets/gwy3dlabel.h>
#include <libgwydgets/gwy3dsetup.h>
#include <libgwydgets/gwy3dview.h>
#include <libgwydgets/gwy3dwindow.h>
#include <libgwydgets/gwyaxisdialog.h>
#include <libgwydgets/gwyaxis.h>
#include <libgwydgets/gwycoloraxis.h>
#include <libgwydgets/gwycolorbutton.h>
#include <libgwydgets/gwycombobox.h>
#include <libgwydgets/gwycurve.h>
#include <libgwydgets/gwydataview.h>
#include <libgwydgets/gwydataviewlayer.h>
#include <libgwydgets/gwydatawindow.h>
#include <libgwydgets/gwydgetenums.h>
#include <libgwydgets/gwydgetmarshals.h>
#include <libgwydgets/gwydgets.h>
#include <libgwydgets/gwydgettypes.h>
#include <libgwydgets/gwydgetutils.h>
#include <libgwydgets/gwygraphareadialog.h>
#include <libgwydgets/gwygrapharea.h>
#include <libgwydgets/gwygraphbasics.h>
#include <libgwydgets/gwygraphcorner.h>
#include <libgwydgets/gwygraphcurvemodel.h>
#include <libgwydgets/gwygraphcurves.h>
#include <libgwydgets/gwygraphdata.h>
#include <libgwydgets/gwygraph.h>
#include <libgwydgets/gwygraphlabeldialog.h>
#include <libgwydgets/gwygraphlabel.h>
#include <libgwydgets/gwygraphmodel.h>
#include <libgwydgets/gwygraphselections.h>
#include <libgwydgets/gwygraphwindow.h>
#include <libgwydgets/gwygraphwindowmeasuredialog.h>
#include <libgwydgets/gwyhmarkerbox.h>
#include <libgwydgets/gwyhruler.h>
#include <libgwydgets/gwyinventorystore.h>
#include <libgwydgets/gwylayer-basic.h>
#include <libgwydgets/gwylayer-mask.h>
#include <libgwydgets/gwymarkerbox.h>
#include <libgwydgets/gwynullstore.h>
#include <libgwydgets/gwyoptionmenus.h>
#include <libgwydgets/gwypixmaplayer.h>
#include <libgwydgets/gwyradiobuttons.h>
#include <libgwydgets/gwyruler.h>
#include <libgwydgets/gwyscitext.h>
#include <libgwydgets/gwyselectiongraph1darea.h>
#include <libgwydgets/gwyselectiongrapharea.h>
#include <libgwydgets/gwyselectiongraphline.h>
#include <libgwydgets/gwyselectiongraphpoint.h>
#include <libgwydgets/gwyselectiongraphzoom.h>
#include <libgwydgets/gwysensitivitygroup.h>
#include <libgwydgets/gwyshader.h>
#include <libgwydgets/gwystatusbar.h>
#include <libgwydgets/gwystock.h>
#include <libgwydgets/gwyvectorlayer.h>
#include <libgwydgets/gwyvruler.h>
#include <app/gwymoduleutils-file.h>
#include <app/gwymoduleutils.h>

typedef gdouble ArrayOfGDoubleNullTerminated;
typedef gint GIntValue;
typedef gdouble GDoubleValue;
typedef gdouble GDoubleArray;

// ##include "pywrap.h"
%%
modulename gwy
%%
import gobject.GObject as PyGObject_Type
import gtk.Table as PyGtkTable_Type
import gtk.Widget as PyGtkWidget_Type
import gtk.Dialog as PyGtkDialog_Type
import gtk.Button as PyGtkButton_Type
import gtk.DrawingArea as PyGtkDrawingArea_Type
import gtk.Object as PyGtkObject_Type
import gtk.Window as PyGtkWindow_Type
import gtk.Layout as PyGtkLayout_Type
import gtk.TreeView as PyGtkTreeView_Type
import gtk.VBox as PyGtkVBox_Type
import gtk.Statusbar as PyGtkStatusbar_Type
import gtk.ComboBox as PyGtkComboBox_Type
import gtk.Tooltips as PyGtkTooltips_Type
import gtk.Orientation as PyGtkOrientation_Type
import gtk.PositionType as PyGtkPositionType_Type
import gtk.TreeIter as PyGtkTreeIter_Type
import gtk.ListStore as PyGtkListStore_Type
import gtk.UpdateType as PyGtkUpdateType_Type
import gtk.gdk.Drawable as PyGdkDrawable_Type
import gtk.gdk.Pixbuf as PyGdkPixbuf_Type
import gtk.gdk.GC as PyGdkGC_Type
import gtk.gdk.LineStyle as PyGdkLineStyle_Type
%%
ignore-glob
  *_get_type                            
  gwy_container_get_string
  gwy_gradient_sample
  gwy_vector_layer_button*
  gwy_vector_layer_motion_notify
  gwy_vector_layer_key*
  gwy_md5_get_digest
  gwy_graph_draw_line
  gwy_gradient_get_samples
%%
ignore-type 
  GwyPlainTool
%%
define gwy_app_data_browser_get_current_key noargs
/**
 *  gwy_app_data_browser_get_current_key: 
 *
 *  Get current key.
 *
 *  Returns: A numeric value representing the current key
**/   
static PyObject *
_wrap_gwy_app_data_browser_get_current_key(PyGObject *self)
{
   GQuark key;

   gwy_app_data_browser_get_current(GWY_APP_DATA_FIELD_KEY, &key, NULL);
   return PyInt_FromLong(key);
}
%%
define gwy_app_data_browser_get_current_datafield noargs
/**
 *  gwy_app_data_browser_get_current_datafield:
 *
 *  Get current datafield.
 *
 *  Returns: reference to current datafield as L{DataField} object
**/   
static PyObject *
_wrap_gwy_app_data_browser_get_current_datafield(PyGObject *self)
{
   GwyDataField *dfield;

   gwy_app_data_browser_get_current(GWY_APP_DATA_FIELD, &dfield, NULL);
   return pygobject_new((GObject *)dfield);
}
%%
define gwy_app_data_browser_get_current_mask noargs
/**
 *  gwy_app_data_browser_get_current_mask:
 *
 *  Get current mask.
 *
 *  Returns: reference to current mask as L{DataField} object
**/   
static PyObject *
_wrap_gwy_app_data_browser_get_current_mask(PyGObject *self)
{
   GwyDataField *dmask;

   gwy_app_data_browser_get_current(GWY_APP_MASK_FIELD, &dmask, NULL);
   return pygobject_new((GObject *)dmask);
}
%%
define gwy_app_data_browser_get_current_datafield_id noargs
/**
 * gwy_app_data_browser_get_current_datafield_id:
 *
 * Get current datafield's id.
 *
 * Returns: A numeric value representing the current datafield id
**/   
static PyObject *
_wrap_gwy_app_data_browser_get_current_datafield_id(PyGObject *self)
{
   gint id;

   gwy_app_data_browser_get_current(GWY_APP_DATA_FIELD_ID, &id, NULL);
   return PyInt_FromLong(id);
}
%%
define gwy_app_data_browser_get_current_showfield_key noargs
/**
 *  gwy_app_data_browser_get_current_showfield_key:
 *
 *  Get current showfield's key.
 *
 *  Returns: A numeric value representing the current showfield's key
**/
static PyObject *
_wrap_gwy_app_data_browser_get_current_showfield_key(PyGObject *self)
{
   GQuark key;

   gwy_app_data_browser_get_current(GWY_APP_DATA_FIELD_ID, &key, NULL);
   return PyInt_FromLong(key);
}
%%
define gwy_app_data_browser_get_current_showfield noargs
/**
 * gwy_app_data_browser_get_current_showfield:
 *
 * Get current showfield.
 *
 * Returns: reference to current showfield as L{DataField} object
**/   
static PyObject *
_wrap_gwy_app_data_browser_get_current_showfield(PyGObject *self)
{
   GwyDataField *sfield;

   gwy_app_data_browser_get_current(GWY_APP_SHOW_FIELD, &sfield, NULL);
   return pygobject_new((GObject *)sfield);
}

%%
define gwy_app_data_browser_get_current_container noargs
/**
 *  gwy_app_data_browser_get_current_container:
 *
 *  Get current container.
 *
 *  Returns: reference to current container as L{Container} object
**/
static PyObject *
_wrap_gwy_app_data_browser_get_current_container(PyGObject *self)

{
   GwyContainer *c;

   gwy_app_data_browser_get_current(GWY_APP_CONTAINER, &c, NULL);
   return pygobject_new((GObject *)c);
}

%%
define GwyDataField.duplicate noargs
/**
 * gwy_data_field_duplicate:
 *
 * Duplicate datafield
 *
 * Returns: duplicated datafield
**/
static PyObject *
_wrap_gwy_data_field_duplicate(PyGObject *self)
{   
   GwyDataField *ret;

   ret = gwy_data_field_duplicate(GWY_DATA_FIELD(self->obj));

   return pygobject_new((GObject *)ret); 
}

%%
override gwy_app_undo_qcheckpointv kwargs
static PyObject *
_wrap_gwy_app_undo_qcheckpointv(PyObject *self, PyObject *args, PyObject *kwargs) 
{
   static char *kwlist[] = {"container", "key", NULL};

   PyGObject *cont;
   GQuark key;

   if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!i:gwy_app_undo_qcheckpointv", kwlist, &PyGwyContainer_Type, &cont, &key))
        return NULL;
   gwy_app_undo_qcheckpointv(GWY_CONTAINER(cont->obj), 1, &key);
   Py_INCREF(Py_None);
   return Py_None;
}

%%
override GwyDataField.get_data noargs
/**
 * gwy_data_field_get_data:
 *
 * Create a tuple of data which the datafield contains. Content of the tuple is NOT reference to original datafield but its copy.
 *
 * Returns: tuple of raw numeric data from DataField
**/
static PyObject *
_wrap_gwy_data_field_get_data(PyGObject *self)
{   
   gdouble *data;
   gint len, xres, yres;
   PyObject *tuple;
   int i;

   xres = gwy_data_field_get_xres(GWY_DATA_FIELD(self->obj));
   yres = gwy_data_field_get_yres(GWY_DATA_FIELD(self->obj));
   // Get size of data field
   len = xres * yres;
   // Create tuple by size of data field
   tuple = PyTuple_New(len);
   
   data = gwy_data_field_get_data(GWY_DATA_FIELD(self->obj));
   // fill tuple with data field values
   for (i = 0; i < len; i++) {
      /* get data read only, any changes to the tuple does not reflect on actual datafield */
      PyTuple_SetItem(tuple, i, PyFloat_FromDouble(data[i]));
   }

   return tuple;
}

%%
override GwyDataLine.get_data noargs
static PyObject *
_wrap_gwy_data_line_get_data(PyGObject *self)
{   
   gdouble *data;
   gint res;
   PyObject *tuple;
   int i;

   // Get size of data line
   res = gwy_data_line_get_res(GWY_DATA_LINE(self->obj));
   // Create tuple by size of data field
   tuple = PyTuple_New(res);
   
   data = gwy_data_line_get_data(GWY_DATA_LINE(self->obj));
   // fill tuple with data field values
   for (i = 0; i < res; i++) {
      /* get data read only, any changes to the tuple does not reflect on actual datafield */
      PyTuple_SetItem(tuple, i, PyFloat_FromDouble(data[i]));
   }

   return tuple;
}
%%
override gwy_app_data_browser_get_data_ids kwargs
/**
 *  gwy_app_data_browser_get_data_ids:
 *  @container: A data container.
 *
 *  Gets the list of all channels in a data container.
 *  The container must be known to the data browser.
 *
 *  Returns: A tuple with ids
**/
static PyObject *
_wrap_gwy_app_data_browser_get_data_ids(PyObject *self, PyObject *args, PyObject *kwargs) 
{
   static char *kwlist[] = {"container", NULL};
   PyGObject *cont;
   gint *id_it; // id array iterator
   gint members = 0; // members of array of ids
   gint i, *ids;
   PyObject *tuple;
   
   if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:gwy_app_data_browser_get_data_ids", kwlist, &PyGwyContainer_Type, &cont))
      return NULL;

   ids = gwy_app_data_browser_get_data_ids(GWY_CONTAINER(cont->obj));
   id_it = ids;
   // Get number of members in array
   while (*id_it != -1) {
      members++;
      id_it++;
   }
   // Create tuple by size ids array
   tuple = PyTuple_New(members);
   if (!tuple)
      return NULL;
   // fill tuple with ids
   for (i = 0 ; i < members; i++) { 
      PyTuple_SetItem(tuple, i, PyInt_FromLong(ids[i]));
   }
   g_free(ids);
   return tuple;
}

%%
define GwyContainer.set_object_by_name kwargs
/**
 * gwy_container_set_object_by_name:
 * @name: name of object to store
 * @object: object to store
 *
 * Store object into container, not tested.
**/      
static PyObject *
_wrap_gwy_container_set_object_by_name(PyGObject *self, PyObject *args, PyObject *kwargs) 
{
   static char *kwlist[] = {"name", "obj",  NULL};
   GwyContainer *container;   
   gchar *key, *class_str;
   PyObject *obj;
   GValue *gval;

   container = GWY_CONTAINER(self->obj);
   if (!PyArg_ParseTupleAndKeywords(args, 
                                    kwargs,
                                    "sO:GwyContainer.set_object_by_name", 
                                    kwlist, 
                                    &key, 
                                    &obj))
        return NULL;
   // try to convert to GValue
   gval = convert_pyobject_to_gvalue(obj);
   if (!gval)
      return NULL;
   gwy_container_set_value_by_name(container, key, gval, 0);
   
   Py_INCREF(Py_None);
   return Py_None;
}

%%
define GwyContainer.get_object_by_name kwargs
/**
 * gwy_container_get_object_by_name:
 * @name: name of object
 *
 * Get object of given name from container.
 *
 * Returns: object of given name
**/
static PyObject *
_wrap_gwy_container_get_object_by_name(PyGObject *self, PyObject *args, PyObject *kwargs) 
{
   static char *kwlist[] = {"name",  NULL};
   gchar *key;
   PyObject *obj;
   GValue gval;

   if (!PyArg_ParseTupleAndKeywords(args, 
                                    kwargs,
                                    "s:GwyContainer.get_object_by_name", 
                                    kwlist, 
                                    &key))
        return NULL;
   gval = gwy_container_get_value_by_name(GWY_CONTAINER(self->obj), key);
   printf("get obj: %d\n", gval);

   obj = convert_gvalue_to_pyobject(&gval);
   printf(" obj: %d\n", obj);
   return obj;
}

%%
define GwyContainer.contains_by_name kwargs
static PyObject *
_wrap_gwy_container_contains_by_name(PyGObject *self, PyObject *args, PyObject *kwargs) 
{
   static char *kwlist[] = {"name",  NULL};
   gchar *key;
   gboolean res;

   if (!PyArg_ParseTupleAndKeywords(args, 
                                    kwargs,
                                    "s:GwyContainer.contains_by_name", 
                                    kwlist, 
                                    &key))
        return NULL;
   res = gwy_container_contains_by_name(GWY_CONTAINER(self->obj), key);

   return PyBool_FromLong((long) res);
}

%%
override GwyContainer.set_string kwargs
/**
 * gwy_container_set_string: 
 * @key: an object key
 * @value: new string
 *
 * Set string for key to given value
 *
 **/
static PyObject *
_wrap_gwy_container_set_string(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "key", "value", NULL };
    int key, value_len;
    guchar *value;
    gchar *dup_value;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"is#:GwyContainer.set_string", kwlist, &key, &value, &value_len))
        return NULL;
    
    dup_value = g_strndup(value, value_len);
    gwy_container_set_string(GWY_CONTAINER(self->obj), key, dup_value);
    
    Py_INCREF(Py_None);
    return Py_None;
}

%%
define GwyContainer.get_string kwargs
static PyObject *
_wrap_gwy_container_get_string(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "key", NULL };
    int key;
    const guchar *value;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:GwyContainer.set_string", kwlist, &key))
        return NULL;
    
    value = gwy_container_get_string(GWY_CONTAINER(self->obj), key);
    if (value)
        return PyString_FromString(value);
    else 
        return NULL;
}

%%
define GwyContainer.get_object kwargs
/**
 * gwy_container_get_object:
 * @key: key of object.
 *
 * Get object of given key from container.
 *
 * Returns: object of given key
**/
static PyObject *
_wrap_gwy_container_get_object(PyGObject *self, PyObject *args, PyObject *kwargs) 
{
   static char *kwlist[] = {"key", NULL};
   gint key;
   gpointer obj;
   
   if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:gwy_container_get_object", kwlist, &key))
      return NULL;
   obj = gwy_container_get_object((GWY_CONTAINER(self->obj)), key);
   if (obj && (GWY_IS_DATA_FIELD(obj) || GWY_IS_DATA_LINE(obj) || GWY_IS_RESOURCE(obj) || GWY_IS_SI_UNIT(obj))) {
      return pygobject_new((GObject *)obj);
   } else {
      Py_INCREF(Py_None);
      return Py_None;
   }
}

%%
define GwyContainer.keys noargs
static PyObject *
_wrap_gwy_container_keys(PyGObject *self) 
{
   gint i;
   GQuark *keys;
   PyObject *tuple;
   
   keys = gwy_container_keys(GWY_CONTAINER(self->obj));
   tuple = PyTuple_New(gwy_container_get_n_items(GWY_CONTAINER(self->obj)));
   if (!tuple)
      return NULL;
   // fill tuple with keys
   for (i = 0 ; i < gwy_container_get_n_items(GWY_CONTAINER(self->obj)); i++) {
      PyTuple_SetItem(tuple, i, PyInt_FromLong(keys[i]));
   }
   g_free(keys);
   return tuple;
}

%%
define GwyContainer.keys_by_name noargs
static PyObject *
_wrap_gwy_container_keys_by_name(PyGObject *self) 
{
   gint i;
   const gchar **keys;
   PyObject *tuple;
   
   keys = gwy_container_keys_by_name(GWY_CONTAINER(self->obj));
   tuple = PyTuple_New(gwy_container_get_n_items(GWY_CONTAINER(self->obj)));
   if (!tuple)
      return NULL;
   // fill tuple with keys
   for (i = 0 ; i < gwy_container_get_n_items(GWY_CONTAINER(self->obj)); i++) { 
      PyTuple_SetItem(tuple, i, PyString_FromString(keys[i]));
   }
   g_free(keys);
   return tuple;
}

%%
override gwy_app_file_load kwargs
/**
 * gwy_app_file_load:
 * @filename: Filename of file to open
 *
 * Load specified file
 *  
 * Returns: A main GwyContainer of opened file
**/
static PyObject *
_wrap_gwy_app_file_load(PyObject *self, PyObject *args, PyObject *kwargs) 
{
   static char *kwlist[] = {"filename", NULL};

   gchar *filename;
   GwyContainer *c;

   if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:gwy_app_file_load", kwlist, &filename))
        return NULL;
   c = gwy_app_file_load(filename, NULL, NULL);
   return pygobject_new((GObject *)c);
}

%%
override gwy_app_file_write kwargs
static PyObject *
_wrap_gwy_app_file_write(PyObject *self, PyObject *args, PyObject *kwargs)
{
   static char *kwlist[] = {"container", "filename", NULL};
   gchar *filename;
   PyGObject* container;
   
   if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!s:gwy_app_file_write", 
               kwlist, &PyGwyContainer_Type, &container, &filename))
       return NULL;
   if (gwy_app_file_write(GWY_CONTAINER(container->obj), filename, NULL, NULL)) {
       Py_RETURN_TRUE;
   }
   else {
       Py_RETURN_FALSE;
   }
   

}
%%
// TODO: use G_OBJECT_TYPE_NAME instead of string values in set_object_by_name
/* vim: set cin et ts=4 sw=4 cino=>1s syntax=c,e0,n0,f0,{0,}0,^0,\:1s,=0,g1s,h0,t0,+1s,c3,(0,u0 : */
