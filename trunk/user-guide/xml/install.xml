<?xml version='1.0' encoding='utf-8'?>
<!-- @(#) $Id$ -->
<!DOCTYPE book PUBLIC '-//OASIS//DTD DocBook XML V4.2//EN'
               'http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd'>
<chapter id="installation">
  <title>Installation</title>
  <para>
    <application>Gwyddion</application> source code and binaries can be
    downloaded from the
    <ulink url="http://gwyddion.net/download.php">download</ulink>
    web page of the project, or alternatively from raw
    <ulink url="http://sourceforge.net/project/showfiles.php?group_id=121723">SourceForge.net download page</ulink>.
    The installation slightly varies depending on the operating system used.
    However, basically it consist of two steps:
    <itemizedlist>
      <listitem>
        <para>
          Installing the <ulink url="http://www.gtk.org/">Gtk+</ulink> widget
          toolkit (if not already done).
        </para>
      </listitem>
      <listitem>
        <para>Installing Gwyddion</para>
      </listitem>
    </itemizedlist>
    The first step is necessary at first <application>Gwyddion</application>
    installation on operating systems that do not come with Gtk+.
    The version of Gtk+ necessary for your system (and where to obtain it) is
    described in the next sections.
  </para>
  <para>
    Generally, one needs Gtk+ libraries (run-time package) for running
    <application>Gwyddion</application>
    and a Gtk+ development package for <application>Gwyddion</application>
    compilation from source code and development.
  </para>
  <para>
    We recommend to download
    <ulink url="http://gwyddion.net/download.php#sample-files">sample
      <application>Gwyddion</application> files</ulink>
    too. They are in native <application>Gwyddion</application> format
    and represent typical AFM data.
  </para>

  <sect2 id="installation-unix">
    <title>Linux/Unix Packages</title>
    <para>
      Some GNU/Linux and Unix systems may provide binary packages of Gwyddion.
      The <ulink url="http://gwyddion.net/download.php">download</ulink> page
      of the project also tracks known packages and packaging efforts.
      If your operating system provides such a package and it is recent enough,
      install it using the standard means of the operating system.  Otherwise
      proceed with compilation from source code.
    </para>
  </sect2>

  <sect2 id="installation-ms-windows">
    <title>MS Windows Packages</title>
    <para>
      If you never had any Gtk+ based application on your system (for example
      bitmap editor
      <ulink url="http://www.gimp.org/"><application>GIMP</application></ulink>)
      you will need to install Gtk+ run-time environment on your computer prior
      to <application>Gwyddion</application> installation.
      Gtk+ is a library designed for portable creating of graphical user
      interface (windows, buttons, etc.) that is available on many operating
      systems. Therefore applications using Gtk+ can be ported to various
      operating systems, including Microsoft Windows.
    </para>
    <para>
      Note that there are several Gtk+ packages for MS Windows operating
      systems available on the internet. Some of them include all required
      components (like GtkGLExt and LibXML2), some do not. We recommend
      <ulink url="http://gladewin32.sourceforge.net/">GladeWin32</ulink>
      packages that are known to contain all required components and we
      build Gwyddion MS Windows executables with them.
    </para>
    <para>
      For installation of <application>Gwyddion</application> please follow
      these steps:
    </para>
    <itemizedlist>
      <listitem>
        Download the Gtk+ run-time environment installer from
        <ulink url="http://gladewin32.sourceforge.net/">Gladewin32</ulink>,
        version 2.8 or higher, and install it.
      </listitem>
      <listitem>
        Download <ulink url="http://gwyddion.net/download.php#stable-windows"><application>Gwyddion</application> installer</ulink> and install
        <application>Gwyddion</application>.
      </listitem>
    </itemizedlist>
  </sect2>

  <sect2 id="installation-dependencies">
    <title>Build Dependencies</title>
    <para>
      The following table lists packages required to build
      <application>Gwyddion</application> from source code.  The table does not
      include common software compilation prerequisites like the C compiler or
      <command>make</command>.  Operating system specifics are described
      in following sections dedicated to building on particular operating
      systems.
    </para>
    <variablelist>
      <title>Build Dependencies</title>
      <varlistentry>
        <term>
          <ulink url="http://www.gtk.org/">Gtk+</ulink>
          ≥ 2.6.0 (Unix),
          ≥ 2.8.0 (MS Windows)
        </term>
        <listitem>
          <para>
            <emphasis>Required.</emphasis>
          </para>
          <para>
            It is possible to build Gwyddion with Gtk+ 2.6 on MS Windows too,
            but it requires manual build system adjustments and it is not
            supported.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <ulink url="http://gtkglext.sourceforge.net/">GtkGLExt</ulink>
          ≥ 1.0
        </term>
        <listitem>
          <para>
            <emphasis>Optional.</emphasis>
          </para>
          <para>
            Enables OpenGL 3D data views.
          </para>
          <para>
            The MS Windows build system is set up to require GtkGLExt and
            manual adjustments are necessary to disable it there.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <ulink url="http://www.libtiff.org/">LibTIFF</ulink>
          ≥ 3.6.0
        </term>
        <listitem>
          <para>
            <emphasis>Optional.</emphasis>
          </para>
          <para>
            Enables import of TIFF-based data files, namely JPK and PSIA,
            also enables export to TIFF images.
          </para>
          <para>
            The MS Windows build system is set up to require LibTIFF and
            manual adjustments are necessary to disable it there.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <ulink url="http://xmlsoft.org/">LibXML2</ulink>
          ≥ 2.<varname>x</varname>
        </term>
        <listitem>
          <para>
            <emphasis>Optional.</emphasis>
          </para>
          <para>
            Enables import of SPML files.
          </para>
          <para>
            The MS Windows build system is set up to require LibXML2 and
            manual adjustments are necessary to disable it there.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <ulink url="http://www.fftw.org/">FFTW3</ulink>
          ≥ 3.0 (32bit),
          ≥ 3.1 (64bit),
          Unix only
        </term>
        <listitem>
          <para>
            <emphasis>Optional.</emphasis>
          </para>
          <para>
            Speeds up various integral transforms, power spectrum and
            correlation operations.  It also allows to apply these operations
            on data fields of much more sizes without rescaling.
          </para>
          <para>
            Building with FFTW3 enabled is currently unsupported on MS Windows,
            although it is probably possible with some effort and manual
            adjustments.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </sect2>

  <sect2 id="installation-unix-source">
    <title>Linux/Unix from Source Code Tarball</title>
    <para>
      <application>Gwyddion</application> Unix build system is based on
      GNU autotools
      (<ulink url="http://www.gnu.org/software/autoconf/">autoconf</ulink>,
      <ulink url="http://www.gnu.org/software/automake/">automake</ulink>,
      <ulink url="http://www.gnu.org/software/libtool/">libtool</ulink>), like
      most of current Unix Free and Open Source Software.  If you have ever
      compiled software from source code, you very likely met autotools and
      already know how to proceed.  This section shall describe the
      compilation procedure in enough detail even for the uninitiated though.
      File <ulink url="http://gwyddion.svn.sourceforge.net/viewvc/*checkout*/gwyddion/trunk/gwyddion/INSTALL"><filename>INSTALL</filename></ulink>
      in the top-level directory of the
      source tarball contains generic GNU autotools installation instructions.
      <application>Gwyddion</application> specific information can be found in
      file <ulink url="http://gwyddion.svn.sourceforge.net/viewvc/*checkout*/gwyddion/trunk/gwyddion/INSTALL.gwyddion"><filename>INSTALL.gwyddion</filename></ulink>.
      Since this file comes with a particular version of
      <application>Gwyddion</application> it may contain more concrete or
      up-to-date information and you should follow it instead of this general
      guide if they contradict each other.
    </para>
    <sect3>
      <title>Quick Instructions</title>
      <para>
        If you know the drill:
      </para>
      <informalexample>
        <literallayout><userinput>tar -jxvf gwyddion-2.1.tar.bz2
cd gwyddion-2.1
./configure
make install</userinput></literallayout>
      </informalexample>
    </sect3>
    <sect3>
      <title>Source Unpacking</title>
      <para>
        Unpack the source code tarball with
        <informalexample>
          <userinput>tar -jxvf gwyddion-2.1.tar.bz2</userinput>
        </informalexample>
        or
        <informalexample>
          <userinput>tar -zxvf gwyddion-2.1.tar.gz</userinput>
        </informalexample>
        replacing 2.1 with the actual version number. It will create directory
        <filename>gwyddion-2.1</filename> (again, with the actual version
        number in place of 2.1), <command>cd</command> to this directory.
        All other compilation actions will take place there.
      </para>
      <para>
        Tarballs compressed with
        <ulink url="http://www.bzip.org/">bzip2</ulink>
        (<filename>.bz2</filename>) are considerably smaller than
        <ulink url="http://www.gzip.org/">gzip</ulink>
        compressed tarballs (<filename>.gz</filename>) but they need bzip2 to
        decompress,
        which used to be less widespread than gzip, to decompress.
        However, modern Unix and Unix-like systems should contain both.
      </para>
    </sect3>
    <sect3>
      <title>Configuration</title>
      <para>
        Run
        <informalexample>
          <userinput>./configure</userinput>
        </informalexample>
        to configure <application>Gwyddion</application>.
      </para>
      <para>
        The <command>configure</command> shell script attempts to guess correct
        values for various system-dependent variables used during compilation.
        It uses those values to create a <filename>Makefile</filename> in each
        directory of the package, a couple of header <filename>.h</filename>
        files containing system-dependent definitions and a few other
        system-dependent auxiliary files.
        Finally, it creates a shell script <command>config.status</command> that
        you can run in the future to recreate the current configuration, and
        a file <filename>config.log</filename>.  This file contains the details
        of the detection process and it is helpful to include it in compilation
        related bug reports.
      </para>
      <para>
        If <command>configure</command> reports missing required packages,
        install these packages and re-run it.  The same applies to the case
        when <command>configure</command> passes but you find you have not
        installed an optional package you want to compile
        <application>Gwyddion</application> with.  It is possible a package
        is not found or it is misdetected even if you have installed it, namely
        when it is installed into a non-standard directory. In this case it
        is necessary to adjust certain environment variables to make
        <command>configure</command> able to find the packages:
        <variablelist>
          <varlistentry>
            <term><envar>PKG_CONFIG_PATH</envar></term>
            <listitem>
              <para>
                Most packages come with so called
                <ulink url="http://pkgconfig.freedesktop.org/wiki/">pkg-config</ulink>
                files (<filename>.pc</filename>) that describe how programs
                should compile and link with them.  <command>configure</command>
                uses information from these files, therefore
                <envar>PKG_CONFIG_PATH</envar> must be set to list all
                non-standard directories with relevant pkg-config files.
                To add for instance a Gtk+ installation in
                <filename>/opt/gnome</filename> and a FFTW3 installation in
                <filename>$HOME/opt/fftw3</filename> one can do
                <userinput>PKG_CONFIG_PATH=/opt/gnome/lib/pkgconfig:$HOME/opt/fftw3/lib/pkgconfig; export PKG_CONFIG_PATH</userinput>
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <envar>PATH</envar>,
              <envar>LD_LIBRARY_PATH</envar>
            </term>
            <listitem>
              <para>
                It may be necessary to adjust these variables to include
                non-standard directories with executables and libraries of
                relevant packages, respectively.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <envar>CFLAGS</envar>,
              <envar>LDFLAGS</envar>
            </term>
            <listitem>
              <para>
                It may be necessary to adjust these variables to include
                non-standard directories with header files and libraries of
                packages that do not come with pkg-config files, for example
                for libTIFF in <filename>/usr/local</filename> one can do
                <userinput>CFLAGS=-I/usr/local/include; export CFLAGS</userinput>
                and
                <userinput>LDFLAGS=-L/usr/local/lib; export LDFLAGS</userinput>.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </para>
      <para>
        The directory <application>Gwyddion</application> will install to and
        various optional features can be enabled/disabled
        with <command>configure</command> command line
        options. To obtain the complete list of these options, run
        <informalexample>
          <userinput>./configure --help</userinput>
        </informalexample>
        Option <option>--prefix</option> sets the base installation
        directory. Program components will be installed into its
        <filename>bin</filename>, <filename>lib</filename>,
        <filename>share</filename>, etc. subdirectories (they will be created
        if they do not exist). More detailed control is possible with options
        specifying particular subdirectories as <option>--bindir</option>,
        <option>--libdir</option>.  The default prefix is
        <filename>/usr/local/bin</filename>, to install
        <application>Gwyddion</application> to your home directory you
        may want to use for instance
        <userinput>--prefix=$HOME/opt/gwyddion</userinput>.
      </para>
      <para>
        Optional features can be enabled/disabled with options as
        <option>--with-fftw3</option>/<option>--without-fftw3</option>
        (for FFTW3) and
        <option>--with-tiff</option>/<option>--without-tiff</option>
        (for LibTIFF).
        By default all optional features are enabled if their prerequisites
        are found.  A brief summary enabled and disabled optional features is
        printed near the end of <command>configure</command> output.
      </para>
    </sect3>
    <sect3>
      <title>Compilation</title>
      <para>
        Run
        <informalexample>
          <userinput>make</userinput>
        </informalexample>
        and wait until <application>Gwyddion</application> is compiled.  If
        <command>configure</command> finished without errors the compilation
        should pass too.
      </para>
      <para>
        If you need to do unusual things to compile the package, please try to
        figure out how <command>configure</command> could detect whether and
        what to do, and e-mail patches or instructions to the bug-report
        address so they can be considered for the next release.
      </para>
    </sect3>
    <sect3>
      <title>Installation</title>
      <para>
        Run
        <informalexample>
          <userinput>make install</userinput>
        </informalexample>
        to install <application>Gwyddion</application> to the target directory.
        If you install <application>Gwyddion</application> to a system
        directory you have to become root for running this command, for
        example using sudo:
        <informalexample>
          <userinput>sudo make install</userinput>
        </informalexample>
        Note <application>Gwyddion</application> has to be installed to be run,
        it is not possible to run it uninstalled.
      </para>
      <para>
        To install <application>Gwyddion</application> to a staging area,
        for example for packaging, set <command>make</command>
        <varname>DESTDIR</varname> variable to a prefix that will be
        prepended to all target directories:
        <informalexample>
          <userinput>make install DESTDIR=/var/tmp/gwyddion-buildroot</userinput>
        </informalexample>
        Do <emphasis>not</emphasis> override individual directory variables as
        <varname>bindir</varname>, <varname>libdir</varname>.
      </para>
    </sect3>
    <sect3>
      <title>Deinstallation</title>
      <para>
        Run
        <informalexample>
          <userinput>make uninstall</userinput>
        </informalexample>
        in the directory you previously compiled
        <application>Gwyddion</application> to remove it.  If you have lost
        the source directory meanwhile you can try to unpack, configure and
        build it exactly as before and then issue
        <userinput>make uninstall</userinput>, although this relies on your
        ability to reproduce the build process.
      </para>
    </sect3>
    <sect3>
      <title>RPM Packages</title>
      <para>
        It is possible to build RPM packages on RPM-based GNU/Linux
        distributions directly from source code tarballs with
        <informalexample>
          <userinput>rpmbuild -tb gwyddion-2.1.tar.bz2</userinput>
        </informalexample>
        where 2.1 is to be replaced with the actual version as above.
      </para>
    </sect3>
  </sect2>

  <sect2 id="installation-osx">
    <title>Mac OS X</title>
    <para>
      Much of the previous generic
      <link linkend="installation-unix-source">Unix/Linux installation
        section</link> applies also to OS X.  Therefore this section deals
      mainly with the specifics of OS X installation, some of the steps
      listed here are explained in more detail in the generic Unix section.
    </para>
    <para>
      Beside building everything on your own (good luck), at this time there
      are two ways to install <application>Gwyddion</application>:
      <itemizedlist>
        <listitem>
          using <ulink url="http://fink.sourceforge.net/">Fink</ulink> and
          compiling <application>Gwyddion</application> the common Unix way,
        </listitem>
        <listitem>
          using <ulink url="http://www.macports.org/">MacPorts</ulink>
          (formerly Darwinports) and building from a Portfile.
        </listitem>
      </itemizedlist>
    </para>
    <sect3>
      <title>Preparation</title>
      <para>
        To install and run <application>Gwyddion</application> you need the
        Xcode Tools and X (SDK and App) installed. They where located on your
        CDs/DVDs. The Xcode Tools where located on the first DVD as
        XcodeTools.mpkg below Xcode Tools, the X11SDK is located as
        X11SDK.pkg below the Packages Folder within Xcode Tools. X11 is
        localted as X11User.pkg below
        <filename>System/Installation/Packages</filename> even on the first
        DVD. If you have an CD Set the Discs may differ.
        <!-- XXX rowue: look where you find it on ppc -->
        Also you should have some experience using
        <application>Terminal.app</application>.  All the commands in the
        the rest of this section are to be entered and run in
        <application>Terminal.app</application>.
      </para>
      <para>
        See <link linkend="installation-dependencies">installation
          dependencies</link> section for an overview of required and
        optional packages to install prior to
        <application>Gwyddion</application> installation. The following table
        summarizes how they are called in the two software collections:
        <informaltable frame='none'>
          <tgroup cols='3'>
            <thead>
              <row>
                <entry>Package</entry>
                <entry>Fink</entry>
                <entry>MacPorts</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>Gtk+</entry>
                <entry>gtk+2</entry>
                <entry>gtk2</entry>
              </row>
              <row>
                <entry>GtkGLExt</entry>
                <entry>gtkglext1</entry>
                <entry>gtkglext</entry>
              </row>
              <row>
                <entry>FFTW3</entry>
                <entry>fftw3</entry>
                <entry>fftw-3</entry>
              </row>
              <row>
                <entry>LibXML2</entry>
                <entry>libxml2</entry>
                <entry>libxml2</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </para>
    </sect3>
    <sect3>
      <title>Fink</title>
      <para>
        <!-- XXX: a few more words about fink -->
        Get and install
        <ulink url="http://fink.sourceforge.net/">Fink</ulink>.
        After you installed Fink run
        <informalexample>
          <userinput>apt-get update</userinput>
        </informalexample>
        to update the database of available packages and install the
        dependencies (the following list is an example, you can choose
        a different set of optional packages):
        <informalexample>
          <userinput>apt-get install gtk+2 gtkglext1 fftw3 libxml2</userinput>
        </informalexample>
      </para>
      <para>
        When everything is installed, download
        <application>Gwyddion</application> source code, and follow the
        <link linkend="installation-unix-source">Unix installation
          section</link> instructions.
      </para>
    </sect3>
    <sect3>
      <title>MacPorts</title>
      <para>
        MacPorts is an <application>Port</application> based System for
        porting and installing open source/gnu software to OS X. It's based
        on using installation files called <quote>Portfiles</quote> which
        where describing the steps to compile and install an application. So
        it's far easy to port software to OS X using MacPorts but every
        computer has to compile the application.
        Get and install
        <ulink url="http://www.macports.org/">MacPorts</ulink>.
        After you installed MacPorts, run
        <informalexample>
          <userinput>sudo port selfupdate</userinput>
        </informalexample>
        to update MacPorts to the latest version.
      </para>
      <para>
        <application>Gwyddion</application> has been submitted to MacPorts
        therefore it should be eventually installable simply
        <informalexample>
          <userinput>sudo port install gwyddion</userinput>
        </informalexample>
        However, at the time of writing this it is not a part of Portbase yet
        and it is not known when it will be.  Therefore you need to obtain a
        <ulink url="http://gwyddion.net/download/test/Portfile"><filename>Portfile</filename></ulink>
        from the project's web.
        Store the <filename>Portfile</filename> to a folder,
        <command>cd</command> to this folder, run
        <informalexample>
          <userinput>sudo port install</userinput>
        </informalexample>
        and wait until everything builds (it will take some time).
        The result will appear in <filename>/opt/local</filename> as any
        other MacPorts software.
      </para>
    </sect3>
    <sect3>
      <title>Running</title>
      <para>
        Start <application>X11.app</application> and type
        in <application>Terminal.app</application>
        <informalexample>
          <userinput>export DISPLAY=":0"</userinput>
        </informalexample>
        Then run <application>Gwyddion</application> from the folder it
        was installed to.  This is typically
        <filename>/opt/local/bin</filename> for MacPorts and
        <filename>/usr/local/bin</filename> for Fink.  So for example for
        MacPorts run:
        <informalexample>
          <userinput>/usr/local/bin/gwyddion</userinput>
        </informalexample>
        You can also configure <application>X11.app</application>
        to run <application>Gwyddion</application> via:
        Locate X11.app in your dock, open the menu, choose Applications,
        choose Customize from the next menu. Here you can choose add and
        enter the name (gwyddion for example) as <guilabel>Menu Name</guilabel>
        and the complete path to gwddion (e.g. /usr/local/bin/gwyddion)
        as <guilabel>Command</guilabel>. After this you
        can choose gwyddion from the X11 menue.
      </para>
    </sect3>
  </sect2>

  <sect2 id="installation-ms-windows-source">
    <title>MS Windows from Source Code Tarball</title>
    <para>
      <application>Gwyddion</application> MS Windows build system uses the
      <application>Microsoft Visual C++</application> (MSVC) compiler
      (version 6 is tested and recommended, albeit it is a bit older).  It
      primarily consists of a set of <command>nmake</command> makefiles,
      that is the compilation is done from the command line.  This approach
      has several advantages for reproducibility and automation of the process
      and it enables easy synchronization of Unix and MS Windows build systems.
      The necessity to use command line may be considered a disadvantage,
      though you should find the compilation process quite simple even you are
      not used to use the command line much.
    </para>
    <para>
      In addition to MSVC you need to install Gtk+ development environment.
      Again, we recommend to use the
      <ulink url="http://gladewin32.sourceforge.net/">GladeWin32</ulink>
      package.  Note it also contains the run-time environment, therefore
      you do not need to install the run-time package if you install the
      development one.
    </para>
    <sect3>
      <title>Unpacking</title>
      <para>
        Unpack the source code tarball with your favorite (de)compression
        program or file manager. Tarballs compressed with
        <ulink url="http://www.bzip.org/">bzip2</ulink>
        (<filename>.bz2</filename>)
        are considerably smaller than
        <ulink url="http://www.gzip.org/">gzip</ulink> compressed tarballs
        (<filename>.gz</filename>), however support for bzip2 compression used
        to be less widespread than gzip compression support in MS Windows
        programs. Most recent programs support both, for example
        <ulink url="http://www.7-zip.org/"><application>7zip</application></ulink>
        which is also Free Software.
      </para>
      <para>
        The unpacking will create directory
        <filename>gwyddion-2.1</filename> (with 2.1 replaced with the actual
        version number) where all other compilation actions will take place.
      </para>
    </sect3>
    <sect3>
      <title>Configuration</title>
      <para>
        Open file <filename>make.msc</filename> in a text editor.  It starts
        approximately as follows:
      </para>
      <informalexample>
        <programlisting><![CDATA[
# @(#) $Id$
#
# XXX: Set following to your Gtk+-Development and MSVC paths
#
# The uncommented paths should work for default MSVC 6 installation and for
# default GladeWin32 installation.
# If you have GtkGLext separate from Gtk+, define GTKGLEXT_TOP accordingly.
# If you have LibXML2 separate from Gtk+, define LIBXML2_TOP accordingly.
GTK_TOP = C:\Gtk
GTKGLEXT_TOP = $(GTK_TOP)
LIBXML2_TOP = $(GTK_TOP)
#GTKGLEXT_TOP = C:\GtkGLExt\1.0
#LIBXML2_TOP = C:\libxml2
MSC_TOP = C:\Program Files\Microsoft Visual Studio\VC98
]]></programlisting>
      </informalexample>
      <para>
        Check and correct the paths according to the instructions.  Often,
        no modifications are necessary as the paths in the file represent the
        default installation directories of each program.
      </para>
      <variablelist>
        <varlistentry>
          <term><envar>GTK_TOP</envar></term>
          <listitem>
            It should point to the top-level directory of Gtk+ installation,
            that is the directory containing <filename>bin</filename>,
            <filename>lib</filename>, <filename>share</filename>, etc.
            subdirectories.  We will refer to its value as to
            <envar>$(GTK_TOP)</envar> below.
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><envar>GTKGLEXT_TOP</envar></term>
          <listitem>
            It should point to the corresponding top-level directory of
            GtkGLExt installation.  This differs from <envar>$(GTK_TOP)</envar>
            only if you do not use GladeWin32 and have installed
            GtkGLExt separately.
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><envar>LIBXML2_TOP</envar></term>
          <listitem>
            It should point to the corresponding top-level directory of
            LibXML2 installation.  This differs from <envar>$(GTK_TOP)</envar>
            only if you do not use GladeWin32 and have installed
            LibXML2 separately.
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><envar>MSC_TOP</envar></term>
          <listitem>
            It should point to the top-level directory of MSVC installation.
          </listitem>
        </varlistentry>
      </variablelist>
      <para>
        Run a shell (command line, MS-DOS prompt), switch to the source
        directory and run <command>vcvars32.bat</command> there.
        This batch file is provided by MSVC and sets certain environment
        variables the command-line compiler and linker require, it also
        makes them directly executable by setting <envar>PATH</envar>.  Note
        <command>vcvars32.bat</command> may not be in <envar>PATH</envar>
        itself but it should be easy to locate.
      </para>
    </sect3>
    <sect3>
      <title>Compilation</title>
      <para>
        Run
        <informalexample>
          <userinput>nmake -f makefile.msc</userinput>
        </informalexample>
        to compile Gwyddion and
        <informalexample>
          <userinput>nmake -f makefile.msc install</userinput>
        </informalexample>
        to install it into a staging area, namely subdirectory
        <filename>inst</filename> (created by this command).  If something
        goes wrong with the second step and you wish to start it again,
        remove directory <filename>inst</filename> and file
        <filename>inst.stamp</filename> first for a clean start.
      </para>
    </sect3>
    <sect3>
      <title>Installation</title>
      <para>
        The layout of the staging area in <filename>inst</filename> exactly
        the same as of the final installation.  Therefore you can also run
        <application>Gwyddion</application> directly from it
        (<filename>gwyddion.exe</filename> is found directly in
        <filename>inst</filename>).  Except if you have never run
        <application>Gwyddion</application> before, it will not find the
        run-time Gtk+ libraries (DLLs) it needs.  Run
        <command>regedit</command>, create in
        <informalexample>
          <literal>HKEY_LOCAL_MACHINE→Software→Microsoft→Windows→Current Version→App Paths→Gwyddion.exe</literal>
        </informalexample>
        a string key <literal>Path</literal> and put
        <literal>$(GTK_TOP)\lib;$(GTK_TOP)\bin</literal> there (here again
        <envar>$(GTK_TOP)</envar> is to be replaced with the corresponding
        directory set in <filename>make.msc</filename>, do not put
        <quote><literal>$(GTK_TOP)</literal></quote> there literally).  If you
        have separate GtkGLExt and/or LibXML2, add also their
        <filename>lib</filename> and <filename>bin</filename> directories,
        separated by semicolons.  If you cannot edit global registry under
        <literal>HKEY_LOCAL_MACHINE</literal>, set the path under
        <literal>HKEY_CURRENT_USER</literal> for the current user only.
      </para>
      <para>
        Now you can either run <application>Gwyddion</application> from
        <filename>inst</filename> or copy the directory elsewhere, possibly
        renaming it.
      </para>
    </sect3>
    <sect3>
      <title>Executable Installers</title>
      <para>
        To create an executable installer you need
        <ulink url="http://www.jrsoftware.org/isinfo.php">Inno Setup</ulink>,
        version 4 or newer.  Open <filename>inst/gwyddion.iss</filename> and
        build the installer, it will create
        <filename>Gwyddion-2.1.exe</filename> (with 2.1 replaced with the
        actual version number), again in <filename>inst</filename>.  You can
        repeat this procedure with <filename>inst/gwyddion-devel.iss</filename>
        to obtain <filename>Gwyddion-Development-2.1.exe</filename>, should
        you ever need it.
      </para>
    </sect3>
  </sect2>

  <sect2 id="installation-devel">
    <title>Subversion Checkout, Development</title>
    <para>
      <application>Gwyddion</application> uses
      <ulink url="http://subversion.tigris.org/">Subversion</ulink>
      version control system for source code revision management.  The
      organization of the repository is described
      <ulink url="http://gwyddion.net/resources.php#subversion">on project
        web pages</ulink>.  For example the current head revision of
      the program itself can be checked out with
      <informalexample>
        <userinput>svn checkout https://gwyddion.svn.sourceforge.net/svnroot/gwyddion/trunk/gwyddion</userinput>
      </informalexample>
    </para>
    <para>
      The reposition does not contain any generated files, no matter how
      exotic tools may be necessary to generate them.  Therefore additional
      packages are required and there are also certain platform limitations.
      The additional tools and packages required for development are the same
      as for compilation from <application>Subversion</application> checkout.
      More precisely, one needs all the tools to build from a fresh checkout,
      while development may require only a subset of them or even none,
      depending on the type and extent of the changes.
    </para>
    <itemizedlist>
      <title>Additional development build dependencies</title>
      <listitem>
        <ulink url="http://www.gnu.org/software/autoconf/">GNU autoconf</ulink> ≥ 2.59
      </listitem>
      <listitem>
        <ulink url="http://www.gnu.org/software/automake/">GNU automake</ulink> ≥ 1.7
      </listitem>
      <listitem>
        <ulink url="http://www.gnu.org/software/libtool/">GNU libtool</ulink> ≥ 1.4
      </listitem>
      <listitem>
        <ulink url="http://www.python.org/">Python</ulink> ≥ 2.2
      </listitem>
      <listitem>
        <ulink url="http://www.perl.org/">Perl5</ulink>
      </listitem>
      <listitem>
        <ulink url="http://www.gtk.org/gtk-doc/">gtk-doc</ulink> ≥ 1.4
      </listitem>
      <listitem>
        <ulink url="http://www.gnu.org/software/gettext/">GNU gettext</ulink> ≥ 0.12, including development stuff
      </listitem>
      <listitem>
        probably GNU versions of most tools: the compiler, binutils, …
      </listitem>
    </itemizedlist>
    <sect3>
      <title>Linux/Unix</title>
      <para>
        After a fresh checkout, run <userinput>./autogen.sh</userinput> with
        any arguments you would give to <command>configure</command>.
        Note it automatically adds <option>--enable-maintainer-mode</option>.
        This option enables <command>make</command> rules for creation and
        updates of files that are distributed in the source code tarball (and
        thus they are not generated during normal compilation).  Generally, you
        should always use this <command>configure</command> option when you
        intend to change the program in a non-trivial way.
      </para>
      <para>
        <command>autogen.sh</command> can fail even if you have sufficient
        versions of autotools installed.  Some operating system do not install
        general <command>autoconf</command> or <command>automake</command>
        commands, only versioned commands as <command>autoconf259</command>
        or <command>automake19</command>.  This makes particularly hard to
        find for example <quote><command>automake</command> 1.9 or
          newer</quote> and therefore <command>autogen.sh</command> does not
        attempt it at all.  You can either create unversioned symbolic links to
        the versioned commands or run <command>autogen.sh</command> as
        follows:
        <informalexample>
          <userinput>
            AUTOCONF=autoconf259 AUTOHEADER=autoheader259 ./autogen.sh
          </userinput>
        </informalexample>
        You may need to set the following variables:
        <envar>ACLOCAL</envar>,
        <envar>AUTOCONF</envar>,
        <envar>AUTOHEADER</envar>,
        <envar>AUTOMAKE</envar>,
        <envar>LIBTOOLIZE</envar>.
        In addition, some operating systems may install
        <command>configure</command> macros in a place
        <command>aclocal</command> does not find them by default.  This can
        be fixed by setting variable <envar>ACLOCAL_FLAGS</envar> to give
        <command>aclocal</command> additional search paths:
        <informalexample>
          <userinput>
            ACLOCAL_FLAGS="-I /usr/local/share/aclocal" ./autogen.sh
          </userinput>
        </informalexample>
      </para>
      <para>
        If <command>autogen.sh</command> passes you can compile the program
        as usual.  However, a few things remain to generate.
      </para>
      <para>
        Developer documentation is built with <userinput>make docs</userinput>.
        This has to be done explicitly, documentation is never (re)built
        automatically, option <option>--enable-gtk-doc</option> of
        <command>configure</command> only makes the <literal>docs</literal>
        target available (this option is on by default, therefore
        <literal>docs</literal> is made available when
        <application>gtk-doc</application> is detected).
      </para>
      <para>
        MSVC files are built with <userinput>./utils/update-msvc.py</userinput>
        which must be run from the top-level source directory (if you have
        Python interpreter installed elsewhere than in
        <filename>/usr/bin</filename>, run it as
        <userinput>python ./utils/update-msvc.py</userinput>).  This tool
        takes care of keeping MSVC makefiles and other files up to date with
        Unix files that are taken as the primary source.  More precisely
        <command>update-msvc.py</command> reads
        <itemizedlist>
          <listitem>
            lists of source and header files, modules, libraries and data files
            from <filename>Makefile.am</filename>
          </listitem>
          <listitem>
            compiled libraries in <filename>.libs</filename> directories
          </listitem>
          <listitem>
            <command>gcc</command>-generated compilation dependencies in
            <filename>.deps</filename> directories
          </listitem>
          <listitem>
            template files to fill, these have extension
            <filename>.gwt</filename>, for example
            <filename>makefile.msc.gwt</filename> is a template for
            <filename>makefile.msc</filename>
          </listitem>
        </itemizedlist>
        and it writes
        <itemizedlist>
          <listitem>
            filled template files (namely makefiles)
          </listitem>
          <listitem>
            <filename>.def</filename> files with lists of symbols to export
            from individual libraries
          </listitem>
        </itemizedlist>
        Evidently, it is necessary to perform a full project build first (with
        all optional features enabled) to generate these files properly.
      </para>
      <para>
        One can think of <command>update-msvc.py</command> as a simple custom
        automake, because its basic task is to generate makefiles
        from <filename>Makefile.am</filename>.
      </para>
    </sect3>
    <sect3>
      <title>MS Windows</title>
      <para>
        As one can see from the previous section, a direct build from a
        <application>Subversion</application> checkout is not possible on MS
        Windows due to the inability to generate certain files there.
        Development is possible, although certain changes, namely additions
        of new files and refactorizations, require manual synchronization of
        files that could be updated automatically on a Unix-like system.
      </para>
      <para>
        Fortunately plenty of free Unix-like systems is available, namely
        various GNU/Linux distributions.  In the most desperate case one can
        use such a system for the checkout, build all necessary files, make
        a tarball and transfer it to MS Windows.  This is equivalent to the
        use of nightly tarballs except that these tarballs can be generated
        any time.
      </para>
      <para>
        However, it is also possible – and much more convenient – to build
        on MS Windows in the very same directory as on a GNU/Linux system.
        It is only necessary to share the build directory (typically in the
        home directory) with the Windows system using Samba.  The GNU/Linux
        system can run either on a different physical computer or it can run
        on a virtual machine on the same computer as the host Windows system,
        for example in WMware player.  (This setup can be also reversed by
        running MS Windows on a virtual machine but this is not the point of
        this section.)
      </para>
      <para>
        When one runs builds for several operating systems from one
        directory, certain care has to be taken to avoid confusion due to
        the use of files corresponding to a different operating system.
        Fortunately, the only files that overlap between the Unix and MS
        Windows build systems are configuration headers
        <filename>config.h</filename> and <filename>gwyconfig.h</filename>.  To
        update them after switch to MS Windows, just delete them, they will be
        re-created as a part of the build.  To update them after switch to
        GNU/Linux, run <userinput>./config.status</userinput>.
      </para>
    </sect3>
  </sect2>
</chapter>
