<?xml version='1.0' encoding='utf-8'?>
<!-- @(#) $Id$ -->
<!DOCTYPE book PUBLIC '-//OASIS//DTD DocBook XML V4.2//EN'
               'http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd'>
<chapter id="installation">
  <title>Installation</title>
  <para>
    <application>Gwyddion</application> source code and binaries can be
    downloaded from the
    <ulink url="http://gwyddion.net/download.php">download</ulink>
    web page of the project, or alternatively from raw
    <ulink url="http://sourceforge.net/project/showfiles.php?group_id=121723">SourceForge.net download page</ulink>.
    The instalation sligtly varies depending on the operating system used.
    However, basically it consist of two steps:
    <itemizedlist>
      <listitem>
        <para>
          Installing the <ulink url="http://www.gtk.org/">Gtk+</ulink> widget
          toolkit (if not already done).
        </para>
      </listitem>
      <listitem>
        <para>Installing Gwyddion</para>
      </listitem>
    </itemizedlist>
    The first step is necessary at first <application>Gwyddion</application>
    installation on operating systems that do not come with Gtk+.
    The version of Gtk+ necessary for your system (and where to obtain it) is
    desribed in the next sections.
  </para>
  <para>
    Generally, one needs Gtk+ libraries (runtime package) for running
    <application>Gwyddion</application>
    and a Gtk+ development package for <application>Gwyddion</application>
    compilation from source code and developement.
  </para>
  <para>
    We recommend to download
    <ulink url="http://gwyddion.net/download.php#sample-files">sample
      <application>Gwyddion</application> files</ulink>
    too. They are in native <application>Gwyddion</application> format
    and represent typical AFM data.
  </para>

  <section id="installation-unix">
    <title>Linux/Unix packages</title>
    <para>
      Some Linux and Unix systems may provide binary packages of Gwyddion.
      The <ulink url="http://gwyddion.net/download.php">download</ulink> page
      of the project also tracks known packages and packaging efforts.
      If your operating system provides such a package and it is recent enough,
      install it using the standard means of the operating system.  Otherwise
      proceed with compilation from source code.
    </para>
  </section>

  <section id="installation-ms-windows">
    <title>MS Windows packages</title>
    <para>
      If you never had any Gtk+ based application on your system (for example
      bitmap editor
      <ulink url="http://www.gimp.org/"><application>GIMP</application></ulink>)
      you will need to install Gtk+ runtime enviroment on your computer prior
      to <application>Gwyddion</application> installation.
      Gtk+ is a library designed for portable creating of graphical user
      interface (windows, buttons, etc.) that is available on many operating
      systems. Therefore applications using Gtk+ can be ported to various
      operating systems, including Microsoft Windows.
    </para>
    <para>
      Note that there are several Gtk+ packages for MS Windows operating
      systems available on the internet. Some of them include all required
      components (like GtkGLExt and LibXML2), some do not. We recommend
      <ulink url="http://gladewin32.sourceforge.net/">GladeWin32</ulink>
      packages that are known to contain all required components and we
      build Gwyddion MS Windows executables with them.
    </para>
    <para>
      For installation of <application>Gwyddion</application> please follow
      these steps:
    </para>
    <itemizedlist>
      <listitem>
        Download the Gtk+ runtime enviroment installer from
        <ulink url="http://gladewin32.sourceforge.net/">Gladewin32</ulink>,
        version 2.8 or higher, and install it.
      </listitem>
      <listitem>
        Download <ulink url="http://gwyddion.net/download.php#stable-windows"><application>Gwyddion</application> installer</ulink> and install
        <application>Gwyddion</application>.
      </listitem>
    </itemizedlist>
  </section>

  <section id="installation-dependencies">
    <title>Build dependencies</title>
    <para>
      The following table lists packages required to build
      <application>Gwyddion</application> from source code.  It does not
      include common compilation prerequisites like the compiler or
      <command>make</command>.  Operating system specifics are described
      in following sections dedicated to building on particular operating
      systems.
    </para>
    <variablelist>
      <title>Build dependencies</title>
      <varlistentry>
        <term>
          <ulink url="http://www.gtk.org/">Gtk+</ulink>
          ≥ 2.6.0 (Unix),
          ≥ 2.8.0 (MS Windows)
        </term>
        <listitem>
          <para>
            <emphasis>Required.</emphasis>
          </para>
          <para>
            It is possible to build Gwyddion with Gtk+ 2.6 on MS Windows too,
            but it requires manual build system adjustments and it is not
            supported.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <ulink url="http://gtkglext.sourceforge.net/">GtkGLExt</ulink>
          ≥ 1.0
        </term>
        <listitem>
          <para>
            <emphasis>Optional.</emphasis>
          </para>
          <para>
            Enables OpenGL 3D data views.
          </para>
          <para>
            The MS Windows build system is set up to require GtkGLExt and
            manual adjustments are necessary to disable it there.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <ulink url="http://www.libtiff.org/">LibTIFF</ulink>
          ≥ 3.6.0
        </term>
        <listitem>
          <para>
            <emphasis>Optional.</emphasis>
          </para>
          <para>
            Enables import of TIFF-based data files, namely JPK and PSIA,
            also enables export to TIFF images.
          </para>
          <para>
            The MS Windows build system is set up to require LibTIFF and
            manual adjustments are necessary to disable it there.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <ulink url="http://xmlsoft.org/">LibXML2</ulink>
          ≥ 2.<varname>x</varname>
        </term>
        <listitem>
          <para>
            <emphasis>Optional.</emphasis>
          </para>
          <para>
            Enables import of SPML files.
          </para>
          <para>
            The MS Windows build system is set up to require LibXML2 and
            manual adjustments are necessary to disable it there.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <ulink url="http://www.fftw.org/">FFTW3</ulink>
          ≥ 3.0 (32bit),
          ≥ 3.1 (64bit),
          Unix only
        </term>
        <listitem>
          <para>
            <emphasis>Optional.</emphasis>
          </para>
          <para>
            Speeds up various integral transforms, power spectrum and
            correlation operations.  Also enables to process data fields of
            much more sizes without rescaling.
          </para>
          <para>
            Building with FFTW3 enabled is currently unsupported on MS Windows,
            although it is probably possible with some effort and manual
            adjustments.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <ulink url="http://www.jrsoftware.org/isinfo.php">Inno Setup</ulink>
          ≥ 4, MS Windows only
        </term>
        <listitem>
          <para>
            <emphasis>Optional.</emphasis>
          </para>
          <para>
            Enables creation of executable installers on MS Windows.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section id="installation-unix-source">
    <title>Linux/Unix from source tarball</title>
    <para>
      <application>Gwyddion</application> Unix build system is based on
      GNU autotools
      (<ulink url="http://www.gnu.org/software/autoconf/">autoconf</ulink>,
      <ulink url="http://www.gnu.org/software/automake/">automake</ulink>,
      <ulink url="http://www.gnu.org/software/libtool/">libtool</ulink>), like
      most of current Unix Free and Open Source Software.  If you have ever
      compiled software from source code, you very likely met autotools and
      already know how to proceed.  This section shall describe the
      compilation procedure in enough detail even for the uninitiated though.
      File <ulink url="http://svn.sourceforge.net/viewvc/*checkout*/gwyddion/trunk/gwyddion/INSTALL"><filename>INSTALL</filename></ulink>
      in the top-level directory of the
      source tarball contains generic GNU autotools installation instructions.
      <application>Gwyddion</application> specific information can be found in
      file <ulink url="http://svn.sourceforge.net/viewvc/*checkout*/gwyddion/trunk/gwyddion/INSTALL.gwyddion"><filename>INSTALL.gwyddion</filename></ulink>.
      Since this file comes with a particular version of
      <application>Gwyddion</application> it may contain more concrete or
      up-to-date information and you should follow it instead of this general
      guide if they contradict.
    </para>
    <section>
      <title>Quick instructions</title>
      <para>
        If you know the drill:
      </para>
      <informalexample>
        <literallayout><userinput>tar -jxvf gwyddion-2.1.tar.bz2
cd gwyddion-2.1
./configure
make install</userinput></literallayout>
      </informalexample>
    </section>
    <section>
      <title>Source unpacking</title>
      <para>
        Unpack the source code tarball with
        <informalexample>
          <userinput>tar -jxvf gwyddion-2.1.tar.bz2</userinput>
        </informalexample>
        or
        <informalexample>
          <userinput>tar -zxvf gwyddion-2.1.tar.gz</userinput>
        </informalexample>
        replacing 2.1 with the actual version number. It will create directory
        <filename>gwyddion-2.1</filename> (again, with the actual version
        number in place of 2.1), <command>cd</command> to this directory.
      </para>
    </section>
    <section>
      <title>Configuration</title>
      <para>
        Run
        <informalexample>
          <userinput>./configure</userinput>
        </informalexample>
        to configure <application>Gwyddion</application>.
      </para>
      <para>
        The <command>configure</command> shell script attempts to guess correct
        values for various system-dependent variables used during compilation.
        It uses those values to create a <filename>Makefile</filename> in each
        directory of the package, a couple of header <filename>.h</filename>
        files containing system-dependent definitions and a few other
        system-dependent auxiliary files.
        Finally, it creates a shell script <command>config.status</command> that
        you can run in the future to recreate the current configuration, and
        a file <filename>config.log</filename>.  This file contains the details
        of the detection process and it is helpful to include it in compilation
        related bug reports.  The end of <command>configure</command> output
        also contains a brief summary of enabled and disabled optional
        features.
      </para>
      <para>
        If <command>configure</command> reports missing required packages,
        install these packages and re-run it.  The same applies to the case
        when <command>configure</command> passes but you find you have not
        installed an optional package you want to compile
        <application>Gwyddion</application> with.  It is possible a package
        is not found or it is misdetected even if you have installed it, namely
        when it is installed into a non-standard directory. In this case it
        is necessary to adjust certain environment variables to make
        <command>configure</command> able to find the packages:
        <variablelist>
          <varlistentry>
            <term><envar>PKG_CONFIG_PATH</envar></term>
            <listitem>
              <para>
                Most packages come with so called
                <ulink url="http://pkgconfig.freedesktop.org/wiki/">pkg-config</ulink>
                files (<filename>.pc</filename>) that describe how programs
                should compile and link with them.  <command>configure</command>
                uses information from these files, therefore
                <envar>PKG_CONFIG_PATH</envar> must be set to list all
                non-standard directories with relevant pkg-config files.
                To add for instance a Gtk+ installation in
                <filename>/opt/gnome</filename> and a FFTW3 installation in
                <filename>$HOME/opt/fftw3</filename> one can do
                <userinput>PKG_CONFIG_PATH=/opt/gnome/lib/pkgconfig:$HOME/opt/fftw3/lib/pkgconfig; export PKG_CONFIG_PATH</userinput>
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <envar>PATH</envar>,
              <envar>LD_LIBRARY_PATH</envar>
            </term>
            <listitem>
              <para>
                It may be necessary to adjust these variables to include
                nonstandard directories with executables and libraries of
                relevant packages, respectively.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <envar>CFLAGS</envar>,
              <envar>LDFLAGS</envar>
            </term>
            <listitem>
              <para>
                It may be necessary to adjust these variables to include
                nonstandard directories with header files and libraries of
                packages that do not come with pkg-config files, for example
                for libTIFF in <filename>/usr/local</filename> one can do
                <userinput>CFLAGS=-I/usr/local/include; export CFLAGS</userinput>
                and
                <userinput>LDFLAGS=-I/usr/local/lib; export LDFLAGS</userinput>.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </para>
      <para>
        The directory <application>Gwyddion</application> will install to and
        various optional features can be enabled/disabled
        with <command>configure</command> command line
        options. To obtain the complete list of these options, run
        <informalexample>
          <userinput>./configure --help</userinput>
        </informalexample>
        Option <option>--prefix=…</option> sets the base installation
        directory. The program will be installed into its
        <filename>bin</filename>, <filename>lib</filename>,
        <filename>share</filename>, etc. subdirectories (they will be created
        if they do not exist). More detailed control is possible with options
        specifying particular subdirectories as <option>--bindir</option>,
        <option>--libdir</option>.
      </para>
      <para>
        Optional features can be enabled/disabled with options as
        <option>--with-fftw3</option>/<option>--without-fftw3</option>
        (for FFTW3) and
        <option>--with-tiff</option>/<option>--without-tiff</option>
        (for LibTIFF).
        By default all optional features are enabled if their prerequisites
        are found.
      </para>
    </section>
    <section>
      <title>Compilation</title>
      <para>
        Run
        <informalexample>
          <userinput>make</userinput>
        </informalexample>
        and wait until <application>Gwyddion</application> is compiled.  If
        <command>configure</command> finished without errors the compilation
        should pass too.
      </para>
      <para>
        If you need to do unusual things to compile the package, please try to
        figure out how <command>configure</command> could check whether to do
        them, and mail diffs or instructions to the address given in the
        <filename>README</filename> so they can be considered for the next
        release.
      </para>
    </section>
    <section>
      <title>Installation</title>
      <para>
        Run
        <informalexample>
          <userinput>make install</userinput>
        </informalexample>
        to install <application>Gwyddion</application> to the target directory.
        If you install <application>Gwyddion</application> to a system
        directory you have to become root for running this command.
        Note <application>Gwyddion</application> has to be installed to be run,
        it is not possible to run it uninstalled.
      </para>
      <para>
        To install <application>Gwyddion</application> to a staging area,
        for example for packaging, set <command>make</command>
        <varname>DESTDIR</varname> variable to a prefix that will be
        prepended to all target directories:
        <informalexample>
          <userinput>make install DESTDIR=/var/tmp/gwyddion-buildroot</userinput>
        </informalexample>
        Do <emphasis>not</emphasis> override individual directory variables as
        <varname>bindir</varname>, <varname>libdir</varname>.
      </para>
    </section>
    <section>
      <title>Deinstallation</title>
      <para>
        Run
        <informalexample>
          <userinput>make uninstall</userinput>
        </informalexample>
        in the directory you previously compiled
        <application>Gwyddion</application> to remove it.  If you have lost
        the source directory meanwhile you can try to unpack, configure and
        build it exactly as before and then issue
        <userinput>make uninstall</userinput>, although this relies on your
        ability to reproduce the build process.
      </para>
    </section>
    <section>
      <title>RPM packages</title>
      <para>
        It is possible to build RPM packages on RPM-based GNU/Linux
        distributions directly from source code tarballs with
        <informalexample>
          <userinput>rpmbuild -tb gwyddion-2.1.tar.bz2</userinput>
        </informalexample>
        where 2.1 is to be replaced with the actual version as above.
      </para>
    </section>
  </section>

  <section id="installation-linux-devel">
    <title>Linux/FreeBSD for developers</title>
    <para>
      The installation for developers on Linux is exactly same as the usual
      installation from source tarball. If you installed
      <application>Gwyddion</application> in this way you can directly edit
      anything and recompile <application>Gwyddion</application> when you want.
      Do not forget to install <application>Gwyddion</application> after each
      compile to get the modules and plugins apparatus working. Good luck.
    </para>
    <para>
      Some more instructions for developers (not operating system dependent) are in the chapter
      <link linkend="development">Developing Gwyddion</link>.
    </para>
  </section>
  <section id="installation-ms-windows-devel">
    <title>Windows version for developers</title>
    <para>
      If you want to become developer, you can use Microsoft Visual C++ compiler to compile the application
      and subsequently to develop your code.
      Use source tarball in that case
      and compile application using <command>nmake</command> command. In this case you will need Gtk development enviromet installed on your system.
      You will probably need to change paths to Gtk+ and MSVC toplevel directories in the make.msc file.
      The default paths are (see first few lines of make.msc):
      <programlisting>
        # XXX: set following to your Gtk+-Development and MSVC paths
        GTK_TOP = C:\Gtk
        MSC_TOP = C:\Program Files\Microsoft Visual Studio\VC98
      </programlisting>
    </para>
    <para>
      Some more instructions for developers (not operating system dependent) are in the chapter
      <link linkend="development">Developing Gwyddion</link>.
    </para>
  </section>
</chapter>
