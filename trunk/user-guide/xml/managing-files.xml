<?xml version='1.0' encoding='utf-8'?>
<!-- @(#) $Id$ -->
<!DOCTYPE book PUBLIC '-//OASIS//DTD DocBook XML V4.2//EN'
               'http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd'>
<section id="managing-files">
  <title>Managing Files</title>
  <para>
    Gwyddion uses its internal data format (.gwy) to store data. The main
    advantage of this format is fact, that it stores complete state of
    processing of concrete data, including selections and other tool and
    processing function settings. It can also store more channels and graphs
    that have any relation in one single file. Therefore we recommned to use
    this format for saving processed files. If you open our example files,
    you can see that each one is plotted in different false color palette.
    This is direct consequence of the fact that Gwyddion stores full state of
    the data window including its palette.
  </para>
  <para>
    Other data file formats can be handled with appropriate loading and
    saving modules or plugins. Beside several file formats used in
    microscopy, graphical file types (JPEG, PNG, PPM, TIFF, BMP) and raw
    binary and ASCII data can be imported too.
  </para>
  <para>
    We expect that more file IO modules and plugins will be written,
    depending on demands and file format specifications available. We
    encourage you to write IO module or plugin for your instrument-specific
    data file format, or, at least, to send us your format specifications.
  </para>
  <table frame='none'>
    <title>Supported file formats</title>
    <tgroup cols='2'>
      <colspec align='left'/>
      <colspec align='left'/>
      <colspec align='left'/>
      <colspec align='left'/>
      <colspec align='left'/>
      <thead>
        <row>
          <entry>File Format</entry>
          <entry>Extensions</entry>
          <entry>Supported By</entry>
          <entry>Read</entry>
          <entry>Write</entry>
        </row>
      </thead>
      <tbody>
        <row>
          <entry>APE Research</entry>
          <entry>.dat</entry>
          <entry>apefile module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>ASCII data (raw)</entry>
          <entry></entry>
          <entry>rawfile, asciiexport modules</entry>
          <entry>Yes</entry>
          <entry>
            Yes
            <footnote id='file-format-fn1'>
              <para>
                Only a simple data-matrix format si currently supported.
              </para>
            </footnote>
          </entry>
        </row>
        <row>
          <entry>Assing AFM</entry>
          <entry>.afm</entry>
          <entry>assing-afm module</entry>
          <entry>Yes</entry>
          <entry>Yes</entry>
        </row>
        <row>
          <entry>Image Metrology BCR, BCRF</entry>
          <entry>.bcr, .bcrf</entry>
          <entry>bcrfile module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>Binary data (raw)</entry>
          <entry></entry>
          <entry>rawfile module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>Burleigh v2.1</entry>
          <entry>.img</entry>
          <entry>burleigh module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>Createc</entry>
          <entry>.dat</entry>
          <entry>createc module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>DME Rasterscope</entry>
          <entry>.img</entry>
          <entry>dmefile module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>ECS</entry>
          <entry>.img</entry>
          <entry>ecsfile module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>FRT MicroProf</entry>
          <entry>.txt</entry>
          <entry>microprof module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>Gwyddion native</entry>
          <entry>.gwy</entry>
          <entry>gwyfile module</entry>
          <entry>Yes</entry>
          <entry>Yes</entry>
        </row>
        <row>
          <entry>PSI HDF4</entry>
          <entry>.hdf</entry>
          <entry>hdf4file module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>Hitachi AFM</entry>
          <entry>.afm</entry>
          <entry>hitachi-afm module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>Zygo binary MetroPro</entry>
          <entry>.dat</entry>
          <entry>metropro module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>JEOL SPM</entry>
          <entry>.tif</entry>
          <entry>jeol module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>JPK Instruments</entry>
          <entry>.jpk</entry>
          <entry>jpkscan module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>Molecular Imaging MI</entry>
          <entry>.mi</entry>
          <entry>mifile module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>Molecular Imaging STP</entry>
          <entry>.stp</entry>
          <entry>stpfile module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>Nanonis</entry>
          <entry>.sxm</entry>
          <entry>nanonis module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>Nanoscope</entry>
          <entry></entry>
          <entry>nanoscope module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>Nanosurf</entry>
          <entry>.ezd, .nid</entry>
          <entry>ezdfile module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>Nanotop</entry>
          <entry>.spm</entry>
          <entry>nanotop module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>GXSM netCDF</entry>
          <entry>.nc</entry>
          <entry>netcdf module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>NT-MDT</entry>
          <entry>.mdt</entry>
          <entry>nt-mdt module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>Omicron Scala</entry>
          <entry>.par + data</entry>
          <entry>omicron module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>Pacific Nanotechnology PNI</entry>
          <entry>.pni</entry>
          <entry>pnifile module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>Pixmap images</entry>
          <entry>
            .png, .jpeg, .ppm, .tga, .bmp
            <footnote>
              <para>
                And others, namely for import. The exact list depends on
                formats supported by libraries on a particular platform.
              </para>
            </footnote>
          </entry>
          <entry>pixmap module</entry>
          <entry>Yes</entry>
          <entry>
            Yes
            <footnote>
              <para>
                Alhough this is usually lossy. Export to pixmap graphics is
                intended for presentational purpose mainly.
              </para>
            </footnote>
          </entry>
        </row>
        <row>
          <entry>PSIA</entry>
          <entry>.tiff</entry>
          <entry>psia module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>RHK Technology SPM32</entry>
          <entry>.sm2</entry>
          <entry>rhk-spm32 module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>RHK Technology SM3</entry>
          <entry>.sm3</entry>
          <entry>rhk-sm3 module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>Seiko</entry>
          <entry>.xqd</entry>
          <entry>seiko module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>Scanning Probe Microscopy Markup Langugae</entry>
          <entry>.xml</entry>
          <entry>spml module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>Surfstand Surface Data File</entry>
          <entry>.sdf</entry>
          <entry>sdfile module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>CSM Surf</entry>
          <entry>.sur</entry>
          <entry>surffile module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>Surface Imaging Systems</entry>
          <entry>.sis</entry>
          <entry>sis module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>Veeco Instruments</entry>
          <entry>.zfr, .tfr, .zfp, â€¦</entry>
          <entry>spmlab module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>STMPRG</entry>
          <entry></entry>
          <entry>stmprg module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>Unisoku</entry>
          <entry>.hdrÂ +Â .dat</entry>
          <entry>unisoku module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>WITec</entry>
          <entry>.wit</entry>
          <entry>witfile module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>WSxM (Nanotec)</entry>
          <entry>.tom, .stp</entry>
          <entry>wsxmfile module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
      </tbody>
    </tgroup>
  </table>
  <section>
    <title>File Loading</title>
    <para>
      By default, Gwyddion detects the file format automatically based on
      file contents (i.e. file names and extensions are irrelevant).  This
      usually works well and you will hopefully never need to change it.
      Please see <link linkend="raw-file-import">Raw Data File Import</link>
      for details of import of data from unsupported formats and from
      <link linkend="pixmap-file-import">pixmap images</link>.
    </para>
    <para>
      If the automatic detection fails it is possible to enforce an attempt
      to load the file as a particular format by expanding the <guilabel>File
        type</guilabel> selector and choosing a file type.  However, if the
      file format is not detected automatically it is very unlikely the file
      can be loaded.
    </para>
    <para>
      By enabling <guilabel>Show only loadable files of selected
        type</guilabel> the file list can be limited only to the selected
      type.  The file type label then indicates the filtering by appending
      <guilabel>filtered</guilabel> to the end.  In the case of
      <guilabel>Automatically detected</guilabel> file type this means
      the list to files is limited to those Gwyddion thinks it can load.
      This can be very convenient, on the other hand it can slow down listing
      of directories with many files.
    </para>
    <para>
      Once a file type is selected it remains selected even in subsequent
      file open dialog invocations.  If you seem to be suddenly unable to
      load a file, please check the file type is set to the corresponding
      type, or to <guilabel>Automatically detected</guilabel>.
    </para>
    <figure>
      <title>
        File open dialog with expanded file type options.
      </title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="file-open.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
  </section>
  <section>
    <title>File Saving</title>
    <para>
      Much of the previous section applies to file saving too.  One of the
      differences is the reliability of automatic file type determination.
      While loading can and does examine the file contents, saving depends
      on file name and extension.  Combined with the large number of
      different file types using the same extension as
      <filename>.img</filename>, <filename>.afm</filename> or
      <filename>.dat</filename> it gives raise to ambiguities.  Select the
      file type explicitly upon save if you are unsure.
    </para>
    <para>
      Since the only file type able to fully represent Gwyddion data
      structures is its native data format, saving to
      a <filename>.gwy</filename> file is the only actual saving.  Saving to
      other file formats essentially consists of exporting of a limited
      subset of the data, typically only the active channel (without masks
      and presentations).  Therefore it does <emphasis>not</emphasis>
      change the file name of the current file to the just saved file name.
    </para>
  </section>
</section>

