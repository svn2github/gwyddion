VERSION = @PACKAGE_VERSION@
BASENAME = @PACKAGE_TARNAME@
PACKAGE = @PACKAGE_SHORTNAME@
DISTNAME = $(BASENAME)-$(VERSION)
DISTDIR = $(abs_top_builddir)/$(DISTNAME)
LANGDISTDIR = $(DISTDIR)/$(LANGUAGE)
XHTMLDISTNAME = $(BASENAME)-xhtml-$(LANGUAGE)-$(VERSION)
PDFDISTNAME = $(BASENAME)-$(LANGUAGE)-$(VERSION).pdf

XHTML_ENABLE = @XHTML_ENABLE@
PDF_ENABLE = @PDF_ENABLE@
MAN_ENABLE = @MAN_ENABLE@
PNG_ENABLE = @PNG_ENABLE@
SVG_ENABLE = @SVG_ENABLE@

GMAKE = @GMAKE@
GSED = @GSED@
PYTHON = @PYTHON@
DBLATEX_CMD = @DBLATEX@ --input-format=xml --texinputs=$(abspath $(COMMON)) --fig-path=$(abspath images) --xslt="@XSLTPROC@" --debug
INKSCAPE_CMD = @INKSCAPE@ --without-gui --export-area-drawing
XML_EXTRACT = $(PYTHON) $(COMMON)/xml-extract.py
XML_UNFOLD = $(PYTHON) $(COMMON)/xmlunfold.py
RENDER = $(SHELL) $(COMMON)/render.sh

MAN_PAGES = gwyddion.1 gwyddion-thumbnailer.1

ALL_TARGETS = $(XHTML_ENABLE) $(PDF_ENABLE) $(MAN_ENABLE)

XML_FORMULAS := $(wildcard $(COMMON)/formulas/*.xml) $(wildcard formulas/*.xml)
FORMULA_SUPPORT := $(patsubst %,$(COMMON)/%,header.tex footer.tex defs.tex pngsize render.sh)

XML_SOURCES := $(wildcard xml/*.xml)
XML_SOURCES_ALL := $(XML_SOURCES) $(XML_FORMULAS)
MAIN_XML_SOURCE := xml/$(PACKAGE).xml
UNFOLDED_XML_SOURCE := $(PACKAGE).xml

IMAGES_EXTRA = PNG:images/stacked3.png
IMAGES := $(shell $(XML_EXTRACT) imageinfo $(XML_SOURCES_ALL)) $(IMAGES_EXTRA)

IMAGES_PNG := $(patsubst PNG:%,%,$(filter PNG:%,$(IMAGES)))
IMAGES_XHTML := $(IMAGES_PNG)
IMAGES_PDF := $(patsubst PDF:%,%,$(filter PDF:%,$(IMAGES)))
IMAGES_PNG_NONEQ := $(filter-out images/eq-%,$(IMAGES_PNG))
IMAGES_PNG_PDF := $(patsubst %.pdf,%.png,$(IMAGES_PDF))
IMAGES_DBLATEX := $(IMAGES_PDF) $(filter-out $(IMAGES_PNG_PDF),$(IMAGES_PNG_NONEQ))

##### Base ##################################################################
all: $(ALL_TARGETS)

# Since $(COMMON)/Makefile effectively *is* out Makefile pretend we depend on
# it physically.
Makefile: Makefile.in $(COMMON)/Makefile ../config.status
	cd .. && ./config.status $(LANGUAGE)/Makefile

$(COMMON)/Makefile: $(COMMON)/Makefile.in ../config.status
	cd .. && ./config.status common/Makefile

$(UNFOLDED_XML_SOURCE): $(XML_SOURCES_ALL)
	$(XML_UNFOLD) $(MAIN_XML_SOURCE) >$@

images.stamp:
	test -d images || mkdir images 2>/dev/null || test -d images
	touch images.stamp

$(PACKAGE).iss: $(COMMON)/$(PACKAGE).iss
	sed 's/@LANGUAGE@/$(LANGUAGE_LONG)/' <$< >$@

##### HTML ##################################################################
xhtml: xhtml.stamp

ifeq ($(XHTML_ENABLE),xhtml)
xhtml.stamp: $(UNFOLDED_XML_SOURCE) $(IMAGES_XHTML) $(COMMON)/xhtml.xsl
	rm -rf xhtml
	mkdir xhtml
	@XSLTPROC@ --stringparam base.dir xhtml/ $(COMMON)/xhtml.xsl $<
	$(GSED) -i -e 's#<html xmlns="[^"]*">#<html>#' xhtml/*.html
	@cp $(IMAGES_XHTML) xhtml/
	cp $(COMMON)/$(PACKAGE).css xhtml
	touch $@
endif

##### PDF ###################################################################
pdf: $(PACKAGE).pdf

ifeq ($(PDF_ENABLE),pdf)
$(PACKAGE).pdf: $(UNFOLDED_XML_SOURCE) $(IMAGES_DBLATEX) $(COMMON)/dblatex.xsl $(COMMON)/user-guide.sty
	rm -rf pdf
	mkdir pdf
	$(DBLATEX_CMD) --tmpdir=pdf --pdf --xsl-user=$(COMMON)/dblatex.xsl --output=$@ $<
endif

##### Various methods to get images ########################################
# From language-specific formulas
images/eq-%.png: formulas/eq-%.xml $(FORMULA_SUPPORT) images.stamp
	cd images && $(RENDER) "eq-$*" $(abspath $<)

# From common formulas
images/eq-%.png: $(COMMON)/formulas/eq-%.xml $(FORMULA_SUPPORT) images.stamp
	cd images && $(RENDER) "eq-$*" $(abspath $<)

# From SVG
ifeq ($(SVG_ENABLE),svg)
images/%.png: srcimages/%.svg images.stamp
	$(INKSCAPE_CMD) --export-dpi=150 --export-background=white \
	        --export-png="$@" --file="$<"

images/%.png: $(COMMON)/srcimages/%.svg images.stamp
	$(INKSCAPE_CMD) --export-dpi=150 --export-background=white \
	        --export-png="$@" --file="$<"

images/%.pdf: srcimages/%.svg images.stamp
	    $(INKSCAPE_CMD) --export-pdf="$@" --file="$<"

images/%.pdf: $(COMMON)/srcimages/%.svg images.stamp
	    $(INKSCAPE_CMD) --export-pdf="$@" --file="$<"
endif

# From language-specific images in the same format
images/%.png: srcimages/%.png images.stamp
	cp $< $@

# From common images in the same format
images/%.png: $(COMMON)/srcimages/%.png images.stamp
	cp $< $@

##### Manual pages #########################################################
man: $(MAN_PAGES)

ifeq ($(MAN_ENABLE),man)
%.1: xml/%.xml
	@XSLTPROC@ --xinclude $(COMMON)/man.xsl $<
endif

##### Administrative #######################################################
clean:
	-rm -rf xhtml pdf images
	-rm -f $(UNFOLDED_XML_SOURCE) $(PACKAGE).pdf $(MAN_PAGES) *~ */*~ *.stamp config.log $(PACKAGE).iss

distclean: clean
	-rm -rf Makefile

# Cannot be run standalone, fail early if $(DISTDIR) does not exist
dist:
	test -d $(DISTDIR)
	mkdir $(LANGDISTDIR) $(LANGDISTDIR)/formulas $(LANGDISTDIR)/srcimages $(LANGDISTDIR)/xml
	cp Makefile.in $(LANGDISTDIR)/
	cp xml/*.xml $(LANGDISTDIR)/xml/
	cp formulas/*.xml $(LANGDISTDIR)/formulas/
	cp srcimages/*.svg srcimages/*.png $(LANGDISTDIR)/srcimages/

dist-xhtml: xhtml $(PACKAGE).iss
	rm -rf $(XHTMLDISTNAME)
	mkdir $(XHTMLDISTNAME)
	chmod 755 $(XHTMLDISTNAME)
	cp xhtml/* $(PACKAGE).iss $(XHTMLDISTNAME)/
	chmod 644 $(XHTMLDISTNAME)/*
	tar -zcf $(XHTMLDISTNAME).tar.gz $(XHTMLDISTNAME)
	rm -rf $(XHTMLDISTNAME)

dist-pdf: pdf
	cp -f user-guide.pdf $(PDFDISTNAME)

version:
	d=`date --iso`; \
	$(GSED) -i 's/\<[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}\>/'"$$d/" $(MAIN_XML_SOURCE)

help:
	@echo "all          Compile User guide to all available formats ($(ALL_TARGETS))"
ifeq ($(XHTML_ENABLE),xhtml)
	@echo "xhtml        Compile User guide to XHTML"
else
	@echo "xhtml        Compile User guide to XHTML (not available)"
endif
ifeq ($(PDF_ENABLE),pdf)
	@echo "pdf          Compile User guide to PDF"
else
	@echo "pdf          Compile User guide to PDF (not available)"
endif
ifeq ($(MAN_ENABLE),man)
	@echo "man          Compile Unix manual pages for commands"
else
	@echo "man          Compile Unix manual pages for commands (not available)"
endif
	@echo "dist-xhtml   Create tarball with ready to read XHTML User guide"
	@echo "dist-pdf     Create nicely named User guide PDF"
	@echo "version      Update version number to current date"

.PHONY: \
	all help version clean distclean \
	dist dist-xhtml dist-pdf \
	xhtml pdf man

.PRECIOUS: Makefile

# vim: set ts=4 sw=4 noet :
