VERSION = @PACKAGE_VERSION@
BASENAME = @PACKAGE_TARNAME@
PACKAGE = @PACKAGE_SHORTNAME@
DISTNAME = $(BASENAME)-$(VERSION)

XHTML_ENABLE = @XHTML_ENABLE@
PDF_ENABLE = @PDF_ENABLE@
MAN_ENABLE = @MAN_ENABLE@
PNG_ENABLE = @PNG_ENABLE@
SVG_ENABLE = @SVG_ENABLE@

GMAKE = @GMAKE@
GSED = @GSED@
PYTHON = @PYTHON@
DBLATEX_CMD = @DBLATEX@ --input-format=xml --texinputs=$(abspath $(COMMON)) --fig-path=$(abspath images) --xslt="@XSLTPROC@" --debug
INKSCAPE_CMD = @INKSCAPE@ --without-gui --export-area-drawing
XML_EXTRACT = $(PYTHON) $(COMMON)/xml-extract.py
XML_UNFOLD = $(PYTHON) $(COMMON)/xmlunfold.py
RENDER = $(SHELL) $(COMMON)/render.sh

#IMAGES_SVG = \
#	$(COMMON)/images/boundary-length.svg \
#	$(COMMON)/images/gaussian-acf.svg \
#	$(COMMON)/images/gaussian-hhcf.svg \
#	$(COMMON)/images/gaussian-psdf.svg \
#	$(COMMON)/images/grain-bounding-dims.svg \
#	$(COMMON)/images/inclination.svg \
#	$(COMMON)/images/profile-interpolation.svg \
#	$(COMMON)/images/step-edge.svg \
#	$(COMMON)/images/surface-area-vertices.svg \
#	$(COMMON)/images/triangulation.svg \
#	$(COMMON)/images/unrotate-symmetries.svg \
#	$(COMMON)/images/volume-pixel-weights.svg \
#	$(COMMON)/images/wavelet-daubechies20.svg \
#	$(COMMON)/images/wavelet-daubechies4.svg \
#	$(COMMON)/images/wavelet-haar.svg \
#	$(COMMON)/images/windowing-win.svg \
#	$(COMMON)/images/windowing-fft.svg
#
#IMAGES_PNG_SOURCE = \
#	$(COMMON)/images/profile-interpolation-image.png \
#	$(COMMON)/images/triangulation-field.png \
#	$(COMMON)/images/triangulation-linear.png \
#	$(COMMON)/images/triangulation-round.png

MAN_PAGES = gwyddion.1 gwyddion-thumbnailer.1

ALL_TARGETS = $(XHTML_ENABLE) $(PDF_ENABLE) $(MAN_ENABLE)

CLEAN_DIRS = xhtml pdf images

XML_FORMULAS := $(wildcard $(COMMON)/formulas/*.xml) $(wildcard formulas/*.xml)
FORMULA_SUPPORT := $(patsubst %,$(COMMON)/%,header.tex footer.tex defs.tex pngsize render.sh)

XML_SOURCES := $(wildcard xml/*.xml)
XML_SOURCES_ALL := $(XML_SOURCES) $(XML_FORMULAS)
MAIN_XML_SOURCE := xml/$(PACKAGE).xml
UNFOLDED_XML_SOURCE := $(PACKAGE).xml

IMAGES_EXTRA = PNG:images/stacked3.png
IMAGES := $(shell $(XML_EXTRACT) imageinfo $(XML_SOURCES_ALL)) $(IMAGES_EXTRA)

IMAGES_PNG := $(patsubst PNG:%,%,$(filter PNG:%,$(IMAGES)))
IMAGES_XHTML := $(IMAGES_PNG)
IMAGES_PDF := $(patsubst PDF:%,%,$(filter PDF:%,$(IMAGES)))
IMAGES_PNG_NONEQ := $(filter-out images/eq-%,$(IMAGES_PNG))
IMAGES_PNG_PDF := $(patsubst %.pdf,%.png,$(IMAGES_PDF))
IMAGES_DBLATEX := $(IMAGES_PDF) $(filter-out $(IMAGES_PNG_PDF),$(IMAGES_PNG_NONEQ))

##### Base ##################################################################
all: $(ALL_TARGETS)

Makefile: Makefile.in ../config.status
	../config.status Makefile

images.stamp:
	test -d images || mkdir images 2>/dev/null || test -d images
	touch images.stamp

$(UNFOLDED_XML_SOURCE): $(XML_SOURCES_ALL)
	$(XML_UNFOLD) $(MAIN_XML_SOURCE) >$@

##### HTML ##################################################################
xhtml: xhtml.stamp

ifeq ($(XHTML_ENABLE),xhtml)
xhtml.stamp: $(UNFOLDED_XML_SOURCE) $(IMAGES_XHTML) $(COMMON)/xhtml.xsl
	@echo $(IMAGES_XHTML)
	rm -rf xhtml
	mkdir xhtml
	@XSLTPROC@ --stringparam base.dir xhtml/ $(COMMON)/xhtml.xsl $<
	$(GSED) -i -e 's#<html xmlns="[^"]*">#<html>#' xhtml/*.html
	@cp $(IMAGES_XHTML) xhtml/
	cp $(COMMON)/user-guide.css xhtml
	touch $@
endif

##### PDF ###################################################################
pdf: $(PACKAGE).pdf

ifeq ($(PDF_ENABLE),pdf)
$(PACKAGE).pdf: $(UNFOLDED_XML_SOURCE) $(IMAGES_DBLATEX) $(COMMON)/dblatex.xsl $(COMMON)/user-guide.sty
	rm -rf pdf
	mkdir pdf
	$(DBLATEX_CMD) --tmpdir=pdf --pdf --xsl-user=$(COMMON)/dblatex.xsl --output=$@ $<
endif

##### Various methods to get images ########################################
# From language-specific formulas
images/eq-%.png: formulas/eq-%.xml $(FORMULA_SUPPORT) images.stamp
	cd images && $(RENDER) "eq-$*" $(abspath $<)

# From common formulas
images/eq-%.png: $(COMMON)/formulas/eq-%.xml $(FORMULA_SUPPORT) images.stamp
	cd images && $(RENDER) "eq-$*" $(abspath $<)

# From SVG
ifeq ($(SVG_ENABLE),svg)
images/%.png: srcimages/%.svg images.stamp
	$(INKSCAPE_CMD) --export-dpi=150 --export-background=white \
	        --export-png="$@" --file="$<"

images/%.png: $(COMMON)/srcimages/%.svg images.stamp
	$(INKSCAPE_CMD) --export-dpi=150 --export-background=white \
	        --export-png="$@" --file="$<"

images/%.pdf: srcimages/%.svg images.stamp
	    $(INKSCAPE_CMD) --export-pdf="$@" --file="$<"

images/%.pdf: $(COMMON)/srcimages/%.svg images.stamp
	    $(INKSCAPE_CMD) --export-pdf="$@" --file="$<"
endif

# From language-specific images in the same format
images/%.png: srcimages/%.png images.stamp
	cp $< $@

# From common images in the same format
images/%.png: $(COMMON)/srcimages/%.png images.stamp
	cp $< $@

##### Manual pages #########################################################
man: $(MAN_PAGES)

ifeq ($(MAN_ENABLE),man)
%.1: xml/%.xml
	@XSLTPROC@ --xinclude $(COMMON)/man.xsl $<
endif

##### Adminisrative ########################################################
clean:
	-@rm -f $(IMAGES_BUILT)
	-rm -rf $(CLEAN_DIRS)
	-rm -f *~ */*~
	-rm -f $(UNFOLDED_XML_SOURCE) $(PACKAGE).pdf $(MAN_PAGES)

dist:
	mkdir $(DISTNAME) $(DISTNAME)/formulas $(DISTNAME)/images
	cp $(BUILD_FILES) $(XSL_STYLES) $(CSS_STYLES) $(TEX_STYLES) $(DISTNAME)
	cp $(IMAGES_DIST) $(DISTNAME)/images
	tar -zcf $(DISTNAME).tar.gz $(DISTNAME)
	rm -rf $(DISTNAME)

# FIXME: Distribute all langs
dist-xhtml: xhtml
	for x in $(LANGUAGES); do \
	    d=$(BASENAME)-xhtml-$$x-$(VERSION); \
	    rm -rf $$d; \
	    mkdir $$d; \
	    cp xhtml_$$x/* $$d; \
	    ll=`echo $$x | $(GSED) 's/en/English/;s/fr/French/;s/ru/Russian/'`; \
	    sed "s/@LANGUAGE@/$$ll/g" user-guide.iss >$$d/user-guide.iss; \
	    chmod 755 $$d; \
	    chmod 644 $$d/*; \
	    tar -zcf $$d.tar.gz $$d; \
	    rm -rf $$d; \
	done

dist-pdf: pdf
	for x in $(LANGUAGES); do \
	    cp -f user-guide-$$x.pdf $(BASENAME)-$$x-$(VERSION).pdf; \
	done

# FIXME: We need to figure out versioning of translations.
version:
	d=`date --iso`; \
	$(GSED) -i '/AC_INIT/s/[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}/'"$$d/" configure.ac; \
	$(GSED) -i 's/\(^ *Version\) [0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}/\1 '"$$d/" xml_en/user-guide.xml
	autoconf && ./configure

help:
	@echo "all          Compile User guide to all available formats ($(ALL_TARGETS))"
ifeq ($(XHTML_ENABLE),xhtml)
	@echo "xhtml        Compile User guide to XHTML"
else
	@echo "xhtml        Compile User guide to XHTML (not available)"
endif
ifeq ($(PDF_ENABLE),pdf)
	@echo "pdf          Compile User guide to PDF"
else
	@echo "pdf          Compile User guide to PDF (not available)"
endif
ifeq ($(MAN_ENABLE),man)
	@echo "man          Compile Unix manual pages for commands"
else
	@echo "man          Compile Unix manual pages for commands (not available)"
endif
	@echo "dist         Create tarball with DocBook sources"
	@echo "dist-xhtml   Create tarball with ready to read XHTML User guide"
ifeq ($(PNG_ENABLE),png)
	@echo "fixpngres    Build fixpngres tool"
else
	@echo "fixpngres    Build fixpngres tool (not available)"
endif
	@echo "version      Update version number to current date"

.PHONY: \
	all help version clean distclean \
	dist dist-xhtml dist-pdf \
	xhtml pdf man images

.PRECIOUS: Makefile

# vim: set ts=4 sw=4 noet :
