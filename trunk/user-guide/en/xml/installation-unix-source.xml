<?xml version='1.0' encoding='utf-8'?>
<!-- @(#) $Id$ -->
<!DOCTYPE book PUBLIC '-//OASIS//DTD DocBook XML V4.5//EN'
               'http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd'>
<sect1 id='installation-unix-source'>
  <title>Compilation on Linux/Unix</title>
  <para>
    <application>Gwyddion</application> Unix build system is based on
    GNU autotools
    (<ulink url='http://www.gnu.org/software/autoconf/'>autoconf</ulink>,
    <ulink url='http://www.gnu.org/software/automake/'>automake</ulink>,
    <ulink url='http://www.gnu.org/software/libtool/'>libtool</ulink>), like
    most of current Unix Free and Open Source Software.  If you have ever
    compiled software from source code, you very likely met autotools and
    already know how to proceed.  This section shall describe the
    compilation procedure in enough detail even for the uninitiated though.
    File <ulink url='https://sourceforge.net/p/gwyddion/code/HEAD/tree/trunk/gwyddion/INSTALL?force=True'><filename>INSTALL</filename></ulink>
    in the top-level directory of the
    source tarball contains generic GNU autotools installation instructions.
  </para>
  <sect2 id='installation-unix-source-quick'>
    <title>Quick Instructions</title>
    <para>
      If you know the drill:
    </para>
    <informalexample>
      <literallayout><userinput>tar -jxvf gwyddion-2.26.tar.xz
cd gwyddion-2.26
./configure
make install</userinput></literallayout>
    </informalexample>
  </sect2>
  <sect2 id='installation-unix-source-unpacking'>
    <title>Source Unpacking</title>
    <para>
      Unpack the source code tarball with
      <informalexample>
        <literallayout><userinput>tar -Jxvf gwyddion-2.26.tar.xz</userinput></literallayout>
      </informalexample>
      replacing 2.26 with the actual version number. It will create directory
      <filename>gwyddion-2.26</filename> (again, with the actual version
      number in place of 2.26), <command>cd</command> to this directory.
      All other compilation actions will take place there.
    </para>
    <para>
      If your operating system does not come with xz you might want to
      download <filename>gwyddion-2.26.tar.gz</filename> (compressed with
      gzip) instead and unpack it with
      <informalexample>
        <literallayout><userinput>tar -zxvf gwyddion-2.26.tar.gz</userinput></literallayout>
      </informalexample>
      However, modern Unix and Unix-like systems come with both xz and
      gzip so, the considerably smaller
      <filename>gwyddion-2.26.tar.xz</filename> should be normally the
      better choice.
    </para>
  </sect2>
  <sect2 id='installation-unix-source-configuration'>
    <title>Configuration</title>
    <para>
      Run
      <informalexample>
        <literallayout><userinput>./configure</userinput></literallayout>
      </informalexample>
      to configure <application>Gwyddion</application>.
    </para>
    <para>
      The <command>configure</command> shell script attempts to guess correct
      values for various system-dependent variables used during compilation.
      It uses those values to create a <filename>Makefile</filename> in each
      directory of the package, a couple of header <filename>.h</filename>
      files containing system-dependent definitions and a few other
      system-dependent auxiliary files.
      Finally, it creates a shell script <command>config.status</command> that
      you can run in the future to recreate the current configuration, and
      a file <filename>config.log</filename>.  This file contains the details
      of the detection process and it is helpful to include it in compilation
      related bug reports.
      At the end, <command>configure</command> also prints a summary of
      enabled/disabled optional features, including the reasons why features
      were disabled.
    </para>
    <para>
      If <command>configure</command> reports missing required packages,
      install these packages and re-run it.  The same applies to the case
      when <command>configure</command> passes but you find you have not
      installed an optional package you want to compile
      <application>Gwyddion</application> with.  It is possible a package
      is not found or it is misdetected even if you have installed it, namely
      when it is installed into a non-standard directory. In this case it
      is necessary to adjust certain environment variables to make
      <command>configure</command> able to find the packages:
      <variablelist>
        <varlistentry>
          <term><envar>PKG_CONFIG_PATH</envar></term>
          <listitem>
            <para>
              Most packages come with so called
              <ulink url='http://pkgconfig.freedesktop.org/wiki/'>pkg-config</ulink>
              files (<filename>.pc</filename>) that describe how programs
              should compile and link with them.  <command>configure</command>
              uses information from these files, therefore
              <envar>PKG_CONFIG_PATH</envar> must be set to list all
              non-standard directories with relevant pkg-config files.
              To add for instance a GTK+ installation in
              <filename>/opt/gnome</filename> and a FFTW3 installation in
              <filename>$HOME/opt/fftw3</filename> one can do
              <informalexample>
                <literallayout><userinput>PKG_CONFIG_PATH=/opt/gnome/lib/pkgconfig:$HOME/opt/fftw3/lib/pkgconfig
export PKG_CONFIG_PATH</userinput></literallayout>
              </informalexample>
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <envar>PATH</envar>,
            <envar>LD_LIBRARY_PATH</envar>
          </term>
          <listitem>
            <para>
              It may be necessary to adjust these variables to include
              non-standard directories with executables and libraries of
              relevant packages, respectively.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <envar>CPPFLAGS</envar>,
            <envar>LDFLAGS</envar>
          </term>
          <listitem>
            <para>
              It may be necessary to adjust these variables to include
              non-standard directories with header files and libraries of
              packages that do not come with pkg-config files, for example
              for libTIFF in <filename>/usr/local</filename> one can set:
              <informalexample>
                <literallayout><userinput>CPPFLAGS=-I/usr/local/include
export CPPFLAGS
LDFLAGS=-L/usr/local/lib
export LDFLAGS</userinput></literallayout>
              </informalexample>
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
    <para>
      Option <option>--prefix</option> of <command>configure</command> sets the
      base installation directory. Program components will be installed into
      its <filename>bin</filename>, <filename>lib</filename>,
      <filename>share</filename>, etc. subdirectories (that will be created if
      they do not exist). More detailed control is possible with options
      specifying particular subdirectories as <option>--bindir</option>,
      <option>--libdir</option>.  The default prefix is
      <filename>/usr/local/bin</filename>, to install
      <application>Gwyddion</application> into your home directory you may want
      to use for instance
      <informalexample>
        <literallayout><userinput>./configure --prefix=$HOME/opt/gwyddion</userinput></literallayout>
      </informalexample>
      If you install Gwyddion for personal use it is recommended to use
      a similar installation directory as no steps need to be performed as
      root in this case.
    </para>
  </sect2>
  <sect2 id='installation-unix-source-configuration2'>
    <title>Configuration tweaks</title>
    <para>
      Optional features can be enabled/disabled with options such as
      <option>--with-foo</option>/<option>--without-foo</option>
      or
      <option>--enable-foo</option>/<option>--disable-foo</option>.
      For instance compilation with FFTW3 can be disabled with:
      <informalexample>
        <literallayout><userinput>./configure --without-fftw3</userinput></literallayout>
      </informalexample>
      By default all optional features are enabled if their prerequisites
      are found.  A brief summary enabled and disabled optional features is
      printed near the end of <command>configure</command> output.
    </para>
    <para>
      The complete list of <command>configure</command> options and
      important variables can be obtained with:
      <informalexample>
        <literallayout><userinput>./configure --help</userinput></literallayout>
      </informalexample>
    </para>
    <para>
      Most of these options control inclusion/exclusion of optional features.
      Some interesting general options are explained below.
    </para>
    <sect3 id='installation-unix-source-configuration-user'>
      <title>Users's tweaks</title>
      <para>
        Gwyddion comes with various desktop integration files defining MIME
        types, menu entries, file associations, thumbnailers, etc.
        If you install Gwyddion to a system prefix they usually end up in
        the correct location.  However, if you install it somewhere to your
        home directory then these files need to be placed elsewhere, namely
        into certain dot-directories in your home.
      </para>
      <para>
        This can be requested using <option>--enable-home-installation</option>
        option of <command>configure</command>.
        Note that using this option causes installation of files outside the
        specified prefix.
      </para>
    </sect3>
    <sect3 id='installation-unix-source-configuration-packager'>
      <title>Packager's tweaks</title>
      <para>
        If Gwyddion is installed into a staging area for a subsequent
        packaging it is necessary to disable certain post-installation actions
        that need to be done on the target system, not while packaging.
      </para>
      <para>
        Updating of Freedesktop files can be
        disabled with <option>--disable-desktop-file-update</option>.
        Installation of GConf2 schemas can be disabled with
        <option>--disable-schemas-install</option>.  Usually, this
        does not have to be done explicitly as installations into a staging
        area use non-empty <varname>DESTDIR</varname> (see
        <link linkend='installation-unix-source-installation'>installation</link>).
        If <varname>DESTDIR</varname> is found to be non-empty the
        build system skips post-installation actions automatically.
      </para>
    </sect3>
    <sect3 id='installation-unix-source-configuration-developer'>
      <title>Developer's tweaks</title>
      <para>
        If you intend to patch or otherwise modify Gwyddion source code pass
        option <option>--enable-maintainer-mode</option> to
        <command>configure</command>
        to enable various update and rebuild rules that are not used in plain
        compilation.  Depending on the nature of the modifications, some of the
        additional tools described in section
        <link linkend='installation-devel'>Subversion Checkout, Development</link>
        may be necessary.
      </para>
    </sect3>
  </sect2>
  <sect2 id='installation-unix-source-compilation'>
    <title>Compilation</title>
    <para>
      Run
      <informalexample>
        <literallayout><userinput>make</userinput></literallayout>
      </informalexample>
      and wait until <application>Gwyddion</application> is compiled.  If
      <command>configure</command> finished without errors the compilation
      should pass too.
    </para>
    <para>
      If you need to do unusual things to compile the package, please try to
      figure out how <command>configure</command> could detect whether and
      what to do, and e-mail patches or instructions to the bug-report
      address so they can be considered for the next release.
    </para>
  </sect2>
  <sect2 id='installation-unix-source-installation'>
    <title>Installation</title>
    <para>
      <application>Gwyddion</application> has to be installed to be run,
      it is not possible to run it uninstalled.
    </para>
    <para>
      Run
      <informalexample>
        <literallayout><userinput>make install</userinput></literallayout>
      </informalexample>
      to install <application>Gwyddion</application> to the target directory.
      If you install <application>Gwyddion</application> to a system
      directory you have to become root for running this command.  This is
      the <emphasis>only</emphasis> command that you might have to run as
      root during the installation.  For example using <command>sudo</command>:
      <informalexample>
        <literallayout><userinput>sudo make install</userinput></literallayout>
      </informalexample>
    </para>
    <para>
      To install <application>Gwyddion</application> to a staging area,
      for example for packaging, set <command>make</command>
      <varname>DESTDIR</varname> variable to a prefix that will be
      prepended to all target directories:
      <informalexample>
        <literallayout><userinput>make install DESTDIR=/var/tmp/gwyddion-buildroot</userinput></literallayout>
      </informalexample>
      Do <emphasis>not</emphasis> override individual directory variables as
      <varname>bindir</varname>, <varname>libdir</varname>.
    </para>
    <para>
      If you do not install to a system directory, e.g. to a subdirectory of
      your home directory, you may need to adjust the following variables
      during installation:
      <itemizedlist>
        <listitem>
          <varname>GCONF_SCHEMA_CONFIG_SOURCE</varname> – location of GConf2
          schemas
        </listitem>
        <listitem>
          <varname>KDE4_MODULE_DIR</varname> – location of KDE4 modules
        </listitem>
      </itemizedlist>
      Also, variable <varname>XDG_DATA_DIRS</varname> might need to be
      adjusted after installation to get full desktop integration.
    </para>
    <para>
      If you install Gwyddion into <filename>/usr/local</filename> and get
      error message that <filename>libgwyapp.so.0</filename> cannot be found
      your system probably lacks standard library directories in the dynamic
      linker configuration.  Notably, this happens on Ubuntu.  Edit file
      <filename>/etc/ld.so.conf</filename> and add the line
      <informalexample>
        <programlisting>/usr/local/lib</programlisting>
      </informalexample>
      there.
    </para>
  </sect2>
  <sect2 id='installation-unix-source-running'>
    <title>Running</title>
    <para>
      Running <application>Gwyddion</application> does not normally require any
      additional setup.
    </para>
    <para>
      The misfeatures of some desktop environments, however, may render
      <application>Gwyddion</application> unusable and need to be disabled.
      The hijacking of program main menu in <application>Unity</application>
      makes most of <application>Gwyddion</application> menus inaccessible.  It
      can be disabled by by unsetting <envar>UBUNTU_MENUPROXY</envar> while
      running <application>Gwyddion</application>:
      <informalexample>
        <literallayout><userinput>UBUNTU_MENUPROXY= gwyddion</userinput></literallayout>
      </informalexample>
    </para>
  </sect2>
  <sect2 id='installation-unix-source-deinstallation'>
    <title>Deinstallation</title>
    <para>
      Run
      <informalexample>
        <literallayout><userinput>make uninstall</userinput></literallayout>
      </informalexample>
      in the directory you previously compiled
      <application>Gwyddion</application> to remove it.  If you have lost
      the source directory meanwhile you can try to unpack, configure and
      build it exactly as before and then issue
      <userinput>make uninstall</userinput>, although this relies on your
      ability to reproduce the build process.
    </para>
  </sect2>
  <sect2 id='installation-unix-source-rpm'>
    <title>RPM Packages</title>
    <para>
      It is possible to build RPM packages on RPM-based GNU/Linux
      distributions directly from source code tarballs with
      <informalexample>
        <literallayout><userinput>rpmbuild -tb gwyddion-2.26.tar.xz</userinput></literallayout>
      </informalexample>
      where 2.26 is to be replaced with the actual version as above.
      This method was tested mainly on Fedora, openSuSE and Mandriva and
      the RPM spec file contains some specific provisions for these systems.
      Specific support for other RPM-based systems can be added on request.
    </para>
  </sect2>
</sect1>
<!-- vim: set ts=2 sw=2 et : -->
