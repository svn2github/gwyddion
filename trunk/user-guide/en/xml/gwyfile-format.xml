<?xml version='1.0' encoding='utf-8'?>
<!-- @(#) $Id$ -->
<!DOCTYPE book PUBLIC '-//OASIS//DTD DocBook XML V4.5//EN'
                      'http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd'>
<sect1 id='gwyfile-format'>
  <title>Format of Gwyddion Files</title>
  <para>
    <application>Gwyddion</application> native data files consists of
    a tree-like structure of serialized objects.  Generally, these objects
    can be of various kind and contain other embedded objects (hence the
    tree-like structure).  It can be instructive to play with
    <ulink url='http://gwyddion.net/gwydump.php'><command>gwydump</command></ulink>,
    a simple file structure visualizer available in on the project's web,
    for a while and examine the contents of various files.
  </para>
  <para>
    First of all, we will describe physical file structure without regard to
    possible interpretation of contained data.
  </para>
  <sect2 id='gwyfile-byte-order'>
    <title>Byte Order</title>
    <para>
      All data is stored in little-endian (also known as LSB or Intel) byte
      order.
    </para>
  </sect2>
  <sect2 id='gwyfile-file-header'>
    <title>File Header</title>
    <para>
      The file header consists of four bytes (magic number) with the
      values of ASCII characters <literal>GWYP</literal>.
    </para>
    <para>
      This is the new file format, an older version of file format with magic
      header <literal>GWYO</literal> also exists.  It will not be discussed
      here.
    </para>
  </sect2>
  <sect2 id='gwyfile-file-data'>
    <title>File Data</title>
    <para>
      The rest of the file consists of a serialized <type>GwyContainer</type>
      object that contains all the data.  It is stored exactly the same way
      as any other object, that is as described in the next section.
    </para>
  </sect2>
  <sect2 id='gwyfile-object-layout'>
    <title>Object Layout</title>
    <para>
      An object consists of three parts (in the following order):
      <itemizedlist>
        <listitem>
          Type name, stored as a <constant>NUL</constant>-terminated string of
          ASCII characters.  This is the type name in GObject type system.
        </listitem>
        <listitem>
          Serialized data size, stored as an unsigned 32bit integer.  It does
          not include the size of the type name and the size of self.
        </listitem>
        <listitem>
          Component list.  Components are named parts of object data, each of
          particular data type: an atomic type, an array of atomic types, or
          again an object.  They are stored in no particular order.
        </listitem>
      </itemizedlist>
    </para>
  </sect2>
  <sect2 id='gwyfile-components'>
    <title>Components</title>
    <para>
      Each component consists of three parts (in the following order):
      <itemizedlist>
        <listitem>
          Name, stored as a <constant>NUL</constant>-terminated string.
        </listitem>
        <listitem>
          Type, stored as a single unsigned byte (character).  The table of
          possible component types is presented below.
        </listitem>
        <listitem>
          Data, stored as whatever is appropriate for a particular type.
        </listitem>
      </itemizedlist>
    </para>
  </sect2>
  <sect2 id='gwyfile-data-types'>
    <title>Data Types</title>
    <para>
      Available atomic data types are listed in following table:
    </para>
    <para>
      <informaltable id='table-gwyfile-atomic-types'>
        <tgroup cols='3' align='left'>
          <?dblatex llX?>
          <thead>
            <row>
              <entry>Type</entry>
              <entry>Character</entry>
              <entry>Note</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>boolean</entry>
              <entry><literal>b</literal></entry>
              <entry>
                Stored as a byte, zero is false, nonzero (normally 1) is true
              </entry>
            </row>
            <row>
              <entry>character</entry>
              <entry><literal>c</literal></entry>
              <entry></entry>
            </row>
            <row>
              <entry>32bit integer</entry>
              <entry><literal>i</literal></entry>
              <entry></entry>
            </row>
            <row>
              <entry>64bit integer</entry>
              <entry><literal>q</literal></entry>
              <entry></entry>
            </row>
            <row>
              <entry>double</entry>
              <entry><literal>d</literal></entry>
              <entry>
                finite IEEE 754 double precision floating point number,
                i.e. files must not contain infinities and not-a-numbers
              </entry>
            </row>
            <row>
              <entry>string</entry>
              <entry><literal>s</literal></entry>
              <entry>
                <constant>NUL</constant>-terminated and UTF-8 encoded
              </entry>
            </row>
            <row>
              <entry>object</entry>
              <entry><literal>o</literal></entry>
              <entry>
                Serialized object as described above
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </para>
    <para>
      Each atomic type except boolean has its array counterpart.  The type
      character of array types is the same as of the corresponding atomic
      type, except it is uppercase. Arrays are stored as unsigned 32bit array
      length (the number of items), followed by the item values. Array data
      types are listed in following table:
    </para>
    <para>
      <informaltable id='table-gwyfile-array-types'>
        <tgroup cols='3' align='left'>
          <?dblatex llX?>
          <thead>
            <row>
              <entry>Type</entry>
              <entry>Character</entry>
              <entry>Note</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>array of characters</entry>
              <entry><literal>C</literal></entry>
              <entry>
                Not <constant>NUL</constant>-terminated
              </entry>
            </row>
            <row>
              <entry>array of 32bit integers</entry>
              <entry><literal>I</literal></entry>
              <entry></entry>
            </row>
            <row>
              <entry>array of 64bit integers</entry>
              <entry><literal>Q</literal></entry>
              <entry></entry>
            </row>
            <row>
              <entry>array of doubles</entry>
              <entry><literal>D</literal></entry>
              <entry></entry>
            </row>
            <row>
              <entry>array of strings</entry>
              <entry><literal>S</literal></entry>
              <entry></entry>
            </row>
            <row>
              <entry>array of objects</entry>
              <entry><literal>O</literal></entry>
              <entry>Uppercase Oh, not zero</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </para>
  </sect2>
  <sect2 id='gwyfile-top-level-container'>
    <title>Top-Level <type>GwyContainer</type></title>
    <para>
      The names (keys) of data objects in a <type>GwyContainer</type> representing a Gwyddion
      file strongly resemble UNIX file names, i.e. they have the form of
      <literal>/</literal>-separated paths and form a sort of tree-like structure.
      For instance the title of the first channel, numbered 0, is stored under the key
      <literal>/0/data/title</literal>.  Note some data or information is found under keys
      that do not seem logical; the reason is usually historical.
    </para>
    <para>
      The following sections describe the organisation of interesting data and information
      in the <type>GwyContainer</type>.  The list is not necessarily complete.
      However, since all data items in the file specify consistently their
      name, type and size in bytes it is always possible to skip unknown data
      types or data you are not interested in and extract only the desired data items.
    </para>
  </sect2>
  <sect2 id='gwyfile-channels'>
    <title>Channels</title>
    <para>
      The following table summarises the common keys of channel-related data in
      the top-level container for channel number 0.  For other channels, the
      number 0 has to be replaced with the corresponding channel number.  Note
      that channels are often numbered sequentially, starting from 0, however,
      they can have any numbers and the set of channels numbers does not have
      to be contiguous.
    </para>
    <para>
      <informaltable id='table-gwyfile-channel-keys'>
        <tgroup cols='3' align='left'>
          <?dblatex llX?>
          <thead>
            <row>
              <entry>Key</entry>
              <entry>Type</entry>
              <entry>Meaning</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><literal>/0/data</literal></entry>
              <entry><link linkend='table-gwyfile-GwyDataField'><type>GwyDataField</type></link></entry>
              <entry>
                Channel data.
              </entry>
            </row>
            <row>
              <entry><literal>/0/data/title</literal></entry>
              <entry>string</entry>
              <entry>
                Channel title, as shown in the data browser.
              </entry>
            </row>
            <row>
              <entry><literal>/0/data/visible</literal></entry>
              <entry>boolean</entry>
              <entry>
                Whether the channel should be displayed in a window when the file is loaded.
              </entry>
            </row>
            <row>
              <entry><literal>/0/data/realsquare</literal></entry>
              <entry>boolean</entry>
              <entry>
                Whether the channel should be displayed as
                <guilabel>Physically square</guilabel> (as opposed to
                <guilabel>Pixelwise square</guilabel>).
              </entry>
            </row>
            <row>
              <entry><literal>/0/base/palette</literal></entry>
              <entry>string</entry>
              <entry>
                Name of the false color gradient used to display the channel.
              </entry>
            </row>
            <row>
              <entry><literal>/0/base/range-type</literal></entry>
              <entry>32bit integer</entry>
              <entry>
                False color mapping type (as set by the
                <link linkend='color-range'>Color range tool</link>), the value is from
                <type>GwyLayerBasicRangeType</type> enum.
              </entry>
            </row>
            <row>
              <entry><literal>/0/base/min</literal></entry>
              <entry>double</entry>
              <entry>
                Minimum value for user-set display range.
              </entry>
            </row>
            <row>
              <entry><literal>/0/base/max</literal></entry>
              <entry>double</entry>
              <entry>
                Maximum value for user-set display range.
              </entry>
            </row>
            <row>
              <entry><literal>/0/mask</literal></entry>
              <entry><link linkend='table-gwyfile-GwyDataField'><type>GwyDataField</type></link></entry>
              <entry>
                Mask data.  The pixel dimensions of this data field must match those
                of the channel data.
              </entry>
            </row>
            <row>
              <entry><literal>/0/mask/red</literal></entry>
              <entry>double</entry>
              <entry>
                Red component of the mask color.
              </entry>
            </row>
            <row>
              <entry><literal>/0/mask/green</literal></entry>
              <entry>double</entry>
              <entry>
                Green component of the mask color.
              </entry>
            </row>
            <row>
              <entry><literal>/0/mask/blue</literal></entry>
              <entry>double</entry>
              <entry>
                Blue component of the mask color.
              </entry>
            </row>
            <row>
              <entry><literal>/0/mask/alpha</literal></entry>
              <entry>double</entry>
              <entry>
                Alpha (opacity) component of the mask color.
              </entry>
            </row>
            <row>
              <entry><literal>/0/show</literal></entry>
              <entry><link linkend='table-gwyfile-GwyDataField'><type>GwyDataField</type></link></entry>
              <entry>
                Presentation data.  The pixel dimensions of this data field must match those
                of the channel data.
              </entry>
            </row>
            <row>
              <entry><literal>/0/meta</literal></entry>
              <entry><type>GwyContainer</type></entry>
              <entry>
                Channel metadata.  The keys are directly the names as displayed in
                the metadata browser and the string values are the values.
              </entry>
            </row>
            <row>
              <entry><literal>/0/data/log</literal></entry>
              <entry><link linkend='table-gwyfile-GwyStringList'><type>GwyStringList</type></link></entry>
              <entry>
                Channel log as a list of string log entries.  They have the format
                <literal><replaceable>type</replaceable>::<replaceable>function</replaceable>(<replaceable>param</replaceable>=<replaceable>value</replaceable>, …)@<replaceable>time</replaceable></literal>.
              </entry>
            </row>
            <row>
              <entry><literal>/0/select/<replaceable>foo</replaceable></literal></entry>
              <entry>a <type>GwySelection</type> subclass</entry>
              <entry>
                Selection data.  Each kind of selection has (usually) a different object
                type and is stored under a different name; the specific name
                <replaceable>foo</replaceable> is the same as shown in the
                <link linkend='selection-manager'>selection manager</link>.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </para>
    <para>
      Channels are represented as <type>GwyDataField</type> objects.  The components of
      a <type>GwyDataField</type> are summarised in the following table:
    </para>
    <para>
      <informaltable id='table-gwyfile-GwyDataField'>
        <tgroup cols='3' align='left'>
          <?dblatex llX?>
          <thead>
            <row>
              <entry>Component</entry>
              <entry>Type</entry>
              <entry>Meaning</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><literal>xres</literal></entry>
              <entry>32bit integer</entry>
              <entry>
                Horizontal size in pixels.
              </entry>
            </row>
            <row>
              <entry><literal>yres</literal></entry>
              <entry>32bit integer</entry>
              <entry>
                Vertical size in pixels.
              </entry>
            </row>
            <row>
              <entry><literal>xreal</literal></entry>
              <entry>double</entry>
              <entry>
                Horizontal dimension in physical units.
              </entry>
            </row>
            <row>
              <entry><literal>yreal</literal></entry>
              <entry>double</entry>
              <entry>
                Vertical dimension in physical units.
              </entry>
            </row>
            <row>
              <entry><literal>xoff</literal></entry>
              <entry>double</entry>
              <entry>
                Horizontal offset of the top-left corner in physical units.
                It usually occurs only if non-zero.
              </entry>
            </row>
            <row>
              <entry><literal>yoff</literal></entry>
              <entry>double</entry>
              <entry>
                Vertical offset of the top-left corner in physical units.
                It usually occurs only if non-zero.
              </entry>
            </row>
            <row>
              <entry><literal>si_unit_xy</literal></entry>
              <entry><link linkend='table-gwyfile-GwySIUnit'><type>GwySIUnit</type></link></entry>
              <entry>
                Unit of lateral dimensions.
              </entry>
            </row>
            <row>
              <entry><literal>si_unit_z</literal></entry>
              <entry><link linkend='table-gwyfile-GwySIUnit'><type>GwySIUnit</type></link></entry>
              <entry>
                Unit of data values.
              </entry>
            </row>
            <row>
              <entry><literal>data</literal></entry>
              <entry>array of doubles</entry>
              <entry>
                Field data, stored as a flat array of size
                <varname>xres</varname>×<varname>yres</varname>,
                from top to bottom and from left to right.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </para>
  </sect2>
  <sect2 id='gwyfile-graphs'>
    <title>Graphs</title>
    <para>
      The following table summarises the common keys of graph-related data in the top-level
      container for graph number 1.  For other graphs, the number 1 has to be
      replaced with the corresponding graph number.  Note that graphs are often
      numbered sequentially, starting from 1, however, they can have any
      numbers positive and the set of graph numbers does not have to be
      contiguous.  The number 0 in the prefix of graph keys is a historical
      relic that does not mean anything and it is always 0.
    </para>
    <para>
      <informaltable id='table-gwyfile-graph-keys'>
        <tgroup cols='3' align='left'>
          <?dblatex llX?>
          <thead>
            <row>
              <entry>Key</entry>
              <entry>Type</entry>
              <entry>Meaning</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><literal>/0/graph/graph/1</literal></entry>
              <entry><link linkend='table-gwyfile-GwyGraphModel'><type>GwyGraphModel</type></link></entry>
              <entry>
                Graph model object data.
              </entry>
            </row>
            <row>
              <entry><literal>/0/graph/graph/1/visible</literal></entry>
              <entry>boolean</entry>
              <entry>
                Whether the graph should be displayed in a window when the file is loaded.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </para>
    <para>
      Graphs are represented as <type>GwyGraphModel</type> objects.  The components of
      a <type>GwyGraphModel</type> are summarised in the following table:
    </para>
    <para>
      <informaltable id='table-gwyfile-GwyGraphModel'>
        <tgroup cols='3' align='left'>
          <?dblatex llX?>
          <thead>
            <row>
              <entry>Component</entry>
              <entry>Type</entry>
              <entry>Meaning</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><literal>curves</literal></entry>
              <entry>array of <link linkend='table-gwyfile-GwyGraphCurveModel'><type>GwyGraphCurveModel</type></link>s</entry>
              <entry>
                Individual graph curves.
              </entry>
            </row>
            <row>
              <entry><literal>title</literal></entry>
              <entry>string</entry>
              <entry>
                Graph title as displayed in the data browser.
              </entry>
            </row>
            <row>
              <entry><literal>x_unit</literal></entry>
              <entry><link linkend='table-gwyfile-GwySIUnit'><type>GwySIUnit</type></link></entry>
              <entry>
                Unit of the abscissa.
              </entry>
            </row>
            <row>
              <entry><literal>y_unit</literal></entry>
              <entry><link linkend='table-gwyfile-GwySIUnit'><type>GwySIUnit</type></link></entry>
              <entry>
                Unit of the ordinate.
              </entry>
            </row>
            <row>
              <entry><literal>top_label</literal></entry>
              <entry>string</entry>
              <entry>
                Label on the top axis.
              </entry>
            </row>
            <row>
              <entry><literal>bottom_label</literal></entry>
              <entry>string</entry>
              <entry>
                Label on the bottom axis.
              </entry>
            </row>
            <row>
              <entry><literal>left_label</literal></entry>
              <entry>string</entry>
              <entry>
                Label on the left axis.
              </entry>
            </row>
            <row>
              <entry><literal>right_label</literal></entry>
              <entry>string</entry>
              <entry>
                Label on the right axis.
              </entry>
            </row>
            <row>
              <entry><literal>x_is_logarithmic</literal></entry>
              <entry>boolean</entry>
              <entry>
                Whether the abscissa has a logarithmic scale.
              </entry>
            </row>
            <row>
              <entry><literal>y_is_logarithmic</literal></entry>
              <entry>boolean</entry>
              <entry>
                Whether the ordinate has a logarithmic scale.
              </entry>
            </row>
            <row>
              <entry><literal>x_min</literal></entry>
              <entry>double</entry>
              <entry>
                User-set minimum value of the abscissa.
              </entry>
            </row>
            <row>
              <entry><literal>x_min_set</literal></entry>
              <entry>boolean</entry>
              <entry>
                Whether user-set minimum value of the abscissa should be used (otherwise
                the range is determined automatically).
              </entry>
            </row>
            <row>
              <entry><literal>x_max</literal></entry>
              <entry>double</entry>
              <entry>
                User-set maximum value of the abscissa.
              </entry>
            </row>
            <row>
              <entry><literal>x_max_set</literal></entry>
              <entry>boolean</entry>
              <entry>
                Whether user-set maximum value of the abscissa should be used (otherwise
                the range is determined automatically).
              </entry>
            </row>
            <row>
              <entry><literal>y_min</literal></entry>
              <entry>double</entry>
              <entry>
                User-set minimum value of the ordinate.
              </entry>
            </row>
            <row>
              <entry><literal>y_min_set</literal></entry>
              <entry>boolean</entry>
              <entry>
                Whether user-set minimum value of the ordinate should be used (otherwise
                the range is determined automatically).
              </entry>
            </row>
            <row>
              <entry><literal>y_max</literal></entry>
              <entry>double</entry>
              <entry>
                User-set maximum value of the ordinate.
              </entry>
            </row>
            <row>
              <entry><literal>y_max_set</literal></entry>
              <entry>boolean</entry>
              <entry>
                Whether user-set maximum value of the ordinate should be used (otherwise
                the range is determined automatically).
              </entry>
            </row>
            <row>
              <entry><literal>grid-type</literal></entry>
              <entry>32bit integer</entry>
              <entry>
                Type of grid shown.
                The value is from <type>GwyGraphGridType</type> enum.
              </entry>
            </row>
            <row>
              <entry><literal>label.has_frame</literal></entry>
              <entry>boolean</entry>
              <entry>
                Whether the graph key has a frame.
              </entry>
            </row>
            <row>
              <entry><literal>label.frame_thickness</literal></entry>
              <entry>32bit integer</entry>
              <entry>
                Width of graph key frame.
              </entry>
            </row>
            <row>
              <entry><literal>label.reverse</literal></entry>
              <entry>boolean</entry>
              <entry>
                Whether to reverse the graph key.
              </entry>
            </row>
            <row>
              <entry><literal>label.visible</literal></entry>
              <entry>boolean</entry>
              <entry>
                Whether the graph key is visible.
              </entry>
            </row>
            <row>
              <entry><literal>label.position</literal></entry>
              <entry>32bit integer</entry>
              <entry>
                The position (corner) where the graph key is places.
                The value is from <type>GwyGraphLabelPosition</type> enum.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </para>
    <para>
      Graph curves are represented as <type>GwyGraphCurveModel</type> objects.
      The components of a <type>GwyGraphCurveModel</type> are summarised in the
      following table:
    </para>
    <para>
      <informaltable id='table-gwyfile-GwyGraphCurveModel'>
        <tgroup cols='3' align='left'>
          <?dblatex llX?>
          <thead>
            <row>
              <entry>Component</entry>
              <entry>Type</entry>
              <entry>Meaning</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><literal>xdata</literal></entry>
              <entry>array of doubles</entry>
              <entry>
                Abscissa points.  The number of points must match <literal>ydata</literal>.
              </entry>
            </row>
            <row>
              <entry><literal>ydata</literal></entry>
              <entry>array of doubles</entry>
              <entry>
                Ordinate points.  The number of points must match <literal>xdata</literal>.
              </entry>
            </row>
            <row>
              <entry><literal>description</literal></entry>
              <entry>string</entry>
              <entry>
                Curve description (name).
              </entry>
            </row>
            <row>
              <entry><literal>type</literal></entry>
              <entry>32bit integer</entry>
              <entry>
                Curve mode (points, lines, etc.)
                The value is from <type>GwyGraphCurveType</type> enum.
              </entry>
            </row>
            <row>
              <entry><literal>color.red</literal></entry>
              <entry>double</entry>
              <entry>
                Red component of the curve color.
              </entry>
            </row>
            <row>
              <entry><literal>color.green</literal></entry>
              <entry>double</entry>
              <entry>
                Green component of the curve color.
              </entry>
            </row>
            <row>
              <entry><literal>color.blue</literal></entry>
              <entry>double</entry>
              <entry>
                Blue component of the curve color.
              </entry>
            </row>
            <row>
              <entry><literal>point_type</literal></entry>
              <entry>32bit integer</entry>
              <entry>
                Type of symbols representing data points.
                The value is from <type>GwyGraphPointType</type> enum.
              </entry>
            </row>
            <row>
              <entry><literal>point_size</literal></entry>
              <entry>32bit integer</entry>
              <entry>
                Size of symbols representing data points.
              </entry>
            </row>
            <row>
              <entry><literal>line_type</literal></entry>
              <entry>32bit integer</entry>
              <entry>
                Type of lines connecting data points.
                The value is from <type>GwyGraphLineType</type> enum.
              </entry>
            </row>
            <row>
              <entry><literal>line_size</literal></entry>
              <entry>32bit integer</entry>
              <entry>
                Width of lines connecting data points.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </para>
  </sect2>
  <sect2 id='gwyfile-spectra'>
    <title>Spectra</title>
    <para>
      The following table summarises the common keys of spectra-related data in
      the top-level container for spectra set number 0.  For other spectra, the
      number 0 has to be replaced with the corresponding spectra set number.  Note
      that spectra sets are often numbered sequentially, starting from 0, however,
      they can have any numbers and the set of spectra set numbers does not have
      to be contiguous.
    </para>
    <para>
      <informaltable id='table-gwyfile-spectra-keys'>
        <tgroup cols='3' align='left'>
          <?dblatex llX?>
          <thead>
            <row>
              <entry>Key</entry>
              <entry>Type</entry>
              <entry>Meaning</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><literal>/sps/0</literal></entry>
              <entry><link linkend='table-gwyfile-GwySpectra'><type>GwySpectra</type></link></entry>
              <entry>
                Spectra data.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </para>
    <para>
      Sets of spectra of one kind are represented as <type>GwySpectra</type> objects.
      The components of a <type>GwySpectra</type> are summarised in the following table:
    </para>
    <para>
      <informaltable id='table-gwyfile-GwySpectra'>
        <tgroup cols='3' align='left'>
          <?dblatex llX?>
          <thead>
            <row>
              <entry>Component</entry>
              <entry>Type</entry>
              <entry>Meaning</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><literal>title</literal></entry>
              <entry>string</entry>
              <entry>
                Spectra title as displayed in the data browser.
              </entry>
            </row>
            <row>
              <entry><literal>si_unit_xy</literal></entry>
              <entry><link linkend='table-gwyfile-GwySIUnit'><type>GwySIUnit</type></link></entry>
              <entry>
                Unit of spectrum position coordinates.
              </entry>
            </row>
            <row>
              <entry><literal>coords</literal></entry>
              <entry>array of doubles</entry>
              <entry>
                Coordinates of points where the spectra were taken, in physical units.
                Each spectrum takes two items: for the horizontal and vertical coordinate.
                The number of coordinates must match the number of curves in
                <varname>data</varname>.
              </entry>
            </row>
            <row>
              <entry><literal>data</literal></entry>
              <entry>array of <link linkend='table-gwyfile-GwyDataLine'><type>GwyDataLine</type></link>s</entry>
              <entry>
                Individual spectra curves.
              </entry>
            </row>
            <row>
              <entry><literal>selected</literal></entry>
              <entry>array of 32bit integers</entry>
              <entry>
                Indices of selected spectra curves.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </para>
    <para>
      Individual curves in spectra are represented as <type>GwyDataLine</type> objects.
      The components of a <type>GwyDataLine</type> are summarised in the following table:
    </para>
    <para>
      <informaltable id='table-gwyfile-GwyDataLine'>
        <tgroup cols='3' align='left'>
          <?dblatex llX?>
          <thead>
            <row>
              <entry>Component</entry>
              <entry>Type</entry>
              <entry>Meaning</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><literal>res</literal></entry>
              <entry>32bit integer</entry>
              <entry>
                Number of data points.
              </entry>
            </row>
            <row>
              <entry><literal>real</literal></entry>
              <entry>double</entry>
              <entry>
                Length in physical units.
              </entry>
            </row>
            <row>
              <entry><literal>off</literal></entry>
              <entry>double</entry>
              <entry>
                Offset of the begining in physical units.
                It usually occurs only if non-zero.
              </entry>
            </row>
            <row>
              <entry><literal>si_unit_x</literal></entry>
              <entry><link linkend='table-gwyfile-GwySIUnit'><type>GwySIUnit</type></link></entry>
              <entry>
                Unit of abscissa.
              </entry>
            </row>
            <row>
              <entry><literal>si_unit_y</literal></entry>
              <entry><link linkend='table-gwyfile-GwySIUnit'><type>GwySIUnit</type></link></entry>
              <entry>
                Unit of data values.
              </entry>
            </row>
            <row>
              <entry><literal>data</literal></entry>
              <entry>array of doubles</entry>
              <entry>
                Line data, stored as an array of <varname>res</varname>,
                from left to right.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </para>
  </sect2>
  <sect2 id='gwyfile-volume'>
    <title>Volume data</title>
    <para>
      The following table summarises the common keys of volume-related data in
      the top-level container for volume data number 0.  For other volume data, the
      number 0 has to be replaced with the corresponding volume data number.  Note
      that volume data are often numbered sequentially, starting from 0, however,
      they can have any numbers and the set of volume data numbers does not have
      to be contiguous.
    </para>
    <para>
      <informaltable id='table-gwyfile-volume-keys'>
        <tgroup cols='3' align='left'>
          <?dblatex llX?>
          <thead>
            <row>
              <entry>Key</entry>
              <entry>Type</entry>
              <entry>Meaning</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><literal>/brick/0</literal></entry>
              <entry><link linkend='table-gwyfile-GwyBrick'><type>GwyBrick</type></link></entry>
              <entry>
                Volume data.
              </entry>
            </row>
            <row>
              <entry><literal>/brick/0/preview</literal></entry>
              <entry><link linkend='table-gwyfile-GwyDataField'><type>GwyDataField</type></link></entry>
              <entry>
                Two-dimensional data shown when the volume data is
                displayed in a window.
              </entry>
            </row>
            <row>
              <entry><literal>/brick/0/title</literal></entry>
              <entry>string</entry>
              <entry>
                Volume data title, as shown in the data browser.
              </entry>
            </row>
            <row>
              <entry><literal>/brick/0/visible</literal></entry>
              <entry>boolean</entry>
              <entry>
                Whether the volume data should be displayed in a window when the file is loaded.
              </entry>
            </row>
            <row>
              <entry><literal>/brick/0/preview/palette</literal></entry>
              <entry>string</entry>
              <entry>
                Name of the false color gradient used to display the preview data.
              </entry>
            </row>
            <row>
              <entry><literal>/brick/0/meta</literal></entry>
              <entry><type>GwyContainer</type></entry>
              <entry>
                Volume data metadata.  The keys are directly the names as displayed in
                the metadata browser and the string values are the values.
              </entry>
            </row>
            <row>
              <entry><literal>/brick/0/log</literal></entry>
              <entry><link linkend='table-gwyfile-GwyStringList'><type>GwyStringList</type></link></entry>
              <entry>
                Volume data log as a list of string log entries.  They have the format
                <literal><replaceable>type</replaceable>::<replaceable>function</replaceable>(<replaceable>param</replaceable>=<replaceable>value</replaceable>, …)@<replaceable>time</replaceable></literal>.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </para>
    <para>
      Volume data are represented as <type>GwyBrick</type> objects.  The components of
      a <type>GwyBrick</type> are summarised in the following table:
    </para>
    <para>
      <informaltable id='table-gwyfile-GwyBrick'>
        <tgroup cols='3' align='left'>
          <?dblatex llX?>
          <thead>
            <row>
              <entry>Component</entry>
              <entry>Type</entry>
              <entry>Meaning</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><literal>xres</literal></entry>
              <entry>32bit integer</entry>
              <entry>
                Horizontal size in pixels.
              </entry>
            </row>
            <row>
              <entry><literal>yres</literal></entry>
              <entry>32bit integer</entry>
              <entry>
                Vertical size in pixels.
              </entry>
            </row>
            <row>
              <entry><literal>zres</literal></entry>
              <entry>32bit integer</entry>
              <entry>
                Depth (number of levels) in pixels.
              </entry>
            </row>
            <row>
              <entry><literal>xreal</literal></entry>
              <entry>double</entry>
              <entry>
                Horizontal dimension in physical units.
              </entry>
            </row>
            <row>
              <entry><literal>yreal</literal></entry>
              <entry>double</entry>
              <entry>
                Vertical dimension in physical units.
              </entry>
            </row>
            <row>
              <entry><literal>zreal</literal></entry>
              <entry>double</entry>
              <entry>
                Depthwise dimension in physical units.
              </entry>
            </row>
            <row>
              <entry><literal>xoff</literal></entry>
              <entry>double</entry>
              <entry>
                Horizontal offset of the top-left corner in physical units.
                It usually occurs only if non-zero.
              </entry>
            </row>
            <row>
              <entry><literal>yoff</literal></entry>
              <entry>double</entry>
              <entry>
                Vertical offset of the top-left corner in physical units.
                It usually occurs only if non-zero.
              </entry>
            </row>
            <row>
              <entry><literal>zoff</literal></entry>
              <entry>double</entry>
              <entry>
                Depthwise offset of the top-left corner in physical units.
                It usually occurs only if non-zero.
              </entry>
            </row>
            <row>
              <entry><literal>si_unit_x</literal></entry>
              <entry><link linkend='table-gwyfile-GwySIUnit'><type>GwySIUnit</type></link></entry>
              <entry>
                Unit of horizontal lateral dimensions.
              </entry>
            </row>
            <row>
              <entry><literal>si_unit_y</literal></entry>
              <entry><link linkend='table-gwyfile-GwySIUnit'><type>GwySIUnit</type></link></entry>
              <entry>
                Unit of vertical lateral dimensions.
              </entry>
            </row>
            <row>
              <entry><literal>si_unit_z</literal></entry>
              <entry><link linkend='table-gwyfile-GwySIUnit'><type>GwySIUnit</type></link></entry>
              <entry>
                Unit of depthwise dimensions.
              </entry>
            </row>
            <row>
              <entry><literal>si_unit_w</literal></entry>
              <entry><link linkend='table-gwyfile-GwySIUnit'><type>GwySIUnit</type></link></entry>
              <entry>
                Unit of data values.
              </entry>
            </row>
            <row>
              <entry><literal>data</literal></entry>
              <entry>array of doubles</entry>
              <entry>
                Field data, stored as a flat array of size
                <varname>xres</varname>×<varname>yres</varname>×<varname>zres</varname>,
                from the zeroth to the last plane, top to bottom and from left to right.
              </entry>
            </row>
            <row>
              <entry><literal>calibration</literal></entry>
              <entry><link linkend='table-gwyfile-GwyDataLine'><type>GwyDataLine</type></link></entry>
              <entry>
                Calibration of the <xi:include href='eqi-z.html'/> axis to
                represent non-linear sampling in this dimension.
                The number of points must be equal to <varname>zres</varname>.
                This component is present only if non-linear sampling is
                used.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </para>
  </sect2>
  <sect2 id='gwyfile-auxiliary-objects'>
    <title>Auxiliary Objects</title>
    <para>
      The components of a <type>GwySIUnit</type> are summarised in the following table:
    </para>
    <para>
      <informaltable id='table-gwyfile-GwySIUnit'>
        <tgroup cols='3' align='left'>
          <?dblatex llX?>
          <thead>
            <row>
              <entry>Component</entry>
              <entry>Type</entry>
              <entry>Meaning</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><literal>unitstr</literal></entry>
              <entry>string</entry>
              <entry>
                Textual representation of the unit, e.g. <literal>"A"</literal>
                or <literal>"m^-1"</literal> (as base SI unit, prefixes are ignored).
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </para>
    <para>
      The components of a <type>GwySelection</type> are summarised in the following table.
      Some selection types can have other data members; refer to the documentation of
      specific selection classes for how to interpret the data.
    </para>
    <para>
      <informaltable id='table-gwyfile-GwySelection'>
        <tgroup cols='3' align='left'>
          <?dblatex llX?>
          <thead>
            <row>
              <entry>Component</entry>
              <entry>Type</entry>
              <entry>Meaning</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><literal>max</literal></entry>
              <entry>32bit integer</entry>
              <entry>
                Maximum number of objects the selection can hold (this is the number
                set by <function>gwy_selection_set_max_objects()</function>).
              </entry>
            </row>
            <row>
              <entry><literal>data</literal></entry>
              <entry>array of doubles</entry>
              <entry>
                Selection data.  The number of items that form one selection object is
                determined by the selection type.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </para>
    <para>
      The components of a <type>GwyStringList</type> are summarised in the following table.
      Note if <type>GwyStringList</type>s are used to represent logs, the strings have a
      specific structure described above.
    </para>
    <para>
      <informaltable id='table-gwyfile-GwyStringList'>
        <tgroup cols='3' align='left'>
          <?dblatex llX?>
          <thead>
            <row>
              <entry>Component</entry>
              <entry>Type</entry>
              <entry>Meaning</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><literal>strings</literal></entry>
              <entry>array of strings</entry>
              <entry>
                List of string items.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </para>
  </sect2>
</sect1>
<!-- vim: set ts=2 sw=2 et : -->
