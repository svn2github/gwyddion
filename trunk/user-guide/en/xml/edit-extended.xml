<?xml version='1.0' encoding='utf-8'?>
<!-- @(#) $Id$ -->
<!DOCTYPE book PUBLIC '-//OASIS//DTD DocBook XML V4.5//EN'
               'http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd'>
<sect1 id='edit-extended' xmlns:xi='http://www.w3.org/2001/XInclude'>
  <title>Extended Data Edit</title>
  <para>
     This section presents extended modules designed for editing (correcting)
     SPM data. Using simple data editing tools presented in chapter
     <link linkend='editing-correction' endterm='editing-correction.title'/>
     it is possible to correct many local scanning defects that
     can be found on SPM images. There are also many error sources within SPM
     methods that lead to global errors, like low frequencies modulated on
     the data or data drift in the slow scanning axis.
  </para>
  <sect2 id='drift-compensation'>
    <title>Drift Compensation</title>
    <indexterm><primary>drift compensation</primary></indexterm>
    <para>
      <menuchoice>
        <guimenu>Data Process</guimenu>
        <guisubmenu>Correct Data</guisubmenu>
        <guimenuitem>Compensate Drift</guimenuitem>
      </menuchoice>
    </para>
    <para>
      Compensate Drift calculates and/or corrects drift in the fast scanning
      axis (horizontal).  This adverse effect can be caused by thermal
      effects or insufficient mechanical rigidity of the measuring device.
    </para>
    <para>
      The drift graph, which is one of possible outputs,
      represents the horizontal shift of individual rows compared to
      a reference row (which could be in principle chosen arbitrarily, in
      practice the zero shift is chosen to minimize the amount of data
      sticking out of the image after compensation), with the row
      <xi:include href="eqi-y.xml"/>-coordinate on the abscissa.
    </para>
    <para>
      The drift is determined in two steps:
      <orderedlist>
        <listitem>
          A mutual horizontal offset is estimated for each couple of rows not
          more distant than <guilabel>Search range</guilabel>.  It is
          estimated as the offset value giving the maximum mutual correlation
          of the two rows.  Thus a set of local row drift estimations is
          obtained (together with the maximum correlation scores providing
          an estimate of their actual similarity).
        </listitem>
        <listitem>
          Global offsets are calculated from the local ones.  At present the
          method is very simple as it seems sufficient in most cases: local
          drift derivatives are fitted for each row onto the local drift
          estimations and the global drift is then obtained by intergration
          (i.e. summing the local drifts).
        </listitem>
      </orderedlist>
    </para>
    <para>
      Option <guilabel>Exclude linear skew</guilabel> subtracts the linear
      term from the calculated drift, it can be useful when the image is
      anisotropic and its features are supposed to be oriented in a direction
      not paralled to the image sides.
    </para>
    <informalfigure id='fig-drift-correction'>
      <mediaobject>
        <imageobject>
          <imagedata fileref='drift-corrected-graph.png' format='PNG'/>
        </imageobject>
        <caption>
          Drift correction example:
          (a) original data exhibiting strong drift in the fast scan axis,
          (b) corrected data,
          (c) calculated drift graph.
        </caption>
      </mediaobject>
    </informalfigure>
  </sect2>
  <sect2 id='fft-filter-1d'>
    <title>1D FFT Filter</title>
    <indexterm>
      <primary>Fourier transform</primary>
      <secondary>1D filtering</secondary>
    </indexterm>
    <para>
      <menuchoice>
        <guimenu>Data Process</guimenu>
        <guisubmenu>Correct Data</guisubmenu>
        <guimenuitem>1D FFT Filtering</guimenuitem>
      </menuchoice>
    </para>
    <para>
      One excellent way of removing frequency based of noise from an image is
      to use Fourier filtering.  First, the Fourier transform of the image is
      calculated.  Next, a filter is applied to this transform.  Finally, the
      inverse transform is applied to obtain a filtered image.  Gwyddion uses
      the Fast Fourier Transform (or FFT) to make this intensive calculation
      much faster.
    </para>
    <para>
      Within the 1D FFT filter the frequencies that should be removed from
      spectrum (suppress type: null) or supressed to value of neighbouring
      frequencies (suppress type: suppress) can be selected by marking
      appropriate areas in the power spectrum graph. The selection can be
      inverted easily using the Filter type choice. 1D FFT filter can be used
      both for horizontal and vertical direction.
    </para>
  </sect2>
  <sect2 id='fft-filter-2d'>
    <title>2D FFT Filter</title>
    <indexterm>
      <primary>Fourier transform</primary>
      <secondary>2D filtering</secondary>
    </indexterm>
    <para>
      <menuchoice>
        <guimenu>Data Process</guimenu>
        <guisubmenu>Correct Data</guisubmenu>
        <guimenuitem>2D FFT Filtering</guimenuitem>
      </menuchoice>
    </para>
    <para>
     2D FFT filter acts similarly as the 1D variant (see above) but using 2D
     FFT transform. Therefore, the spatial frequencies that should be
     filtered must be selected in 2D using mask editor. As the frequencies
     are related to center of the image (corresponding to zero frequency),
     the mask can be snapped to the center (coordinate system origin) while
     being edited. There are also different display and output modes that are
     self-explanatory – image or FFT coefficients can be outputted by module
     (or both).
    </para>
  </sect2>
  <sect2 id='correct-affine'>
    <title>Affine Distortion</title>
    <indexterm>
       <primary>distortion in xy plane</primary>
       <secondary>affine</secondary>
     </indexterm>
    <para>
      <menuchoice>
        <guimenu>Data Process</guimenu>
        <guisubmenu>Correct Data</guisubmenu>
        <guimenuitem>Affine Distortion</guimenuitem>
      </menuchoice>
    </para>
    <para>
      Affine distortion in the horizontal plane caused by thermal drift is
      common for instance in STM.  If the image contains a regular strcutre,
      for instance an atomic lattice of known parameters, the distortion can
      be easily corrected using this function.
    </para>
    <para>
      The affine distortion correction requires to first select the distorted
      lattice in the image.  This is done by moving the lattice selection on
      the preview with mouse until it matches the regular features present in
      the image.  For images of periodic lattices, it is usually easier to
      select the lattice in the autocorrelation function image
      (<guilabel>2D ACF</guilabel>).
      Also, only a rough match needs to be found manually in this case.  Button
      <guibutton>Refine</guibutton> refines the selected lattice vectors to the
      nearest maxima in autocorrelation function with subpixel precision.
    </para>
    <para>
      The correct lengths of the lattice vectors
      <xi:include href="eqi-a_1.xml"/> and <xi:include href="eqi-a_2.xml"/>
      and the angle <xi:include href="eqi-phi.xml"/> between them, entered to
      the dialog, determine the affine transformation to perform.  A few common
      lattice types (such as HOPG surface) are offered predefined, but it is
      possible to enter arbitrary lengths and angle.
    </para>
    <informalfigure id='fig-affine-correction'>
      <mediaobject>
        <imageobject>
          <imagedata fileref='correct-affine.pdf' format='PDF'/>
        </imageobject>
        <imageobject>
          <imagedata fileref='correct-affine.png' format='PNG'/>
        </imageobject>
        <caption>
          Affine correction example:
          (a) original image exhibiting an affine distortion,
          (b) correction dialog with the lattice selected on the
              two-dimensional autocorrelation,
          (c) corrected image.
        </caption>
      </mediaobject>
    </informalfigure>
    <para>
      It should be noted that the correction method described above causes all
      lateral scale information in the image to be lost because the new lateral
      scale is fully determined by the correct lattice vectors.  This is
      usually the best option for STM images of known atomic lattices, however,
      for a general skew or affine correction it can be impractical.
      Therefore, the dialog offers three different scaling choices:
    </para>
    <variablelist>
      <varlistentry>
        <term>
          <guilabel>Exactly as specified</guilabel>
        </term>
        <listitem>
          <para>
            Lattice vectors in the corrected image will have the specified
            lenghts and angle between them.  Scale information of the original
            image is discarded completely.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <guilabel>Preserve area</guilabel>
        </term>
        <listitem>
          <para>
            Lattice vectors in the corrected image will have the specified
            ratio of lengths and angle between them.  However, the overall
            scale is calculated as to make the affine transformation
            area-preserving.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <guilabel>Preserve X scale</guilabel>
        </term>
        <listitem>
          <para>
            Lattice vectors in the corrected image will have the specified
            ratio of lengths and angle between them.  However, the overall
            scale is calculated as to make the affine transformation
            preserve the original <xi:include href="eqi-x.xml"/>-axis scale.
            This is somewhat analogous to the scale treatment in
            <link linkend='drift-compensation'>Drift compensation</link>.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </sect2>
  <sect2 id='polynomial-distort'>
    <title>Polynomial Distortion</title>
    <indexterm>
       <primary>distortion in xy plane</primary>
       <secondary>polynomial</secondary>
     </indexterm>
    <para>
      <menuchoice>
        <guimenu>Data Process</guimenu>
        <guisubmenu>Correct Data</guisubmenu>
        <guimenuitem>Polynomial Distortion</guimenuitem>
      </menuchoice>
    </para>
    <para>
      General distortion in the horizontal plane can be compensated, or
      created, with Polynomial distortion.  It performs transforms that
      can be expressed as
    </para>
    <xi:include href="eq-polynomial-distortion.xml"/>
    <para>
      where <xi:include href="eqi-P_x.xml"/> and
      <xi:include href="eqi-P_y.xml"/> are polynomials up to the third total
      order with user-defined coefficients.  Note the direction of the
      coordinate transform – the reverse direction would not guarantee an
      unambiguous mapping.
    </para>
    <para>
      The polynomial coefficients are entered as scale-free, i.e.
      as if the coordinate ranges were always [0, 1].  If
      <guilabel>Instant updates</guilabel> are enabled, pressing
      <keysym>Enter</keysym> in a coefficient entry (or just leaving moving
      keyboard focus elsewhere) updates the preview.
    </para>
  </sect2>
  <sect2 id='xy-denoise'>
    <title>XY denoising</title>
    <indexterm><primary>xy denoising</primary></indexterm>
    <para>
      <menuchoice>
        <guimenu>Data Process</guimenu>
        <guisubmenu>Multidata</guisubmenu>
        <guimenuitem>XY denoise</guimenuitem>
      </menuchoice>
    </para>
    <para>
      Calculates denoised image on the basis of two measurements of the same area
      - one performed in x direction and on in y direction (and rotated back to be aligned
      the same way as the x direction one). It is based on
      work of E. Anguiano and M. Aguilar (see [<link linkend='xy-denoise-ref-1'>1</link>]).
      Module performs FFT of both images, combines information from both images in reciprocal space, and then
      performs backward FFT in order to get denoised image. It is useful namely for large scars
      and fast scanning axis stripes removal.
    </para>
    <informalfigure id='fig-edit-extended-xy-denoise'>
    <mediaobject>
      <imageobject>
        <imagedata fileref='xydenoise.png' format='PNG'/>
      </imageobject>
      <caption>
        XY denoise procedure simulation: A) original data, B) simulated measurement in x axis,
        C) simulated measurement in y axis, D) denoised image.
      </caption>
    </mediaobject>
    </informalfigure>
  </sect2>
  <sect2 id='edit-extended-ref'>
    <title>References</title>
    <para id='xy-denoise-ref-1'>
      [1] <ulink url='http://dx.doi.org/10.1016/S0304-3991(98)00074-6'>
         E. Anguiano and M. Aguilar, Ultramicroscopy, 76 (1999) 47
      </ulink>
    </para>
  </sect2>

</sect1>
<!-- vim: set ts=2 sw=2 et : -->
