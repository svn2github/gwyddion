<?xml version='1.0' encoding='utf-8'?>
<!-- @(#) $Id$ -->
<!DOCTYPE book PUBLIC '-//OASIS//DTD DocBook XML V4.5//EN'
               'http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd'>
<sect1 id='installation-devel'>
  <title>Subversion Checkout, Development</title>
  <para>
    <application>Gwyddion</application> uses
    <ulink url='http://subversion.tigris.org/'>Subversion</ulink>
    version control system for source code revision management.  The
    organization of the repository is described
    <ulink url='http://gwyddion.net/resources.php#subversion'>on project
      web pages</ulink>.  For example the current head revision of
    the program itself can be checked out with
    <informalexample>
      <literallayout><userinput>svn checkout https://gwyddion.svn.sourceforge.net/svnroot/gwyddion/trunk/gwyddion</userinput></literallayout>
    </informalexample>
  </para>
  <para>
    The repository does not contain any generated files, no matter how
    exotic tools may be necessary to generate them.  Therefore, additional
    packages are required for building from a fresh checkout.  There are also
    certain platform limitations.  The additional tools and packages required
    for development are essentially the same as for compilation from
    <application>Subversion</application> checkout.  More precisely, to build
    from a fresh checkout all the additional tools are necessary, whereas
    development may require only a subset of them or even none, depending on
    the type and extent of the changes in the source code.
  </para>
  <itemizedlist>
    <title>Additional development build dependencies</title>
    <listitem>
      <ulink url='http://www.gnu.org/software/autoconf/'>GNU autoconf</ulink> ≥ 2.60
    </listitem>
    <listitem>
      <ulink url='http://www.gnu.org/software/automake/'>GNU automake</ulink> ≥ 1.11
    </listitem>
    <listitem>
      <ulink url='http://www.gnu.org/software/libtool/'>GNU libtool</ulink> ≥ 1.4
    </listitem>
    <listitem>
      <ulink url='http://www.python.org/'>Python</ulink> ≥ 2.2
    </listitem>
    <listitem>
      <ulink url='http://www.perl.org/'>Perl5</ulink>
    </listitem>
    <listitem>
      <ulink url='http://www.gtk.org/gtk-doc/'>gtk-doc</ulink> ≥ 1.12
    </listitem>
    <listitem>
      <ulink url='http://www.gnu.org/software/gettext/'>GNU gettext</ulink> ≥ 0.12, including development stuff
    </listitem>
    <listitem>
      probably GNU versions of most tools: the compiler, binutils, …
    </listitem>
  </itemizedlist>
  <para>
    After a fresh checkout, run <userinput>./autogen.sh</userinput> with
    any arguments you would give to <command>configure</command>.
    Note it automatically adds options <option>--enable-maintainer-mode</option>
    and <option>--enable-gtk-doc</option> to ensure the rules for creation and
    updates of various files are active.  Generally, you should always use
    <option>--enable-maintainer-mode</option> if you intend to change the
    program source code in a non-trivial way.
  </para>
  <para>
    On some systems, <command>autogen.sh</command> can fail even if you have
    sufficient versions of autotools installed.  These systems do not install
    general <command>autoconf</command> or <command>automake</command>
    commands, only versioned commands such as <command>autoconf261</command> or
    <command>automake19</command>.  This makes it particularly difficult to
    find for example <quote><command>automake</command> 1.9 or newer</quote>
    with no limit on how newer it can be.  Therefore,
    <command>autogen.sh</command> does not attempt this at all.  You can either
    create unversioned symbolic links to the versioned commands or run
    <command>autogen.sh</command> as follows:
    <informalexample>
      <userinput>
        AUTOCONF=autoconf261 AUTOHEADER=autoheader261 ./autogen.sh
      </userinput>
    </informalexample>
    You may need to set the following variables:
    <envar>ACLOCAL</envar>,
    <envar>AUTOCONF</envar>,
    <envar>AUTOHEADER</envar>,
    <envar>AUTOM4TE</envar>,
    <envar>AUTOMAKE</envar>,
    <envar>LIBTOOLIZE</envar>.
    In addition, some operating systems may install
    <command>autoconf</command> macros in a place
    <command>aclocal</command> does not find them by default.  This can
    be fixed by setting variable <envar>ACLOCAL_FLAGS</envar> to give
    <command>aclocal</command> additional search paths:
    <informalexample>
      <userinput>
        ACLOCAL_FLAGS="-I /usr/local/share/aclocal" ./autogen.sh
      </userinput>
    </informalexample>
  </para>
  <para>
    It is often necessary to combine these adjustments.
    For instance on FreeBSD, where all tools are versioned, one typically
    invokes (broken to lines for easier reading):
    <informalexample>
      <literallayout><userinput>AUTOCONF=autoconf261 \
AUTOHEADER=autoheader261 \
AUTOM4TE=autom4te261 \
AUTOMAKE=automake19 \
ACLOCAL=aclocal19 \
ACLOCAL_FLAGS="-I /usr/local/share/aclocal" \
CPPFLAGS=-I/usr/local/include \
LDFLAGS=-L/usr/local/lib \
./autogen.sh --prefix=<replaceable>...</replaceable></userinput></literallayout>
    </informalexample>
  </para>
  <para>
    If <command>autogen.sh</command> passes you can compile the program
    as usual.
  </para>
  <sect2 id='installation-devel-ms-windows'>
    <title>MS Windows</title>
    <para>
      Since the standard method to create MS Windows executables is
      cross-compilation in Linux the recommended method to develop for MS
      Windows is also to compile in Linux.  This can be done either on a
      different physical computer using <command>ssh</command> or in a virtual
      machine running on the same computer as the host MS Windows system.  In
      both cases the Gwyddion build directory (and other directories) can be
      shared between the Linux and MS Windows systems using either Samba or a
      shared directory mechanism of the virtual machine and the compiled
      executables thus can be directly tested in MS Windows without having to
      transfer files back and forth.
    </para>
  </sect2>
</sect1>
<!-- vim: set ts=2 sw=2 et : -->
