<?xml version='1.0' encoding='utf-8'?>
<!-- @(#) $Id$ -->
<!DOCTYPE book PUBLIC '-//OASIS//DTD DocBook XML V4.5//EN'
               'http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd'>
<sect1 id='installation-ms-windows-source'>
  <title>MS Windows from Source Code Tarball</title>
  <warning>
    <para>
      The last version of Gwyddion that can be built with MSVC6 is 2.22.
    </para>
  </warning>
  <para>
    <application>Gwyddion</application> MS Windows build system uses the
    <application>Microsoft Visual C++</application> (MSVC) compiler
    (version 6 is tested and recommended, albeit it is a bit older).  It
    primarily consists of a set of <command>nmake</command> makefiles,
    that is the compilation is done from the command line.  This approach
    has several advantages with respect to reproducibility and automation of
    the process. Furthermore, it enables easy synchronization of Unix and MS
    Windows build systems.  The necessity to use command line may be
    considered a disadvantage though you should find the compilation process
    quite simple even you are not used to use the command line much.
  </para>
  <para>
    In addition to MSVC you need to install Gtk+ development environment.
    Again, we recommend to use the
    <ulink url='http://downloads.sourceforge.net/gladewin32/gtk-dev-2.12.9-win32-2.exe'>GladeWin32</ulink>
    package.  Note it also contains the complete run-time environment,
    therefore you do not need to install the run-time package if you install
    the development one.
  </para>
  <sect2 id='installation-ms-windows-source-unpacking'>
    <title>Unpacking</title>
    <para>
      Unpack the source code tarball with your favorite (de)compression
      program or file manager. Tarballs compressed with
      <ulink url='http://www.bzip.org/'>bzip2</ulink>
      (<filename>.bz2</filename>)
      are considerably smaller than
      <ulink url='http://www.gzip.org/'>gzip</ulink> compressed tarballs
      (<filename>.gz</filename>), however support for bzip2 compression used
      to be less widespread than gzip compression support in MS Windows
      programs. Most recent programs support both, for example
      <ulink url='http://www.7-zip.org/'><application>7zip</application></ulink>
      which is also Free Software.
    </para>
    <para>
      The unpacking will create directory
      <filename>gwyddion-2.19</filename> (with 2.19 replaced with the actual
      version number) where all other compilation actions will take place.
    </para>
  </sect2>
  <sect2 id='installation-ms-windows-source-configuration'>
    <title>Configuration</title>
    <para>
      Open file <filename>make.msc</filename> in a text editor.  It starts
      approximately as follows:
    </para>
    <informalexample>
      <programlisting><![CDATA[
# @(#) $]]><![CDATA[Id: make.msc 8812 2008-12-02 08:49:22Z xhorak $
#
# XXX: Set following to your Gtk+-Development and MSVC paths
#
# The uncommented paths should work for default MSVC 6 installation and for
# default GladeWin32 installation.
# If you have GtkGLext separate from Gtk+, define GTKGLEXT_TOP accordingly.
# If you have LibXML2 separate from Gtk+, define LIBXML2_TOP accordingly.
GTK_TOP = C:\Gtk
GTKGLEXT_TOP = $(GTK_TOP)
LIBXML2_TOP = $(GTK_TOP)
#GTKGLEXT_TOP = C:\GtkGLExt\1.0
#LIBXML2_TOP = C:\libxml2
MSC_TOP = C:\Program Files\Microsoft Visual Studio\VC98
]]></programlisting>
    </informalexample>
    <para>
      Check and correct the paths according to the instructions.  Often,
      no modifications are necessary as the paths in the file represent the
      default installation directories of each program.
    </para>
    <variablelist>
      <varlistentry>
        <term><envar>GTK_TOP</envar></term>
        <listitem>
          It should point to the top-level directory of Gtk+ installation,
          that is the directory containing <filename>bin</filename>,
          <filename>lib</filename>, <filename>share</filename>, etc.
          subdirectories.  We will refer to its value as to
          <envar>$(GTK_TOP)</envar> below.
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><envar>GTKGLEXT_TOP</envar></term>
        <listitem>
          It should point to the corresponding top-level directory of
          GtkGLExt installation.  This differs from <envar>$(GTK_TOP)</envar>
          only if you do not use GladeWin32 and have installed
          GtkGLExt separately.
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><envar>LIBXML2_TOP</envar></term>
        <listitem>
          It should point to the corresponding top-level directory of
          LibXML2 installation.  This differs from <envar>$(GTK_TOP)</envar>
          only if you do not use GladeWin32 and have installed
          LibXML2 separately.
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><envar>MSC_TOP</envar></term>
        <listitem>
          It should point to the top-level directory of MSVC installation.
        </listitem>
      </varlistentry>
    </variablelist>
    <para>
      Run a shell (command line, MS-DOS prompt), switch to the source
      directory and run <command>vcvars32.bat</command> there.
      This batch file is provided by MSVC and sets certain environment
      variables the command-line compiler and linker require, it also
      makes them directly executable by setting <envar>PATH</envar>.  Note
      <command>vcvars32.bat</command> may not be in <envar>PATH</envar>
      itself but it should be easy to locate.
    </para>
  </sect2>
  <sect2 id='installation-ms-windows-source-compilation'>
    <title>Compilation</title>
    <para>
      Run
      <informalexample>
        <literallayout><userinput>nmake -f makefile.msc</userinput></literallayout>
      </informalexample>
      to compile Gwyddion and
      <informalexample>
        <literallayout><userinput>nmake -f makefile.msc install</userinput></literallayout>
      </informalexample>
      to install it into a staging area, namely subdirectory
      <filename>inst</filename> (created by this command).  If something
      goes wrong with the second step and you wish to start it again,
      remove directory <filename>inst</filename> and file
      <filename>inst.stamp</filename> first for a clean start.
    </para>
  </sect2>
  <sect2 id='installation-ms-windows-source-installation'>
    <title>Installation</title>
    <para>
      The layout of the staging area in <filename>inst</filename> exactly
      the same as of the final installation.  Therefore you can also run
      <application>Gwyddion</application> directly from it
      (<filename>gwyddion.exe</filename> is found directly in
      <filename>inst</filename>).  Except if you have never run
      <application>Gwyddion</application> before, it will not find the
      run-time Gtk+ libraries (DLLs) it needs.  Run
      <command>regedit</command>, create in
      <informalexample>
        <literal>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\Current Version\App Paths\Gwyddion.exe</literal>
      </informalexample>
      a string key <literal>Path</literal> and put
      <literal>$(GTK_TOP)\lib;$(GTK_TOP)\bin</literal> there (here again
      <envar>$(GTK_TOP)</envar> is to be replaced with the corresponding
      directory set in <filename>make.msc</filename>, do not put
      <quote><literal>$(GTK_TOP)</literal></quote> there literally).  If you
      have separate GtkGLExt and/or LibXML2, add also their
      <filename>lib</filename> and <filename>bin</filename> directories,
      separated by semicolons.  If you cannot edit global registry under
      <literal>HKEY_LOCAL_MACHINE</literal>, set the path under
      <literal>HKEY_CURRENT_USER</literal> for the current user only.
    </para>
    <para>
      Now you can either run <application>Gwyddion</application> from
      <filename>inst</filename> or copy the directory elsewhere, possibly
      renaming it.
    </para>
  </sect2>
  <sect2 id='installation-ms-windows-source-installers'>
    <title>Executable Installers</title>
    <para>
      To create an executable installer you need
      <ulink url='http://www.jrsoftware.org/isinfo.php'>Inno Setup</ulink>,
      version 4 or newer.  Open <filename>inst/gwyddion.iss</filename> and
      build the installer, it will create
      <filename>Gwyddion-2.19.exe</filename> (with 2.19 replaced with the
      actual version number), again in <filename>inst</filename>.  You can
      repeat this procedure with <filename>inst/gwyddion-devel.iss</filename>
      to obtain <filename>Gwyddion-Development-2.19.exe</filename>, should
      you ever need it.
    </para>
  </sect2>
</sect1>
