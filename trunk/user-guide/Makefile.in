export
.SECONDEXPANSION:

VERSION = @PACKAGE_VERSION@
BASENAME = @PACKAGE_TARNAME@
PACKAGE = @PACKAGE_SHORTNAME@
LANGUAGES = en fr
expand_langs = $(patsubst %,$(1),$(LANGUAGES))

GMAKE = @GMAKE@
GSED = @GSED@
PYTHON = @PYTHON@
XSLTPROC_CMD = @XSLTPROC@ --xinclude
DBLATEX_CMD = @DBLATEX@ --input-format=xml --texinputs=$(abspath .) --fig-path=images --xslt="@XSLTPROC@" --debug
INKSCAPE_CMD = @INKSCAPE@ --without-gui --export-area-drawing
#HTML2TXT = @LYNX@ -force_html -dump -nolist

DISTNAME = $(BASENAME)-$(VERSION)
DISTNAMEXHTML = $(BASENAME)-xhtml-$(VERSION)
MAIN_XML_SOURCE_en = xml_en/$(PACKAGE).xml
MAIN_XML_SOURCE_fr = xml_fr/$(PACKAGE).xml
XML_SOURCES_en := $(wildcard xml_en/*.xml)
XML_SOURCES_fr := $(wildcard xml_fr/*.xml)
IMAGES := $(shell $(PYTHON) xml-extract.py imageinfo $(XML_SOURCES_en)) PNG:stacked3.png
XHTML_IMAGES := $(patsubst PNG:%,%,$(filter PNG:%,$(IMAGES)))
PDF_IMAGES := $(patsubst PDF:%,%,$(filter PDF:%,$(IMAGES)))
PNG_IMAGES := $(filter-out eq-%.png,$(XHTML_IMAGES))
IMAGE_PNG_IMAGES := $(patsubst %,images/%,$(PNG_IMAGES))
IMAGE_PDF_IMAGES := $(patsubst %,images/%,$(PDF_IMAGES))
SVG_IMAGES = \
	boundary-length.svg \
	gaussian-acf.svg \
	gaussian-hhcf.svg \
	gaussian-psdf.svg \
	grain-bounding-dims.svg \
	inclination.svg \
	profile-interpolation.svg \
	step-edge.svg \
	surface-area-vertices.svg \
	unrotate-symmetries.svg \
	volume-pixel-weights.svg \
	wavelet-daubechies20.svg \
	wavelet-daubechies4.svg \
	wavelet-haar.svg \
	windowing-win.svg \
	windowing-fft.svg
PNG_SOURCE_IMAGES = \
	profile-interpolation-image.png
BUILT_IMAGES := $(patsubst %.svg,%.png,$(SVG_IMAGES)) $(patsubst %.svg,%.pdf,$(SVG_IMAGES))
DIST_IMAGES := $(filter-out $(BUILT_IMAGES),$(patsubst %,images/%,$(PNG_IMAGES) $(SVG_IMAGES) $(PNG_SOURCE_IMAGES)))
MAN_PAGES = gwyddion.1 gwyddion-thumbnailer.1

XSL_STYLES = xhtml.xsl dblatex.xsl man.xsl \
	version-greater-or-equal.xsl docbook-xsl-version.xsl
CSS_STYLES = user-guide.css
TEX_STYLES = user-guide.sty
BUILD_FILES = README Makefile.in user-guide.iss.in \
	aclocal.m4 configure configure.ac xml-extract.py

WORKDIRS = $(call expand_langs,xhtml_%) $(call expand_langs,pdf_%)

@HTML_TRUE@html_target = xhtml
@HTML_FALSE@html_target =
@PDF_TRUE@pdf_target = pdf
@PDF_FALSE@pdf_target =
@MAN_TRUE@man_target = man
@MAN_FALSE@man_target =

ALL_TARGETS = $(html_target) $(pdf_target) $(man_target)

all: $(ALL_TARGETS)

Makefile: Makefile.in ./config.status
	./config.status Makefile

pdf: $(call expand_langs,$(PACKAGE)-%.pdf)

@PDF_TRUE@$(PACKAGE)-%.pdf: $$(XML_SOURCES_$$*) $(IMAGE_PNG_IMAGES) $(IMAGE_PDF_IMAGES) $(TEX_STYLES) dblatex.xsl
@PDF_TRUE@	rm -rf pdf_$*
@PDF_TRUE@	mkdir pdf_$*
@PDF_TRUE@	$(DBLATEX_CMD) --tmpdir=pdf_$* --pdf --xsl-user=dblatex.xsl --output=$@ $(MAIN_XML_SOURCE_$*)

%.txt: %.html
	$(HTML2TXT) $< >$@

xhtml: $(call expand_langs,xhtml_%.stamp)

# FIXME: Avoid building if only images change.  Depend on CSS in xhtml too.
@HTML_TRUE@xhtml_%.stamp: formulas.stamp $$(XML_SOURCES_$$*) $(IMAGE_PNG_IMAGES) xhtml.xsl
@HTML_TRUE@	test -d xhtml_$* || mkdir xhtml_$*
@HTML_TRUE@	$(XSLTPROC_CMD) --stringparam base.dir xhtml_$*/ xhtml.xsl $(MAIN_XML_SOURCE_$*)
@HTML_TRUE@	$(GSED) -i -e 's#<html xmlns="[^"]*">#<html>#' xhtml_$*/*.html
@HTML_TRUE@	@cp formulas/eq-*.png xhtml_$*
@HTML_TRUE@	@cp $(patsubst %,images/%,$(PNG_IMAGES)) xhtml_$*
@HTML_TRUE@	cp user-guide.css xhtml_$*
@HTML_TRUE@	touch $@

formulas: formulas.stamp

@HTML_TRUE@formulas.stamp: xml-extract.py $(XML_SOURCES_en)
@HTML_TRUE@	$(PYTHON) xml-extract.py formulas $(XML_SOURCES_en)
@HTML_TRUE@	+cd ./formulas && $(GMAKE)
@HTML_TRUE@	touch $@

man: $(MAN_PAGES)

@MAN_TRUE@%.1: xml_en/%.xml
@MAN_TRUE@	$(XSLTPROC_CMD) man.xsl $<

@PNG_TRUE@fixpngres: fixpngres.c
@PNG_TRUE@	$(CC) @PNG_CFLAGS@ @PNG_LIBS@ -o fixpngres fixpngres.c

# XXX: The `cd images' trick is necessary as inkscape fails to save images into
# another directory
@SVG_TRUE@images/%.png: images/%.svg
@SVG_TRUE@	cd images && \
@SVG_TRUE@	    $(INKSCAPE_CMD) --export-dpi=150 --export-background=white \
@SVG_TRUE@	        --export-png="$*.png" --file="$*.svg"

@SVG_TRUE@images/%.pdf: images/%.svg
@SVG_TRUE@	cd images && \
@SVG_TRUE@	    $(INKSCAPE_CMD) --export-pdf="$*.pdf" --file="$*.svg"

clean:
	+cd ./formulas && $(GMAKE) clean
	-rm -f $(patsubst %,images/%,$(BUILT_IMAGES))
	-rm -rf $(WORKDIRS) xml/*~
	-rm -f $(call expand_langs,$(PACKAGE)-%.pdf) *.stamp fixpngres *~
	-rm -f $(MAN_PAGES)

distclean: clean
	+cd ./formulas && $(GMAKE) distclean
	-rm -fr Makefile config.status config.log autom4te.cache user-guide.iss

dist:
	-rm -rf $(DISTNAME)
	mkdir $(DISTNAME) $(call expand_langs,$(DISTNAME)/xml_%) $(DISTNAME)/images
	cp $(BUILD_FILES) $(XSL_STYLES) $(CSS_STYLES) $(TEX_STYLES) $(DISTNAME)
	cp $(DIST_IMAGES) $(DISTNAME)/images
	cp $(XML_SOURCES_en) $(DISTNAME)/xml_en
	cp $(XML_SOURCES_fr) $(DISTNAME)/xml_fr
	+cd ./formulas && $(GMAKE) dist
	tar -zcf $(DISTNAME).tar.gz $(DISTNAME)
	rm -rf $(DISTNAME)

dist-xhtml: xhtml.stamp $(patsubst %,xhtml/%,$(XHTML_IMAGES))
	-rm -rf $(DISTNAMEXHTML)
	cp -R xhtml $(DISTNAMEXHTML)
	cp user-guide.iss $(DISTNAMEXHTML)
	chmod a+rx $(DISTNAMEXHTML)
	chmod a+r $(DISTNAMEXHTML)/*
	tar -zcf $(DISTNAMEXHTML).tar.gz $(DISTNAMEXHTML)
	-rm -rf $(DISTNAMEXHTML)

dist-pdf: pdf
	cp -f user-guide.pdf $(DISTNAME).pdf

version:
	d=`date --iso`; \
	$(GSED) -i '/AC_INIT/s/[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}/'"$$d/" configure.ac; \
	$(GSED) -i 's/\(^ *Version\) [0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}/\1 '"$$d/" xml/user-guide.xml
	autoconf && ./configure

help:
	@echo "all          Compile User guide to all available formats ($(ALL_TARGETS))"
@HTML_TRUE@	@echo "xhtml        Compile User guide to XHTML"
@HTML_FALSE@	@echo "xhtml        Compile User guide to XHTML (not available)"
@PDF_TRUE@	@echo "pdf          Compile User guide to PDF"
@PDF_FALSE@	@echo "pdf          Compile User guide to PDF (not available)"
@MAN_TRUE@	@echo "man          Compile Unix manual pages for commands"
@MAN_FALSE@	@echo "man          Compile Unix manual pages for commands (not available)"
	@echo "dist         Create tarball with DocBook sources"
	@echo "dist-xhtml   Create tarball with ready to read XHTML User guide"
@PNG_TRUE@	@echo "fixpngres    Build fixpngres tool"
@PNG_FALSE@	@echo "fixpngres    Build fixpngres tool (not available)"
	@echo "version      Update version number to current date"

.PHONY: all clean dist pdf xhtml formulas dist-xhtml help version distclean
.PRECIOUS: Makefile

# vim: set ts=4 sw=4 noet :
