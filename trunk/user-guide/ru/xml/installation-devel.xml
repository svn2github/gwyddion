<?xml version="1.0" encoding="utf-8"?>
<!-- @(#) $Id$ -->
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<sect1 id="installation-devel">
  <title>Снимок Subversion, Разработка</title>
  <para><application>Gwyddion</application> использует систему контроля версий <ulink url="http://subversion.tigris.org/">Subversion</ulink> для управления ревизиями исходного кода. Организация репозитория описана на <ulink url="http://gwyddion.net/resources.php#subversion">страницах проекта</ulink>.  Например, последнюю ревизию самой программы можно получить из системы контроля версий командой <informalexample><literallayout><userinput>svn checkout https://gwyddion.svn.sourceforge.net/svnroot/gwyddion/trunk/gwyddion</userinput></literallayout></informalexample></para>
  <para>Репозиторий не содержит никаких генерируемых файлов, независимо от того, насколько экзотичные инструменты могут понадобиться для их генерации. Следовательно, требуется использование дополнительных пакетов, что накладывает определённые ограничения на выбор определённой платформы. Дополнительные инструменты и пакеты которые нужны для разработки те же. что нужны при сборке из снимка <application>Subversion</application>. Точнее, все инструменты нужны для сборки из свежего снимка, в то время, как разработка может требовать только их подмножество или вообще не требовать, в зависимости от типа и масштаба изменений.</para>
  <itemizedlist>
    <title>Дополнительные зависимости сборки версии для разработчиков</title>
    <listitem><ulink url="http://www.gnu.org/software/autoconf/">GNU autoconf</ulink> ≥ 2.60</listitem>
    <listitem><ulink url="http://www.gnu.org/software/automake/">GNU automake</ulink> ≥ 1.7</listitem>
    <listitem><ulink url="http://www.gnu.org/software/libtool/">GNU libtool</ulink> ≥ 1.4</listitem>
    <listitem><ulink url="http://www.python.org/">Python</ulink> ≥ 2.2</listitem>
    <listitem>
      <ulink url="http://www.perl.org/">Perl5</ulink>
    </listitem>
    <listitem><ulink url="http://www.gtk.org/gtk-doc/">gtk-doc</ulink> ≥ 1.8</listitem>
    <listitem><ulink url="http://www.gnu.org/software/gettext/">GNU gettext</ulink> ≥ 0.12, включая средства для разработки</listitem>
    <listitem>скорее всего версии GNU для большинства инструментов: компилятор, binutils, …</listitem>
  </itemizedlist>
  <sect2 id="installation-devel-unix">
    <title>Linux/Unix</title>
    <para>После загрузки свежего снимка, запустите <userinput>./autogen.sh</userinput> с теми же аргументами, которые вы хотели бы передать <command>configure</command>. Следует отметить. что автоматически добавляется опция <option>--enable-maintainer-mode</option>, которая включает правила <command>make</command> для создания и обновления файлов, которые распространяются внутри архива с исходным кодом (и, следовательно, не генерируются в ходе нормальной компиляции). В общем случае нужно использовать эту опцию <command>configure</command> каждый раз, когда вы собираетесь изменить программу нетривиальным путём.</para>
    <para><command>autogen.sh</command> может закончиться с ошибкой даже если у вас установлены требуемые версии autotools. Некоторые операционные системы не устанавливают общие команды <command>autoconf</command> или <command>automake</command>, а делят их на версии, вроде <command>autoconf261</command> или <command>automake19</command>. Это делает особенно трудным обнаружить, например <quote><command>automake</command> 1.9 или новее </quote> и, следовательно, <command>autogen.sh</command> даже не пытается этого сделать. Можно или создать не содержащие версий символические ссылки на команды с версиями или запустить <command>autogen.sh</command> следующим образом: <informalexample><userinput> AUTOCONF=autoconf261 AUTOHEADER=autoheader261 ./autogen.sh </userinput></informalexample> Может потребоваться установка следующих переменных: <envar>ACLOCAL</envar>, <envar>AUTOCONF</envar>, <envar>AUTOHEADER</envar>, <envar>AUTOM4TE</envar>, <envar>AUTOMAKE</envar>, <envar>LIBTOOLIZE</envar>. Дополнительно, некоторые операционные системы могут засунуть макрос <command>autoconf</command> в такое место, где <command>aclocal</command> по умолчанию их не найдёт. Это может быть исправлено установкой переменной <envar>ACLOCAL_FLAGS</envar>, где будут указаны дополнительные пути поиска для <command>aclocal</command>: <informalexample><userinput> ACLOCAL_FLAGS="-I /usr/local/share/aclocal" ./autogen.sh </userinput></informalexample></para>
    <para>Нередко требуется комбинировать эти настройки. Например, на FreeBSD, где все инструменты разделены по версиям, обычно требуется выполнить (разбито на строки для простоты чтения):<informalexample><literallayout><userinput>AUTOCONF=autoconf261 \ AUTOHEADER=autoheader261 \ AUTOM4TE=autom4te261 \ AUTOMAKE=automake19 \ ACLOCAL=aclocal19 \ ACLOCAL_FLAGS="-I /usr/local/share/aclocal" \ CPPFLAGS=-I/usr/local/include \ LDFLAGS=-L/usr/local/lib \ ./autogen.sh --prefix=<replaceable>...</replaceable></userinput></literallayout></informalexample></para>
    <para>Если <command>autogen.sh</command> заканчивается удачно, далее программу можно собирать как обычно. Тем не менее, ещё необходимо создать ряд вещей.</para>
    <para>Документация разработчика генерируется командой <userinput>make docs</userinput>. Это тоже надо делать явным образом, документация никогда не (пере)создаётся автоматически, опция <option>--enable-gtk-doc</option> команды <command>configure</command> только добавляет цель <literal>docs</literal> (эта опция включена по умолчанию, следовательно цель <literal>docs</literal> становится доступна, если в системе обнаруживается <application>gtk-doc</application>).</para>
    <para>Файлы MSVC генерируются командой <userinput>./utils/update-msvc.py</userinput>, которую нужно запускать из каталога верхнего уровня с исходным кодом (если интерпретатор Python установлен не в <filename>/usr/bin</filename>, запускайте его командой  <userinput>python ./utils/update-msvc.py</userinput>). Этот инструмент занимается синхронизацией файлов сборки MSVC и других с файлами Unix, которые берутся за первичный источник. Точнее, <command>update-msvc.py</command> считывает <itemizedlist>
        <listitem>список исходных и заголовочных файлов, модулей, библиотек и фалов данных из <filename>Makefile.am</filename></listitem>
        <listitem>собранные библиотеки в каталогах <filename>.libs</filename></listitem>
        <listitem>созданные <command>gcc</command> зависимости сборки в каталогах <filename>.deps</filename></listitem>
        <listitem>файлы шаблонов, которые нужно запомнить, они имеют расширение <filename>.gwt</filename>, например, <filename>makefile.msc.gwt</filename>– шаблон для <filename>makefile.msc</filename></listitem>
      </itemizedlist> и записывает <itemizedlist>
        <listitem>заполненные файлы шаблонов (а именно makefiles)</listitem>
        <listitem>файлы <filename>.def</filename> со списком экспортируемых символов из отдельных библиотек</listitem>
      </itemizedlist> Очевидно, что нужно сначала провести полную сборку проекта (со всеми включенными опциональными возможностями) чтобы правильно создать эти файлы.</para>
    <para>Можно считать <command>update-msvc.py</command> простым специализированным automake, поскольку его основной задачей является генерация файлов make из <filename>Makefile.am</filename>.</para>
  </sect2>
  <sect2 id="installation-devel-ms-windows">
    <title>MS Windows</title>
    <para>Как можно видеть из предыдущего раздела, прямая сборка из снимка <application>Subversion</application> невозможна под MS Windows, поскольку некоторые из фалов нельзя сгенерировать на этой платформе. Разработка в принципе возможна, хотя определённые изменения,а именно добавление новых фалов и переделки потребуют изменения файлов вручную там, где они автоматически генерируются в системах Unix.</para>
    <para>К счастью, доступно большое число свободных unixоподобных систем, например, различные дистрибутивы GNU/Linux. В наиболее неудачном случае можно использовать такую систему для получения файлов, создать все необходимые файлы, сделать архив и перенести его на MS Windows. Это будет эквивалентно использованию ночных снимков репозитория, если не считать того, что архивы можно сгенерировать в любое время.</para>
    <para>Тем не менее, также возможно и гораздо более удобно собирать на MS Windows в том же самом каталоге, что и на системе GNU/Linux. Для этого требуется только сделать каталог сборки (обычно в домашнем каталоге) общим с системой Windows используя Samba. Система GNU/Linux может запускаться или на другом физическом компьютере, или в виртуальной машине на том же самом, например внутри VMware player (или наоборот, с MS Windows внутри виртуальной машины, но это не является целью данного раздела). </para>
    <para>При сборке под несколько разных операционных систем из одного каталога, некоторое внимание должно уделяться избежанию ошибок, связанных с использованием файлов для другой операционной системы. К счастью, единственными файлами. которые являются общими для систем сборки под Unix и MS Windows являются конфигурационные заголовочные файлы <filename>config.h</filename> и <filename>gwyconfig.h</filename>. Чтобы обновить после переключения на MS Windows, просто удалите их, они будут воссозданы в процессе сборки. Чтобы обновить их после переключения на GNU/Linux, запустите <userinput>./config.status</userinput>.</para>
  </sect2>
</sect1>
