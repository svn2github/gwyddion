/* This is a GENERATED file */

#include <Python.h>



#line 25 "./pygwy.override"
#include <Python.h>
#include <pygobject.h>
#include <pygtk/pygtk.h>
#include <libprocess/gwyprocess.h>
#include <libgwyddion/gwyddion.h>
#include <libprocess/cdline.h>
#include <libprocess/hough.h>
#include <libprocess/tip.h>
#include <libgwymodule/gwymodule.h>
#include <libgwymodule/gwymodule-process.h>
#include <libdraw/gwygradient.h>
#include <libdraw/gwyglmaterial.h>
#include <libdraw/gwypixfield.h>
#include <libdraw/gwydraw.h>
#include <libgwydgets/gwy3dlabel.h>
#include <libgwydgets/gwy3dsetup.h>
#include <libgwydgets/gwy3dview.h>
#include <libgwydgets/gwy3dwindow.h>
#include <libgwydgets/gwyaxisdialog.h>
#include <libgwydgets/gwyaxis.h>
#include <libgwydgets/gwycoloraxis.h>
#include <libgwydgets/gwycolorbutton.h>
#include <libgwydgets/gwycombobox.h>
#include <libgwydgets/gwycurve.h>
#include <libgwydgets/gwydataview.h>
#include <libgwydgets/gwydataviewlayer.h>
#include <libgwydgets/gwydatawindow.h>
#include <libgwydgets/gwydgetenums.h>
#include <libgwydgets/gwydgetmarshals.h>
#include <libgwydgets/gwydgets.h>
#include <libgwydgets/gwydgettypes.h>
#include <libgwydgets/gwydgetutils.h>
#include <libgwydgets/gwygraphareadialog.h>
#include <libgwydgets/gwygrapharea.h>
#include <libgwydgets/gwygraphbasics.h>
#include <libgwydgets/gwygraphcorner.h>
#include <libgwydgets/gwygraphcurvemodel.h>
#include <libgwydgets/gwygraphcurves.h>
#include <libgwydgets/gwygraphdata.h>
#include <libgwydgets/gwygraph.h>
#include <libgwydgets/gwygraphlabeldialog.h>
#include <libgwydgets/gwygraphlabel.h>
#include <libgwydgets/gwygraphmodel.h>
#include <libgwydgets/gwygraphselections.h>
#include <libgwydgets/gwygraphwindow.h>
#include <libgwydgets/gwygraphwindowmeasuredialog.h>
#include <libgwydgets/gwyhmarkerbox.h>
#include <libgwydgets/gwyhruler.h>
#include <libgwydgets/gwyinventorystore.h>
#include <libgwydgets/gwylayer-basic.h>
#include <libgwydgets/gwylayer-mask.h>
#include <libgwydgets/gwymarkerbox.h>
#include <libgwydgets/gwynullstore.h>
#include <libgwydgets/gwyoptionmenus.h>
#include <libgwydgets/gwypixmaplayer.h>
#include <libgwydgets/gwyradiobuttons.h>
#include <libgwydgets/gwyruler.h>
#include <libgwydgets/gwyscitext.h>
#include <libgwydgets/gwyselectiongraph1darea.h>
#include <libgwydgets/gwyselectiongrapharea.h>
#include <libgwydgets/gwyselectiongraphline.h>
#include <libgwydgets/gwyselectiongraphpoint.h>
#include <libgwydgets/gwyselectiongraphzoom.h>
#include <libgwydgets/gwysensitivitygroup.h>
#include <libgwydgets/gwyshader.h>
#include <libgwydgets/gwystatusbar.h>
#include <libgwydgets/gwystock.h>
#include <libgwydgets/gwyvectorlayer.h>
#include <libgwydgets/gwyvruler.h>
#include <app/gwymoduleutils-file.h>
#include <app/gwymoduleutils.h>

typedef gdouble ArrayOfGDoubleNullTerminated;
typedef gint GIntValue;
typedef gdouble GDoubleValue;
typedef gdouble GDoubleArray;
typedef gdouble GDoubleArrayToFill;
typedef gchar keep_gchar;       // do not delete when returning
typedef gchar pass_owner_gchar; // do not delete in wrapped function

// ##include "pywrap.h"
#line 90 "pygwywrap.c"


/* ---------- types from other modules ---------- */
static PyTypeObject *_PyGObject_Type;
#define PyGObject_Type (*_PyGObject_Type)
static PyTypeObject *_PyGtkTable_Type;
#define PyGtkTable_Type (*_PyGtkTable_Type)
static PyTypeObject *_PyGtkWidget_Type;
#define PyGtkWidget_Type (*_PyGtkWidget_Type)
static PyTypeObject *_PyGtkDialog_Type;
#define PyGtkDialog_Type (*_PyGtkDialog_Type)
static PyTypeObject *_PyGtkButton_Type;
#define PyGtkButton_Type (*_PyGtkButton_Type)
static PyTypeObject *_PyGtkDrawingArea_Type;
#define PyGtkDrawingArea_Type (*_PyGtkDrawingArea_Type)
static PyTypeObject *_PyGtkObject_Type;
#define PyGtkObject_Type (*_PyGtkObject_Type)
static PyTypeObject *_PyGtkWindow_Type;
#define PyGtkWindow_Type (*_PyGtkWindow_Type)
static PyTypeObject *_PyGtkLayout_Type;
#define PyGtkLayout_Type (*_PyGtkLayout_Type)
static PyTypeObject *_PyGtkTreeView_Type;
#define PyGtkTreeView_Type (*_PyGtkTreeView_Type)
static PyTypeObject *_PyGtkVBox_Type;
#define PyGtkVBox_Type (*_PyGtkVBox_Type)
static PyTypeObject *_PyGtkStatusbar_Type;
#define PyGtkStatusbar_Type (*_PyGtkStatusbar_Type)
static PyTypeObject *_PyGtkComboBox_Type;
#define PyGtkComboBox_Type (*_PyGtkComboBox_Type)
static PyTypeObject *_PyGtkTooltips_Type;
#define PyGtkTooltips_Type (*_PyGtkTooltips_Type)
static PyTypeObject *_PyGtkOrientation_Type;
#define PyGtkOrientation_Type (*_PyGtkOrientation_Type)
static PyTypeObject *_PyGtkPositionType_Type;
#define PyGtkPositionType_Type (*_PyGtkPositionType_Type)
static PyTypeObject *_PyGtkTreeIter_Type;
#define PyGtkTreeIter_Type (*_PyGtkTreeIter_Type)
static PyTypeObject *_PyGtkListStore_Type;
#define PyGtkListStore_Type (*_PyGtkListStore_Type)
static PyTypeObject *_PyGtkUpdateType_Type;
#define PyGtkUpdateType_Type (*_PyGtkUpdateType_Type)
static PyTypeObject *_PyGdkDrawable_Type;
#define PyGdkDrawable_Type (*_PyGdkDrawable_Type)
static PyTypeObject *_PyGdkPixbuf_Type;
#define PyGdkPixbuf_Type (*_PyGdkPixbuf_Type)
static PyTypeObject *_PyGdkGC_Type;
#define PyGdkGC_Type (*_PyGdkGC_Type)
static PyTypeObject *_PyGdkLineStyle_Type;
#define PyGdkLineStyle_Type (*_PyGdkLineStyle_Type)


/* ---------- forward type declarations ---------- */
PyTypeObject G_GNUC_INTERNAL PyGwyAxis_Type;
PyTypeObject G_GNUC_INTERNAL PyGwyColorAxis_Type;
PyTypeObject G_GNUC_INTERNAL PyGwyColorButton_Type;
PyTypeObject G_GNUC_INTERNAL PyGwyContainer_Type;
PyTypeObject G_GNUC_INTERNAL PyGwyCurve_Type;
PyTypeObject G_GNUC_INTERNAL PyGwyDataField_Type;
PyTypeObject G_GNUC_INTERNAL PyGwyDataLine_Type;
PyTypeObject G_GNUC_INTERNAL PyGwyDataView_Type;
PyTypeObject G_GNUC_INTERNAL PyGwyDataViewLayer_Type;
PyTypeObject G_GNUC_INTERNAL PyGwyDataWindow_Type;
PyTypeObject G_GNUC_INTERNAL PyGwyGraph_Type;
PyTypeObject G_GNUC_INTERNAL PyGwyGraphArea_Type;
PyTypeObject G_GNUC_INTERNAL PyGwyGraphCorner_Type;
PyTypeObject G_GNUC_INTERNAL PyGwyGraphCurveModel_Type;
PyTypeObject G_GNUC_INTERNAL PyGwyGraphCurves_Type;
PyTypeObject G_GNUC_INTERNAL PyGwyGraphData_Type;
PyTypeObject G_GNUC_INTERNAL PyGwyGraphLabel_Type;
PyTypeObject G_GNUC_INTERNAL PyGwyGraphModel_Type;
PyTypeObject G_GNUC_INTERNAL PyGwyGraphWindow_Type;
PyTypeObject G_GNUC_INTERNAL PyGwyInventory_Type;
PyTypeObject G_GNUC_INTERNAL PyGwyInventoryStore_Type;
PyTypeObject G_GNUC_INTERNAL PyGwyMarkerBox_Type;
PyTypeObject G_GNUC_INTERNAL PyGwyHMarkerBox_Type;
PyTypeObject G_GNUC_INTERNAL PyGwyNullStore_Type;
PyTypeObject G_GNUC_INTERNAL PyGwyPixmapLayer_Type;
PyTypeObject G_GNUC_INTERNAL PyGwyLayerMask_Type;
PyTypeObject G_GNUC_INTERNAL PyGwyLayerBasic_Type;
PyTypeObject G_GNUC_INTERNAL PyGwyResource_Type;
PyTypeObject G_GNUC_INTERNAL PyGwyNLFitPreset_Type;
PyTypeObject G_GNUC_INTERNAL PyGwyFDCurvePreset_Type;
PyTypeObject G_GNUC_INTERNAL PyGwyGradient_Type;
PyTypeObject G_GNUC_INTERNAL PyGwyGLMaterial_Type;
PyTypeObject G_GNUC_INTERNAL PyGwyCDLine_Type;
PyTypeObject G_GNUC_INTERNAL PyGwyResourceEditor_Type;
PyTypeObject G_GNUC_INTERNAL PyGwyRuler_Type;
PyTypeObject G_GNUC_INTERNAL PyGwyHRuler_Type;
PyTypeObject G_GNUC_INTERNAL PyGwySIUnit_Type;
PyTypeObject G_GNUC_INTERNAL PyGwySciText_Type;
PyTypeObject G_GNUC_INTERNAL PyGwySelection_Type;
PyTypeObject G_GNUC_INTERNAL PyGwySelectionGraph1DArea_Type;
PyTypeObject G_GNUC_INTERNAL PyGwySelectionGraphArea_Type;
PyTypeObject G_GNUC_INTERNAL PyGwySelectionGraphLine_Type;
PyTypeObject G_GNUC_INTERNAL PyGwySelectionGraphPoint_Type;
PyTypeObject G_GNUC_INTERNAL PyGwySelectionGraphZoom_Type;
PyTypeObject G_GNUC_INTERNAL PyGwySensitivityGroup_Type;
PyTypeObject G_GNUC_INTERNAL PyGwyShader_Type;
PyTypeObject G_GNUC_INTERNAL PyGwySpectra_Type;
PyTypeObject G_GNUC_INTERNAL PyGwyStatusbar_Type;
PyTypeObject G_GNUC_INTERNAL PyGwyStringList_Type;
PyTypeObject G_GNUC_INTERNAL PyGwyVRuler_Type;
PyTypeObject G_GNUC_INTERNAL PyGwyVectorLayer_Type;

#line 195 "pygwywrap.c"



/* ----------- GwyAxis ----------- */

static int
_wrap_gwy_axis_new(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "orientation", NULL };
    int orientation;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:GwyAxis.__init__", kwlist, &orientation))
        return -1;
    self->obj = (GObject *)gwy_axis_new(orientation);

    if (!self->obj) {
        PyErr_SetString(PyExc_RuntimeError, "could not create GwyAxis object");
        return -1;
    }
    pygobject_register_wrapper((PyObject *)self);
    return 0;
}

static PyObject *
_wrap_gwy_axis_set_logarithmic(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "is_logarithmic", NULL };
    int is_logarithmic;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:GwyAxis.set_logarithmic", kwlist, &is_logarithmic))
        return NULL;
    
    gwy_axis_set_logarithmic(GWY_AXIS(self->obj), is_logarithmic);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_axis_set_visible(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "is_visible", NULL };
    int is_visible;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:GwyAxis.set_visible", kwlist, &is_visible))
        return NULL;
    
    gwy_axis_set_visible(GWY_AXIS(self->obj), is_visible);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_axis_is_visible(PyGObject *self)
{
    int ret;

    
    ret = gwy_axis_is_visible(GWY_AXIS(self->obj));
    
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_axis_is_logarithmic(PyGObject *self)
{
    int ret;

    
    ret = gwy_axis_is_logarithmic(GWY_AXIS(self->obj));
    
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_axis_get_orientation(PyGObject *self)
{
    gint ret;

    
    ret = gwy_axis_get_orientation(GWY_AXIS(self->obj));
    
    return pyg_enum_from_gtype(GTK_TYPE_POSITION_TYPE, ret);
}

static PyObject *
_wrap_gwy_axis_set_auto(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "is_auto", NULL };
    int is_auto;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:GwyAxis.set_auto", kwlist, &is_auto))
        return NULL;
    
    gwy_axis_set_auto(GWY_AXIS(self->obj), is_auto);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_axis_request_range(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "min", "max", NULL };
    double min, max;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"dd:GwyAxis.request_range", kwlist, &min, &max))
        return NULL;
    
    gwy_axis_request_range(GWY_AXIS(self->obj), min, max);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_axis_get_range(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "min", "max", NULL };
    PyObject *min_pyobj, *max_pyobj;
    GDoubleValue min, max;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"OO:GwyAxis.get_range", kwlist, &min_pyobj, &max_pyobj))
        return NULL;
    if (!PyFloat_Check(min_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'min' must be a float variable");
        return NULL;
    }
    min = PyFloat_AsDouble(min_pyobj);
    if (!PyFloat_Check(max_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'max' must be a float variable");
        return NULL;
    }
    max = PyFloat_AsDouble(max_pyobj);
    
    gwy_axis_get_range(GWY_AXIS(self->obj), &min, &max);
    
    ((PyFloatObject *) min_pyobj)->ob_fval = min;
    ((PyFloatObject *) max_pyobj)->ob_fval = max;
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_axis_get_requested_range(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "min", "max", NULL };
    PyObject *min_pyobj, *max_pyobj;
    GDoubleValue min, max;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"OO:GwyAxis.get_requested_range", kwlist, &min_pyobj, &max_pyobj))
        return NULL;
    if (!PyFloat_Check(min_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'min' must be a float variable");
        return NULL;
    }
    min = PyFloat_AsDouble(min_pyobj);
    if (!PyFloat_Check(max_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'max' must be a float variable");
        return NULL;
    }
    max = PyFloat_AsDouble(max_pyobj);
    
    gwy_axis_get_requested_range(GWY_AXIS(self->obj), &min, &max);
    
    ((PyFloatObject *) min_pyobj)->ob_fval = min;
    ((PyFloatObject *) max_pyobj)->ob_fval = max;
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_axis_get_magnification(PyGObject *self)
{
    double ret;

    
    ret = gwy_axis_get_magnification(GWY_AXIS(self->obj));
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_axis_get_magnification_string(PyGObject *self)
{
    const gchar *ret;

    
    ret = gwy_axis_get_magnification_string(GWY_AXIS(self->obj));
    
    if (ret)
        return PyString_FromString(ret);
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_axis_set_label(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "label", NULL };
    char *label;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:GwyAxis.set_label", kwlist, &label))
        return NULL;
    
    gwy_axis_set_label(GWY_AXIS(self->obj), label);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_axis_get_label(PyGObject *self)
{
    const gchar *ret;

    
    ret = gwy_axis_get_label(GWY_AXIS(self->obj));
    
    if (ret)
        return PyString_FromString(ret);
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_axis_set_si_unit(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "unit", NULL };
    PyGObject *unit;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:GwyAxis.set_si_unit", kwlist, &PyGwySIUnit_Type, &unit))
        return NULL;
    
    gwy_axis_set_si_unit(GWY_AXIS(self->obj), GWY_SI_UNIT(unit->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_axis_enable_label_edit(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "enable", NULL };
    int enable;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:GwyAxis.enable_label_edit", kwlist, &enable))
        return NULL;
    
    gwy_axis_enable_label_edit(GWY_AXIS(self->obj), enable);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_axis_draw_on_drawable(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "drawable", "gc", "xmin", "ymin", "width", "height", NULL };
    PyGObject *drawable, *gc;
    int xmin, ymin, width, height;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!iiii:GwyAxis.draw_on_drawable", kwlist, &PyGdkDrawable_Type, &drawable, &PyGdkGC_Type, &gc, &xmin, &ymin, &width, &height))
        return NULL;
    
    gwy_axis_draw_on_drawable(GWY_AXIS(self->obj), GDK_DRAWABLE(drawable->obj), GDK_GC(gc->obj), xmin, ymin, width, height);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_axis_get_major_ticks(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "nticks", NULL };
    PyObject *nticks_pyobj;
    GIntValue nticks;
    gdouble *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O:GwyAxis.get_major_ticks", kwlist, &nticks_pyobj))
        return NULL;
    if (!PyInt_Check(nticks_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'nticks' must be an integer variable");
        return NULL;
    }
    nticks = (int) PyInt_AsLong(nticks_pyobj);
    
    ret = gwy_axis_get_major_ticks(GWY_AXIS(self->obj), &nticks);
    
    ((PyIntObject *) nticks_pyobj)->ob_ival = nticks;
    PyErr_SetString(PyExc_NotImplementedError, "Return type 'const-gdouble*' not supported");
    return NULL;
}

static const PyMethodDef _PyGwyAxis_methods[] = {
    { "set_logarithmic", (PyCFunction)_wrap_gwy_axis_set_logarithmic, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "set_visible", (PyCFunction)_wrap_gwy_axis_set_visible, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "is_visible", (PyCFunction)_wrap_gwy_axis_is_visible, METH_NOARGS,
      NULL },
    { "is_logarithmic", (PyCFunction)_wrap_gwy_axis_is_logarithmic, METH_NOARGS,
      NULL },
    { "get_orientation", (PyCFunction)_wrap_gwy_axis_get_orientation, METH_NOARGS,
      NULL },
    { "set_auto", (PyCFunction)_wrap_gwy_axis_set_auto, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "request_range", (PyCFunction)_wrap_gwy_axis_request_range, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_range", (PyCFunction)_wrap_gwy_axis_get_range, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_requested_range", (PyCFunction)_wrap_gwy_axis_get_requested_range, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_magnification", (PyCFunction)_wrap_gwy_axis_get_magnification, METH_NOARGS,
      NULL },
    { "get_magnification_string", (PyCFunction)_wrap_gwy_axis_get_magnification_string, METH_NOARGS,
      NULL },
    { "set_label", (PyCFunction)_wrap_gwy_axis_set_label, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_label", (PyCFunction)_wrap_gwy_axis_get_label, METH_NOARGS,
      NULL },
    { "set_si_unit", (PyCFunction)_wrap_gwy_axis_set_si_unit, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "enable_label_edit", (PyCFunction)_wrap_gwy_axis_enable_label_edit, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "draw_on_drawable", (PyCFunction)_wrap_gwy_axis_draw_on_drawable, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_major_ticks", (PyCFunction)_wrap_gwy_axis_get_major_ticks, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

PyTypeObject G_GNUC_INTERNAL PyGwyAxis_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "gwy.Axis",                   /* tp_name */
    sizeof(PyGObject),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)0,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    offsetof(PyGObject, weakreflist),             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyGwyAxis_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    offsetof(PyGObject, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_gwy_axis_new,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)0,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0              /* tp_is_gc */
};



/* ----------- GwyColorAxis ----------- */

static int
_wrap_gwy_color_axis_new(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "orientation", NULL };
    GtkOrientation orientation;
    PyObject *py_orientation = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O:GwyColorAxis.__init__", kwlist, &py_orientation))
        return -1;
    if (pyg_enum_get_value(GTK_TYPE_ORIENTATION, py_orientation, (gpointer)&orientation))
        return -1;
    self->obj = (GObject *)gwy_color_axis_new(orientation);

    if (!self->obj) {
        PyErr_SetString(PyExc_RuntimeError, "could not create GwyColorAxis object");
        return -1;
    }
    pygobject_register_wrapper((PyObject *)self);
    return 0;
}

static PyObject *
_wrap_gwy_color_axis_get_range(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "min", "max", NULL };
    PyObject *min_pyobj, *max_pyobj;
    GDoubleValue min, max;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"OO:GwyColorAxis.get_range", kwlist, &min_pyobj, &max_pyobj))
        return NULL;
    if (!PyFloat_Check(min_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'min' must be a float variable");
        return NULL;
    }
    min = PyFloat_AsDouble(min_pyobj);
    if (!PyFloat_Check(max_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'max' must be a float variable");
        return NULL;
    }
    max = PyFloat_AsDouble(max_pyobj);
    
    gwy_color_axis_get_range(GWY_COLOR_AXIS(self->obj), &min, &max);
    
    ((PyFloatObject *) min_pyobj)->ob_fval = min;
    ((PyFloatObject *) max_pyobj)->ob_fval = max;
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_color_axis_set_range(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "min", "max", NULL };
    double min, max;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"dd:GwyColorAxis.set_range", kwlist, &min, &max))
        return NULL;
    
    gwy_color_axis_set_range(GWY_COLOR_AXIS(self->obj), min, max);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_color_axis_get_si_unit(PyGObject *self)
{
    GwySIUnit *ret;

    
    ret = gwy_color_axis_get_si_unit(GWY_COLOR_AXIS(self->obj));
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_color_axis_set_si_unit(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "unit", NULL };
    PyGObject *unit;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:GwyColorAxis.set_si_unit", kwlist, &PyGwySIUnit_Type, &unit))
        return NULL;
    
    gwy_color_axis_set_si_unit(GWY_COLOR_AXIS(self->obj), GWY_SI_UNIT(unit->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_color_axis_set_gradient(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "gradient", NULL };
    char *gradient;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:GwyColorAxis.set_gradient", kwlist, &gradient))
        return NULL;
    
    gwy_color_axis_set_gradient(GWY_COLOR_AXIS(self->obj), gradient);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_color_axis_get_gradient(PyGObject *self)
{
    const gchar *ret;

    
    ret = gwy_color_axis_get_gradient(GWY_COLOR_AXIS(self->obj));
    
    if (ret)
        return PyString_FromString(ret);
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_color_axis_get_ticks_style(PyGObject *self)
{
    gint ret;

    
    ret = gwy_color_axis_get_ticks_style(GWY_COLOR_AXIS(self->obj));
    
    return pyg_enum_from_gtype(GWY_TYPE_TICKS_STYLE, ret);
}

static PyObject *
_wrap_gwy_color_axis_set_ticks_style(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "ticks_style", NULL };
    PyObject *py_ticks_style = NULL;
    GwyTicksStyle ticks_style;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O:GwyColorAxis.set_ticks_style", kwlist, &py_ticks_style))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_TICKS_STYLE, py_ticks_style, (gpointer)&ticks_style))
        return NULL;
    
    gwy_color_axis_set_ticks_style(GWY_COLOR_AXIS(self->obj), ticks_style);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_color_axis_get_labels_visible(PyGObject *self)
{
    int ret;

    
    ret = gwy_color_axis_get_labels_visible(GWY_COLOR_AXIS(self->obj));
    
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_color_axis_set_labels_visible(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "labels_visible", NULL };
    int labels_visible;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:GwyColorAxis.set_labels_visible", kwlist, &labels_visible))
        return NULL;
    
    gwy_color_axis_set_labels_visible(GWY_COLOR_AXIS(self->obj), labels_visible);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static const PyMethodDef _PyGwyColorAxis_methods[] = {
    { "get_range", (PyCFunction)_wrap_gwy_color_axis_get_range, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "set_range", (PyCFunction)_wrap_gwy_color_axis_set_range, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_si_unit", (PyCFunction)_wrap_gwy_color_axis_get_si_unit, METH_NOARGS,
      NULL },
    { "set_si_unit", (PyCFunction)_wrap_gwy_color_axis_set_si_unit, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "set_gradient", (PyCFunction)_wrap_gwy_color_axis_set_gradient, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_gradient", (PyCFunction)_wrap_gwy_color_axis_get_gradient, METH_NOARGS,
      NULL },
    { "get_ticks_style", (PyCFunction)_wrap_gwy_color_axis_get_ticks_style, METH_NOARGS,
      NULL },
    { "set_ticks_style", (PyCFunction)_wrap_gwy_color_axis_set_ticks_style, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_labels_visible", (PyCFunction)_wrap_gwy_color_axis_get_labels_visible, METH_NOARGS,
      NULL },
    { "set_labels_visible", (PyCFunction)_wrap_gwy_color_axis_set_labels_visible, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

PyTypeObject G_GNUC_INTERNAL PyGwyColorAxis_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "gwy.ColorAxis",                   /* tp_name */
    sizeof(PyGObject),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)0,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    offsetof(PyGObject, weakreflist),             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyGwyColorAxis_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    offsetof(PyGObject, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_gwy_color_axis_new,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)0,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0              /* tp_is_gc */
};



/* ----------- GwyColorButton ----------- */

static int
_wrap_gwy_color_button_new(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char* kwlist[] = { NULL };

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,
                                     ":gwy.ColorButton.__init__",
                                     kwlist))
        return -1;

    pygobject_constructv(self, 0, NULL);
    if (!self->obj) {
        PyErr_SetString(
            PyExc_RuntimeError, 
            "could not create gwy.ColorButton object");
        return -1;
    }
    return 0;
}

static PyObject *
_wrap_gwy_color_button_set_color(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "red", "green", "blue", "color", NULL };
    GwyRGBA s_color, *color = &s_color;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"dddd:GwyColorButton.set_color", kwlist, &color->r, &color->g, &color->b, &color->a))
        return NULL;
    gwy_debug("color: %f %f %f %f", color->r, color->g, color->b, color->a);    
    gwy_color_button_set_color(GWY_COLOR_BUTTON(self->obj), color);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_color_button_get_color(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "red", "green", "blue", "color", NULL };
    GwyRGBA s_color, *color = &s_color;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"dddd:GwyColorButton.get_color", kwlist, &color->r, &color->g, &color->b, &color->a))
        return NULL;
    gwy_debug("color: %f %f %f %f", color->r, color->g, color->b, color->a);    
    gwy_color_button_get_color(GWY_COLOR_BUTTON(self->obj), color);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_color_button_set_use_alpha(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "use_alpha", NULL };
    int use_alpha;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:GwyColorButton.set_use_alpha", kwlist, &use_alpha))
        return NULL;
    
    gwy_color_button_set_use_alpha(GWY_COLOR_BUTTON(self->obj), use_alpha);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_color_button_get_use_alpha(PyGObject *self)
{
    int ret;

    
    ret = gwy_color_button_get_use_alpha(GWY_COLOR_BUTTON(self->obj));
    
    return PyBool_FromLong(ret);

}

static const PyMethodDef _PyGwyColorButton_methods[] = {
    { "set_color", (PyCFunction)_wrap_gwy_color_button_set_color, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_color", (PyCFunction)_wrap_gwy_color_button_get_color, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "set_use_alpha", (PyCFunction)_wrap_gwy_color_button_set_use_alpha, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_use_alpha", (PyCFunction)_wrap_gwy_color_button_get_use_alpha, METH_NOARGS,
      NULL },
    { NULL, NULL, 0, NULL }
};

PyTypeObject G_GNUC_INTERNAL PyGwyColorButton_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "gwy.ColorButton",                   /* tp_name */
    sizeof(PyGObject),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)0,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    offsetof(PyGObject, weakreflist),             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyGwyColorButton_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    offsetof(PyGObject, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_gwy_color_button_new,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)0,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0              /* tp_is_gc */
};



/* ----------- GwyContainer ----------- */

static int
_wrap_gwy_container_new(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char* kwlist[] = { NULL };

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,
                                     ":gwy.Container.__init__",
                                     kwlist))
        return -1;

    pygobject_constructv(self, 0, NULL);
    if (!self->obj) {
        PyErr_SetString(
            PyExc_RuntimeError, 
            "could not create gwy.Container object");
        return -1;
    }
    return 0;
}

static PyObject *
_wrap_gwy_container_get_n_items(PyGObject *self)
{
    guint ret;

    
    ret = gwy_container_get_n_items(GWY_CONTAINER(self->obj));
    
    return PyLong_FromUnsignedLong(ret);
}

static PyObject *
_wrap_gwy_container_value_type(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "key", NULL };
    int key;
    GType ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:GwyContainer.value_type", kwlist, &key))
        return NULL;
    
    ret = gwy_container_value_type(GWY_CONTAINER(self->obj), key);
    
    return pyg_type_wrapper_new(ret);
}

static PyObject *
_wrap_gwy_container_contains(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "key", NULL };
    int key, ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:GwyContainer.contains", kwlist, &key))
        return NULL;
    
    ret = gwy_container_contains(GWY_CONTAINER(self->obj), key);
    
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_container_remove(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "key", NULL };
    int key, ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:GwyContainer.remove", kwlist, &key))
        return NULL;
    
    ret = gwy_container_remove(GWY_CONTAINER(self->obj), key);
    
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_container_remove_by_prefix(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "prefix", NULL };
    char *prefix;
    guint ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:GwyContainer.remove_by_prefix", kwlist, &prefix))
        return NULL;
    
    ret = gwy_container_remove_by_prefix(GWY_CONTAINER(self->obj), prefix);
    
    return PyLong_FromUnsignedLong(ret);
}

static PyObject *
_wrap_gwy_container_transfer(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "dest", "source_prefix", "dest_prefix", "force", NULL };
    PyGObject *dest;
    char *source_prefix, *dest_prefix;
    int force, ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!ssi:GwyContainer.transfer", kwlist, &PyGwyContainer_Type, &dest, &source_prefix, &dest_prefix, &force))
        return NULL;
    
    ret = gwy_container_transfer(GWY_CONTAINER(self->obj), GWY_CONTAINER(dest->obj), source_prefix, dest_prefix, force);
    
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_gwy_container_rename(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "key", "newkey", "force", NULL };
    int key, newkey, force, ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iii:GwyContainer.rename", kwlist, &key, &newkey, &force))
        return NULL;
    
    ret = gwy_container_rename(GWY_CONTAINER(self->obj), key, newkey, force);
    
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_container_set_boolean(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "key", "value", NULL };
    int key, value;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ii:GwyContainer.set_boolean", kwlist, &key, &value))
        return NULL;
    
    gwy_container_set_boolean(GWY_CONTAINER(self->obj), key, value);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_container_get_boolean(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "key", NULL };
    int key, ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:GwyContainer.get_boolean", kwlist, &key))
        return NULL;
    
    ret = gwy_container_get_boolean(GWY_CONTAINER(self->obj), key);
    
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_container_set_uchar(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "key", "value", NULL };
    int key;
    char value;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ic:GwyContainer.set_uchar", kwlist, &key, &value))
        return NULL;
    
    gwy_container_set_uchar(GWY_CONTAINER(self->obj), key, value);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_container_get_uchar(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "key", NULL };
    int key;
    gchar ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:GwyContainer.get_uchar", kwlist, &key))
        return NULL;
    
    ret = gwy_container_get_uchar(GWY_CONTAINER(self->obj), key);
    
    return PyString_FromStringAndSize(&ret, 1);
}

static PyObject *
_wrap_gwy_container_gis_uchar(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "key", "value", NULL };
    int key, value_len, ret;
    guchar *value;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"is#:GwyContainer.gis_uchar", kwlist, &key, &value, &value_len))
        return NULL;
    
    ret = gwy_container_gis_uchar(GWY_CONTAINER(self->obj), key, value);
    
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_container_set_int32(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "key", "value", NULL };
    int key, value;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ii:GwyContainer.set_int32", kwlist, &key, &value))
        return NULL;
    
    gwy_container_set_int32(GWY_CONTAINER(self->obj), key, value);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_container_get_int32(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "key", NULL };
    int key, ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:GwyContainer.get_int32", kwlist, &key))
        return NULL;
    
    ret = gwy_container_get_int32(GWY_CONTAINER(self->obj), key);
    
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_gwy_container_gis_int32(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "key", "value", NULL };
    int key, ret;
    PyObject *value_pyobj;
    GIntValue value;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iO:GwyContainer.gis_int32", kwlist, &key, &value_pyobj))
        return NULL;
    if (!PyInt_Check(value_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'value' must be an integer variable");
        return NULL;
    }
    value = (int) PyInt_AsLong(value_pyobj);
    
    ret = gwy_container_gis_int32(GWY_CONTAINER(self->obj), key, &value);
    
    ((PyIntObject *) value_pyobj)->ob_ival = value;
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_container_set_enum(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "key", "value", NULL };
    int key;
    PyObject *py_value = NULL;
    guint value = 0;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iO:GwyContainer.set_enum", kwlist, &key, &py_value))
        return NULL;
    if (py_value) {
        if (PyLong_Check(py_value))
            value = PyLong_AsUnsignedLong(py_value);
        else if (PyInt_Check(py_value))
            value = PyInt_AsLong(py_value);
        else
            PyErr_SetString(PyExc_TypeError, "Parameter 'value' must be an int or a long");
        if (PyErr_Occurred())
            return NULL;
    }
    
    gwy_container_set_enum(GWY_CONTAINER(self->obj), key, value);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_container_get_enum(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "key", NULL };
    int key;
    guint ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:GwyContainer.get_enum", kwlist, &key))
        return NULL;
    
    ret = gwy_container_get_enum(GWY_CONTAINER(self->obj), key);
    
    return PyLong_FromUnsignedLong(ret);
}

static PyObject *
_wrap_gwy_container_gis_enum(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "key", "value", NULL };
    int key, ret;
    PyObject *value_pyobj;
    GIntValue value;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iO:GwyContainer.gis_enum", kwlist, &key, &value_pyobj))
        return NULL;
    if (!PyInt_Check(value_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'value' must be an integer variable");
        return NULL;
    }
    value = (int) PyInt_AsLong(value_pyobj);
    
    ret = gwy_container_gis_enum(GWY_CONTAINER(self->obj), key, &value);
    
    ((PyIntObject *) value_pyobj)->ob_ival = value;
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_container_set_int64(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "key", "value", NULL };
    int key;
    gint64 value;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iL:GwyContainer.set_int64", kwlist, &key, &value))
        return NULL;
    
    gwy_container_set_int64(GWY_CONTAINER(self->obj), key, value);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_container_get_int64(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "key", NULL };
    int key;
    gint64 ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:GwyContainer.get_int64", kwlist, &key))
        return NULL;
    
    ret = gwy_container_get_int64(GWY_CONTAINER(self->obj), key);
    
    return PyLong_FromLongLong(ret);
}

static PyObject *
_wrap_gwy_container_gis_int64(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "key", "value", NULL };
    int key, ret;
    PyObject *value_pyobj;
    GIntValue value;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iO:GwyContainer.gis_int64", kwlist, &key, &value_pyobj))
        return NULL;
    if (!PyInt_Check(value_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'value' must be an integer variable");
        return NULL;
    }
    value = (int) PyInt_AsLong(value_pyobj);
    
    ret = gwy_container_gis_int64(GWY_CONTAINER(self->obj), key, &value);
    
    ((PyIntObject *) value_pyobj)->ob_ival = value;
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_container_set_double(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "key", "value", NULL };
    int key;
    double value;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"id:GwyContainer.set_double", kwlist, &key, &value))
        return NULL;
    
    gwy_container_set_double(GWY_CONTAINER(self->obj), key, value);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_container_get_double(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "key", NULL };
    int key;
    double ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:GwyContainer.get_double", kwlist, &key))
        return NULL;
    
    ret = gwy_container_get_double(GWY_CONTAINER(self->obj), key);
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_container_gis_double(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "key", "value", NULL };
    int key, ret;
    PyObject *value_pyobj;
    GDoubleValue value;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iO:GwyContainer.gis_double", kwlist, &key, &value_pyobj))
        return NULL;
    if (!PyFloat_Check(value_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'value' must be a float variable");
        return NULL;
    }
    value = PyFloat_AsDouble(value_pyobj);
    
    ret = gwy_container_gis_double(GWY_CONTAINER(self->obj), key, &value);
    
    ((PyFloatObject *) value_pyobj)->ob_fval = value;
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_container_contains_by_name(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "name", NULL };
    char *name;
    int ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:GwyContainer.contains_by_name", kwlist, &name))
        return NULL;
    
    ret = gwy_container_contains_by_name(GWY_CONTAINER(self->obj), name);
    
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_container_remove_by_name(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "name", NULL };
    char *name;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:GwyContainer.remove_by_name", kwlist, &name))
        return NULL;
    
    gwy_container_remove_by_name(GWY_CONTAINER(self->obj), name);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_container_rename_by_name(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "name", "new_name", "delete", NULL };
    char *name, *new_name;
    int delete;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ssi:GwyContainer.rename_by_name", kwlist, &name, &new_name, &delete))
        return NULL;
    
    gwy_container_rename_by_name(GWY_CONTAINER(self->obj), name, new_name, delete);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_container_set_boolean_by_name(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "name", "value", NULL };
    char *name;
    int value;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"si:GwyContainer.set_boolean_by_name", kwlist, &name, &value))
        return NULL;
    
    gwy_container_set_boolean_by_name(GWY_CONTAINER(self->obj), name, value);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_container_set_double_by_name(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "name", "value", NULL };
    char *name;
    double value;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"sd:GwyContainer.set_double_by_name", kwlist, &name, &value))
        return NULL;
    
    gwy_container_set_double_by_name(GWY_CONTAINER(self->obj), name, value);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_container_set_enum_by_name(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "name", "value", NULL };
    char *name;
    PyObject *py_value = NULL;
    guint value = 0;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"sO:GwyContainer.set_enum_by_name", kwlist, &name, &py_value))
        return NULL;
    if (py_value) {
        if (PyLong_Check(py_value))
            value = PyLong_AsUnsignedLong(py_value);
        else if (PyInt_Check(py_value))
            value = PyInt_AsLong(py_value);
        else
            PyErr_SetString(PyExc_TypeError, "Parameter 'value' must be an int or a long");
        if (PyErr_Occurred())
            return NULL;
    }
    
    gwy_container_set_enum_by_name(GWY_CONTAINER(self->obj), name, value);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_container_set_int32_by_name(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "name", "value", NULL };
    char *name;
    int value;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"si:GwyContainer.set_int32_by_name", kwlist, &name, &value))
        return NULL;
    
    gwy_container_set_int32_by_name(GWY_CONTAINER(self->obj), name, value);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_container_set_int64_by_name(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "name", "value", NULL };
    char *name;
    gint64 value;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"sL:GwyContainer.set_int64_by_name", kwlist, &name, &value))
        return NULL;
    
    gwy_container_set_int64_by_name(GWY_CONTAINER(self->obj), name, value);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_container_set_object_by_name(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "name", "value", NULL };
    char *name;
    PyGObject *value;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"sO!:GwyContainer.set_object_by_name", kwlist, &name, &PyGObject_Type, &value))
        return NULL;
    
    gwy_container_set_object_by_name(GWY_CONTAINER(self->obj), name, G_OBJECT(value->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_container_set_uchar_by_name(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "name", "value", NULL };
    char *name, value;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"sc:GwyContainer.set_uchar_by_name", kwlist, &name, &value))
        return NULL;
    
    gwy_container_set_uchar_by_name(GWY_CONTAINER(self->obj), name, value);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_container_set_string_by_name(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "name", "value", NULL };
    char *name, *value, *value_dup;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ss:GwyContainer.set_string_by_name", kwlist, &name, &value))
        return NULL;
    value_dup = g_strdup(value);
    
    gwy_container_set_string_by_name(GWY_CONTAINER(self->obj), name, value_dup);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_container_get_boolean_by_name(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "name", NULL };
    char *name;
    int ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:GwyContainer.get_boolean_by_name", kwlist, &name))
        return NULL;
    
    ret = gwy_container_get_boolean_by_name(GWY_CONTAINER(self->obj), name);
    
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_container_get_double_by_name(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "name", NULL };
    char *name;
    double ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:GwyContainer.get_double_by_name", kwlist, &name))
        return NULL;
    
    ret = gwy_container_get_double_by_name(GWY_CONTAINER(self->obj), name);
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_container_get_enum_by_name(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "name", NULL };
    char *name;
    guint ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:GwyContainer.get_enum_by_name", kwlist, &name))
        return NULL;
    
    ret = gwy_container_get_enum_by_name(GWY_CONTAINER(self->obj), name);
    
    return PyLong_FromUnsignedLong(ret);
}

static PyObject *
_wrap_gwy_container_get_int32_by_name(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "name", NULL };
    char *name;
    int ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:GwyContainer.get_int32_by_name", kwlist, &name))
        return NULL;
    
    ret = gwy_container_get_int32_by_name(GWY_CONTAINER(self->obj), name);
    
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_gwy_container_get_int64_by_name(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "name", NULL };
    char *name;
    gint64 ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:GwyContainer.get_int64_by_name", kwlist, &name))
        return NULL;
    
    ret = gwy_container_get_int64_by_name(GWY_CONTAINER(self->obj), name);
    
    return PyLong_FromLongLong(ret);
}

static PyObject *
_wrap_gwy_container_get_object_by_name(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "name", NULL };
    char *name;
    GObject *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:GwyContainer.get_object_by_name", kwlist, &name))
        return NULL;
    
    ret = gwy_container_get_object_by_name(GWY_CONTAINER(self->obj), name);
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_container_get_uchar_by_name(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "name", NULL };
    char *name;
    gchar ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:GwyContainer.get_uchar_by_name", kwlist, &name))
        return NULL;
    
    ret = gwy_container_get_uchar_by_name(GWY_CONTAINER(self->obj), name);
    
    return PyString_FromStringAndSize(&ret, 1);
}

static PyObject *
_wrap_gwy_container_get_string_by_name(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "name", NULL };
    char *name;
    const gchar *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:GwyContainer.get_string_by_name", kwlist, &name))
        return NULL;
    
    ret = gwy_container_get_string_by_name(GWY_CONTAINER(self->obj), name);
    
    if (ret)
        return PyString_FromString(ret);
    Py_INCREF(Py_None);
    return Py_None;
}

#line 468 "./pygwy.override"
static PyObject *
_wrap_gwy_container_keys_by_name(PyGObject *self) 
{
   gint i;
   const gchar **keys;
   PyObject *tuple;
   
   keys = gwy_container_keys_by_name(GWY_CONTAINER(self->obj));
   tuple = PyTuple_New(gwy_container_get_n_items(GWY_CONTAINER(self->obj)));
   if (!tuple)
      return NULL;
   // fill tuple with keys
   for (i = 0 ; i < gwy_container_get_n_items(GWY_CONTAINER(self->obj)); i++) { 
      PyTuple_SetItem(tuple, i, PyString_FromString(keys[i]));
   }
   g_free(keys);
   return tuple;
}

#line 1721 "pygwywrap.c"


#line 419 "./pygwy.override"
/**
 * gwy_container_get_object:
 * @key: key of object.
 *
 * Get object of given key from container.
 *
 * Returns: object of given key
**/
static PyObject *
_wrap_gwy_container_get_object(PyGObject *self, PyObject *args, PyObject *kwargs) 
{
   static char *kwlist[] = {"key", NULL};
   gint key;
   gpointer obj;
   
   if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:gwy_container_get_object", kwlist, &key))
      return NULL;
   obj = gwy_container_get_object((GWY_CONTAINER(self->obj)), key);
   if (obj && (GWY_IS_DATA_FIELD(obj) || GWY_IS_DATA_LINE(obj) || GWY_IS_RESOURCE(obj) || GWY_IS_SI_UNIT(obj))) {
      return pygobject_new((GObject *)obj);
   } else {
      Py_INCREF(Py_None);
      return Py_None;
   }
}

#line 1751 "pygwywrap.c"


#line 534 "./pygwy.override"
static PyObject *
_wrap_gwy_container_datafields(PyGObject *self) 
{
   gint i;
   GQuark *keys;
   PyObject *py_list;
   gpointer value;

   py_list = PyList_New(0);
   if (!py_list) {
      return NULL;
   }

   keys = gwy_container_keys(GWY_CONTAINER(self->obj));
   for (i = 0 ; i < gwy_container_get_n_items(GWY_CONTAINER(self->obj)); i++) 
   {
      if (gwy_container_gis_object(GWY_CONTAINER(self->obj),  keys[i], &value) 
          && GWY_IS_DATA_FIELD(value)) 
      {
         PyList_Append(py_list, pygobject_new((GObject*)value));
      }
   }
   g_free(keys);
   return py_list;
}
#line 1780 "pygwywrap.c"


#line 447 "./pygwy.override"
static PyObject *
_wrap_gwy_container_keys(PyGObject *self) 
{
   gint i;
   GQuark *keys;
   PyObject *tuple;
   
   keys = gwy_container_keys(GWY_CONTAINER(self->obj));
   tuple = PyTuple_New(gwy_container_get_n_items(GWY_CONTAINER(self->obj)));
   if (!tuple)
      return NULL;
   // fill tuple with keys
   for (i = 0 ; i < gwy_container_get_n_items(GWY_CONTAINER(self->obj)); i++) {
      PyTuple_SetItem(tuple, i, PyInt_FromLong(keys[i]));
   }
   g_free(keys);
   return tuple;
}

#line 1803 "pygwywrap.c"


#line 400 "./pygwy.override"
static PyObject *
_wrap_gwy_container_get_string(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "key", NULL };
    int key;
    const guchar *value;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:GwyContainer.set_string", kwlist, &key))
        return NULL;
    
    value = gwy_container_get_string(GWY_CONTAINER(self->obj), key);
    if (value)
        return PyString_FromString(value);
    else 
        return NULL;
}

#line 1824 "pygwywrap.c"


#line 561 "./pygwy.override"
static PyObject *
_wrap_gwy_container_graph_models(PyGObject *self) 
{
   gint i;
   GQuark *keys;
   PyObject *py_list;
   gpointer value;

   py_list = PyList_New(0);
   if (!py_list) {
      return NULL;
   }

   keys = gwy_container_keys(GWY_CONTAINER(self->obj));
   for (i = 0 ; i < gwy_container_get_n_items(GWY_CONTAINER(self->obj)); i++) 
   {
      if (gwy_container_gis_object(GWY_CONTAINER(self->obj),  keys[i], &value) 
          && GWY_IS_GRAPH_MODEL(value)) 
      {
         PyList_Append(py_list, pygobject_new((GObject*)value));
      }
   }
   g_free(keys);
   return py_list;
}
// TODO: use G_OBJECT_TYPE_NAME instead of string values in set_object_by_name
/* vim: set cin et ts=4 sw=4 cino=>1s syntax=c,e0,n0,f0,{0,}0,^0,\:1s,=0,g1s,h0,t0,+1s,c3,(0,u0 : */
#line 1855 "pygwywrap.c"


#line 372 "./pygwy.override"
/**
 * gwy_container_set_string: 
 * @key: an object key
 * @value: new string
 *
 * Set string for key to given value
 *
 **/
static PyObject *
_wrap_gwy_container_set_string(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "key", "value", NULL };
    int key, value_len;
    guchar *value;
    gchar *dup_value;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"is#:GwyContainer.set_string", kwlist, &key, &value, &value_len))
        return NULL;
    
    dup_value = g_strndup(value, value_len);
    gwy_container_set_string(GWY_CONTAINER(self->obj), key, dup_value);
    
    Py_INCREF(Py_None);
    return Py_None;
}

#line 1885 "pygwywrap.c"


static const PyMethodDef _PyGwyContainer_methods[] = {
    { "get_n_items", (PyCFunction)_wrap_gwy_container_get_n_items, METH_NOARGS,
      NULL },
    { "value_type", (PyCFunction)_wrap_gwy_container_value_type, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "contains", (PyCFunction)_wrap_gwy_container_contains, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "remove", (PyCFunction)_wrap_gwy_container_remove, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "remove_by_prefix", (PyCFunction)_wrap_gwy_container_remove_by_prefix, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "transfer", (PyCFunction)_wrap_gwy_container_transfer, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "rename", (PyCFunction)_wrap_gwy_container_rename, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "set_boolean", (PyCFunction)_wrap_gwy_container_set_boolean, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_boolean", (PyCFunction)_wrap_gwy_container_get_boolean, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "set_uchar", (PyCFunction)_wrap_gwy_container_set_uchar, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_uchar", (PyCFunction)_wrap_gwy_container_get_uchar, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gis_uchar", (PyCFunction)_wrap_gwy_container_gis_uchar, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "set_int32", (PyCFunction)_wrap_gwy_container_set_int32, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_int32", (PyCFunction)_wrap_gwy_container_get_int32, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gis_int32", (PyCFunction)_wrap_gwy_container_gis_int32, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "set_enum", (PyCFunction)_wrap_gwy_container_set_enum, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_enum", (PyCFunction)_wrap_gwy_container_get_enum, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gis_enum", (PyCFunction)_wrap_gwy_container_gis_enum, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "set_int64", (PyCFunction)_wrap_gwy_container_set_int64, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_int64", (PyCFunction)_wrap_gwy_container_get_int64, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gis_int64", (PyCFunction)_wrap_gwy_container_gis_int64, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "set_double", (PyCFunction)_wrap_gwy_container_set_double, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_double", (PyCFunction)_wrap_gwy_container_get_double, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gis_double", (PyCFunction)_wrap_gwy_container_gis_double, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "contains_by_name", (PyCFunction)_wrap_gwy_container_contains_by_name, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "remove_by_name", (PyCFunction)_wrap_gwy_container_remove_by_name, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "rename_by_name", (PyCFunction)_wrap_gwy_container_rename_by_name, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "set_boolean_by_name", (PyCFunction)_wrap_gwy_container_set_boolean_by_name, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "set_double_by_name", (PyCFunction)_wrap_gwy_container_set_double_by_name, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "set_enum_by_name", (PyCFunction)_wrap_gwy_container_set_enum_by_name, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "set_int32_by_name", (PyCFunction)_wrap_gwy_container_set_int32_by_name, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "set_int64_by_name", (PyCFunction)_wrap_gwy_container_set_int64_by_name, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "set_object_by_name", (PyCFunction)_wrap_gwy_container_set_object_by_name, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "set_uchar_by_name", (PyCFunction)_wrap_gwy_container_set_uchar_by_name, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "set_string_by_name", (PyCFunction)_wrap_gwy_container_set_string_by_name, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_boolean_by_name", (PyCFunction)_wrap_gwy_container_get_boolean_by_name, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_double_by_name", (PyCFunction)_wrap_gwy_container_get_double_by_name, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_enum_by_name", (PyCFunction)_wrap_gwy_container_get_enum_by_name, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_int32_by_name", (PyCFunction)_wrap_gwy_container_get_int32_by_name, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_int64_by_name", (PyCFunction)_wrap_gwy_container_get_int64_by_name, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_object_by_name", (PyCFunction)_wrap_gwy_container_get_object_by_name, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_uchar_by_name", (PyCFunction)_wrap_gwy_container_get_uchar_by_name, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_string_by_name", (PyCFunction)_wrap_gwy_container_get_string_by_name, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "keys_by_name", (PyCFunction)_wrap_gwy_container_keys_by_name, METH_NOARGS,
      NULL },
    { "get_object", (PyCFunction)_wrap_gwy_container_get_object, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "datafields", (PyCFunction)_wrap_gwy_container_datafields, METH_NOARGS,
      NULL },
    { "keys", (PyCFunction)_wrap_gwy_container_keys, METH_NOARGS,
      NULL },
    { "get_string", (PyCFunction)_wrap_gwy_container_get_string, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "graph_models", (PyCFunction)_wrap_gwy_container_graph_models, METH_NOARGS,
      NULL },
    { "set_string", (PyCFunction)_wrap_gwy_container_set_string, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

PyTypeObject G_GNUC_INTERNAL PyGwyContainer_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "gwy.Container",                   /* tp_name */
    sizeof(PyGObject),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)0,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    offsetof(PyGObject, weakreflist),             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyGwyContainer_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    offsetof(PyGObject, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_gwy_container_new,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)0,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0              /* tp_is_gc */
};



/* ----------- GwyCurve ----------- */

static int
_wrap_gwy_curve_new(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char* kwlist[] = { NULL };

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,
                                     ":gwy.Curve.__init__",
                                     kwlist))
        return -1;

    pygobject_constructv(self, 0, NULL);
    if (!self->obj) {
        PyErr_SetString(
            PyExc_RuntimeError, 
            "could not create gwy.Curve object");
        return -1;
    }
    return 0;
}

static PyObject *
_wrap_gwy_curve_reset(PyGObject *self)
{
    
    gwy_curve_reset(GWY_CURVE(self->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_curve_set_range(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "min_x", "max_x", "min_y", "max_y", NULL };
    double min_x, max_x, min_y, max_y;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"dddd:GwyCurve.set_range", kwlist, &min_x, &max_x, &min_y, &max_y))
        return NULL;
    
    gwy_curve_set_range(GWY_CURVE(self->obj), min_x, max_x, min_y, max_y);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_curve_set_curve_type(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "type", NULL };
    GwyCurveType type;
    PyObject *py_type = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O:GwyCurve.set_curve_type", kwlist, &py_type))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_CURVE_TYPE, py_type, (gpointer)&type))
        return NULL;
    
    gwy_curve_set_curve_type(GWY_CURVE(self->obj), type);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_curve_set_channels(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "red", "green", "blue", "colors", NULL };
    int num_channels;
    GwyRGBA s_colors, *colors = &s_colors;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"idddd:GwyCurve.set_channels", kwlist, &num_channels, &colors->r, &colors->g, &colors->b, &colors->a))
        return NULL;
    gwy_debug("color: %f %f %f %f", colors->r, colors->g, colors->b, colors->a);    
    gwy_curve_set_channels(GWY_CURVE(self->obj), num_channels, colors);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static const PyMethodDef _PyGwyCurve_methods[] = {
    { "reset", (PyCFunction)_wrap_gwy_curve_reset, METH_NOARGS,
      NULL },
    { "set_range", (PyCFunction)_wrap_gwy_curve_set_range, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "set_curve_type", (PyCFunction)_wrap_gwy_curve_set_curve_type, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "set_channels", (PyCFunction)_wrap_gwy_curve_set_channels, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

PyTypeObject G_GNUC_INTERNAL PyGwyCurve_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "gwy.Curve",                   /* tp_name */
    sizeof(PyGObject),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)0,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    offsetof(PyGObject, weakreflist),             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyGwyCurve_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    offsetof(PyGObject, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_gwy_curve_new,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)0,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0              /* tp_is_gc */
};



/* ----------- GwyDataField ----------- */

static int
_wrap_gwy_data_field_new(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "xres", "yres", "xreal", "yreal", "nullme", NULL };
    int xres, yres, nullme;
    double xreal, yreal;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iiddi:GwyDataField.__init__", kwlist, &xres, &yres, &xreal, &yreal, &nullme))
        return -1;
    self->obj = (GObject *)gwy_data_field_new(xres, yres, xreal, yreal, nullme);

    if (!self->obj) {
        PyErr_SetString(PyExc_RuntimeError, "could not create GwyDataField object");
        return -1;
    }
    pygobject_register_wrapper((PyObject *)self);
    return 0;
}

static PyObject *
_wrap_gwy_data_field_sum_fields(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "operand1", "operand2", NULL };
    PyGObject *operand1, *operand2;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!:GwyDataField.sum_fields", kwlist, &PyGwyDataField_Type, &operand1, &PyGwyDataField_Type, &operand2))
        return NULL;
    
    gwy_data_field_sum_fields(GWY_DATA_FIELD(self->obj), GWY_DATA_FIELD(operand1->obj), GWY_DATA_FIELD(operand2->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_subtract_fields(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "operand1", "operand2", NULL };
    PyGObject *operand1, *operand2;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!:GwyDataField.subtract_fields", kwlist, &PyGwyDataField_Type, &operand1, &PyGwyDataField_Type, &operand2))
        return NULL;
    
    gwy_data_field_subtract_fields(GWY_DATA_FIELD(self->obj), GWY_DATA_FIELD(operand1->obj), GWY_DATA_FIELD(operand2->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_divide_fields(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "operand1", "operand2", NULL };
    PyGObject *operand1, *operand2;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!:GwyDataField.divide_fields", kwlist, &PyGwyDataField_Type, &operand1, &PyGwyDataField_Type, &operand2))
        return NULL;
    
    gwy_data_field_divide_fields(GWY_DATA_FIELD(self->obj), GWY_DATA_FIELD(operand1->obj), GWY_DATA_FIELD(operand2->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_multiply_fields(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "operand1", "operand2", NULL };
    PyGObject *operand1, *operand2;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!:GwyDataField.multiply_fields", kwlist, &PyGwyDataField_Type, &operand1, &PyGwyDataField_Type, &operand2))
        return NULL;
    
    gwy_data_field_multiply_fields(GWY_DATA_FIELD(self->obj), GWY_DATA_FIELD(operand1->obj), GWY_DATA_FIELD(operand2->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_min_of_fields(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "operand1", "operand2", NULL };
    PyGObject *operand1, *operand2;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!:GwyDataField.min_of_fields", kwlist, &PyGwyDataField_Type, &operand1, &PyGwyDataField_Type, &operand2))
        return NULL;
    
    gwy_data_field_min_of_fields(GWY_DATA_FIELD(self->obj), GWY_DATA_FIELD(operand1->obj), GWY_DATA_FIELD(operand2->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_max_of_fields(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "operand1", "operand2", NULL };
    PyGObject *operand1, *operand2;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!:GwyDataField.max_of_fields", kwlist, &PyGwyDataField_Type, &operand1, &PyGwyDataField_Type, &operand2))
        return NULL;
    
    gwy_data_field_max_of_fields(GWY_DATA_FIELD(self->obj), GWY_DATA_FIELD(operand1->obj), GWY_DATA_FIELD(operand2->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_check_compatibility(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "data_field2", "check", NULL };
    PyGObject *data_field2;
    PyObject *py_check = NULL;
    guint ret;
    GwyDataCompatibilityFlags check;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O:GwyDataField.check_compatibility", kwlist, &PyGwyDataField_Type, &data_field2, &py_check))
        return NULL;
    if (pyg_flags_get_value(GWY_TYPE_DATA_COMPATIBILITY_FLAGS, py_check, (gpointer)&check))
        return NULL;
    
    ret = gwy_data_field_check_compatibility(GWY_DATA_FIELD(self->obj), GWY_DATA_FIELD(data_field2->obj), check);
    
    return pyg_flags_from_gtype(GWY_TYPE_DATA_COMPATIBILITY_FLAGS, ret);
}

static PyObject *
_wrap_gwy_data_field_correct_laplace_iteration(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "mask_field", "buffer_field", "corrfactor", "error", NULL };
    PyGObject *mask_field, *buffer_field;
    double corrfactor;
    PyObject *error_pyobj;
    GDoubleValue error;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!dO:GwyDataField.correct_laplace_iteration", kwlist, &PyGwyDataField_Type, &mask_field, &PyGwyDataField_Type, &buffer_field, &corrfactor, &error_pyobj))
        return NULL;
    if (!PyFloat_Check(error_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'error' must be a float variable");
        return NULL;
    }
    error = PyFloat_AsDouble(error_pyobj);
    
    gwy_data_field_correct_laplace_iteration(GWY_DATA_FIELD(self->obj), GWY_DATA_FIELD(mask_field->obj), GWY_DATA_FIELD(buffer_field->obj), corrfactor, &error);
    
    ((PyFloatObject *) error_pyobj)->ob_fval = error;
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_correct_average(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "mask_field", NULL };
    PyGObject *mask_field;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:GwyDataField.correct_average", kwlist, &PyGwyDataField_Type, &mask_field))
        return NULL;
    
    gwy_data_field_correct_average(GWY_DATA_FIELD(self->obj), GWY_DATA_FIELD(mask_field->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_mask_outliers(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "mask_field", "thresh", NULL };
    PyGObject *mask_field;
    double thresh;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!d:GwyDataField.mask_outliers", kwlist, &PyGwyDataField_Type, &mask_field, &thresh))
        return NULL;
    
    gwy_data_field_mask_outliers(GWY_DATA_FIELD(self->obj), GWY_DATA_FIELD(mask_field->obj), thresh);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_get_correlation_score(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "kernel_field", "col", "row", "kernel_col", "kernel_row", "kernel_width", "kernel_height", NULL };
    PyGObject *kernel_field;
    int col, row, kernel_col, kernel_row, kernel_width, kernel_height;
    double ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!iiiiii:GwyDataField.get_correlation_score", kwlist, &PyGwyDataField_Type, &kernel_field, &col, &row, &kernel_col, &kernel_row, &kernel_width, &kernel_height))
        return NULL;
    
    ret = gwy_data_field_get_correlation_score(GWY_DATA_FIELD(self->obj), GWY_DATA_FIELD(kernel_field->obj), col, row, kernel_col, kernel_row, kernel_width, kernel_height);
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_field_crosscorrelate(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "data_field2", "x_dist", "y_dist", "score", "search_width", "search_height", "window_width", "window_height", NULL };
    PyGObject *data_field2, *x_dist, *y_dist, *score;
    int search_width, search_height, window_width, window_height;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!O!O!iiii:GwyDataField.crosscorrelate", kwlist, &PyGwyDataField_Type, &data_field2, &PyGwyDataField_Type, &x_dist, &PyGwyDataField_Type, &y_dist, &PyGwyDataField_Type, &score, &search_width, &search_height, &window_width, &window_height))
        return NULL;
    
    gwy_data_field_crosscorrelate(GWY_DATA_FIELD(self->obj), GWY_DATA_FIELD(data_field2->obj), GWY_DATA_FIELD(x_dist->obj), GWY_DATA_FIELD(y_dist->obj), GWY_DATA_FIELD(score->obj), search_width, search_height, window_width, window_height);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_correlate(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "kernel_field", "score", "method", NULL };
    PyGObject *kernel_field, *score;
    PyObject *py_method = NULL;
    GwyCorrelationType method;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!O:GwyDataField.correlate", kwlist, &PyGwyDataField_Type, &kernel_field, &PyGwyDataField_Type, &score, &py_method))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_CORRELATION_TYPE, py_method, (gpointer)&method))
        return NULL;
    
    gwy_data_field_correlate(GWY_DATA_FIELD(self->obj), GWY_DATA_FIELD(kernel_field->obj), GWY_DATA_FIELD(score->obj), method);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_new_alike(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "nullme", NULL };
    int nullme;
    GwyDataField *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:GwyDataField.new_alike", kwlist, &nullme))
        return NULL;
    
    ret = gwy_data_field_new_alike(GWY_DATA_FIELD(self->obj), nullme);
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_data_field_data_changed(PyGObject *self)
{
    
    gwy_data_field_data_changed(GWY_DATA_FIELD(self->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_new_resampled(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "xres", "yres", "interpolation", NULL };
    int xres, yres;
    PyObject *py_interpolation = NULL;
    GwyInterpolationType interpolation;
    GwyDataField *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iiO:GwyDataField.new_resampled", kwlist, &xres, &yres, &py_interpolation))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_INTERPOLATION_TYPE, py_interpolation, (gpointer)&interpolation))
        return NULL;
    
    ret = gwy_data_field_new_resampled(GWY_DATA_FIELD(self->obj), xres, yres, interpolation);
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_data_field_resample(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "xres", "yres", "interpolation", NULL };
    int xres, yres;
    PyObject *py_interpolation = NULL;
    GwyInterpolationType interpolation;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iiO:GwyDataField.resample", kwlist, &xres, &yres, &py_interpolation))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_INTERPOLATION_TYPE, py_interpolation, (gpointer)&interpolation))
        return NULL;
    
    gwy_data_field_resample(GWY_DATA_FIELD(self->obj), xres, yres, interpolation);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_resize(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "ulcol", "ulrow", "brcol", "brrow", NULL };
    int ulcol, ulrow, brcol, brrow;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iiii:GwyDataField.resize", kwlist, &ulcol, &ulrow, &brcol, &brrow))
        return NULL;
    
    gwy_data_field_resize(GWY_DATA_FIELD(self->obj), ulcol, ulrow, brcol, brrow);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_area_extract(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "col", "row", "width", "height", NULL };
    int col, row, width, height;
    GwyDataField *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iiii:GwyDataField.area_extract", kwlist, &col, &row, &width, &height))
        return NULL;
    
    ret = gwy_data_field_area_extract(GWY_DATA_FIELD(self->obj), col, row, width, height);
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_data_field_copy(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "dest", "nondata_too", NULL };
    PyGObject *dest;
    int nondata_too;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!i:GwyDataField.copy", kwlist, &PyGwyDataField_Type, &dest, &nondata_too))
        return NULL;
    
    gwy_data_field_copy(GWY_DATA_FIELD(self->obj), GWY_DATA_FIELD(dest->obj), nondata_too);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_area_copy(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "dest", "col", "row", "width", "height", "destcol", "destrow", NULL };
    PyGObject *dest;
    int col, row, width, height, destcol, destrow;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!iiiiii:GwyDataField.area_copy", kwlist, &PyGwyDataField_Type, &dest, &col, &row, &width, &height, &destcol, &destrow))
        return NULL;
    
    gwy_data_field_area_copy(GWY_DATA_FIELD(self->obj), GWY_DATA_FIELD(dest->obj), col, row, width, height, destcol, destrow);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_get_xres(PyGObject *self)
{
    int ret;

    
    ret = gwy_data_field_get_xres(GWY_DATA_FIELD(self->obj));
    
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_gwy_data_field_get_yres(PyGObject *self)
{
    int ret;

    
    ret = gwy_data_field_get_yres(GWY_DATA_FIELD(self->obj));
    
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_gwy_data_field_get_xreal(PyGObject *self)
{
    double ret;

    
    ret = gwy_data_field_get_xreal(GWY_DATA_FIELD(self->obj));
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_field_get_yreal(PyGObject *self)
{
    double ret;

    
    ret = gwy_data_field_get_yreal(GWY_DATA_FIELD(self->obj));
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_field_set_xreal(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "xreal", NULL };
    double xreal;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"d:GwyDataField.set_xreal", kwlist, &xreal))
        return NULL;
    
    gwy_data_field_set_xreal(GWY_DATA_FIELD(self->obj), xreal);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_set_yreal(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "yreal", NULL };
    double yreal;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"d:GwyDataField.set_yreal", kwlist, &yreal))
        return NULL;
    
    gwy_data_field_set_yreal(GWY_DATA_FIELD(self->obj), yreal);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_get_xoffset(PyGObject *self)
{
    double ret;

    
    ret = gwy_data_field_get_xoffset(GWY_DATA_FIELD(self->obj));
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_field_get_yoffset(PyGObject *self)
{
    double ret;

    
    ret = gwy_data_field_get_yoffset(GWY_DATA_FIELD(self->obj));
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_field_set_xoffset(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "xoff", NULL };
    double xoff;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"d:GwyDataField.set_xoffset", kwlist, &xoff))
        return NULL;
    
    gwy_data_field_set_xoffset(GWY_DATA_FIELD(self->obj), xoff);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_set_yoffset(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "yoff", NULL };
    double yoff;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"d:GwyDataField.set_yoffset", kwlist, &yoff))
        return NULL;
    
    gwy_data_field_set_yoffset(GWY_DATA_FIELD(self->obj), yoff);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_get_si_unit_xy(PyGObject *self)
{
    GwySIUnit *ret;

    
    ret = gwy_data_field_get_si_unit_xy(GWY_DATA_FIELD(self->obj));
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_data_field_get_si_unit_z(PyGObject *self)
{
    GwySIUnit *ret;

    
    ret = gwy_data_field_get_si_unit_z(GWY_DATA_FIELD(self->obj));
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_data_field_set_si_unit_xy(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "si_unit", NULL };
    PyGObject *si_unit;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:GwyDataField.set_si_unit_xy", kwlist, &PyGwySIUnit_Type, &si_unit))
        return NULL;
    
    gwy_data_field_set_si_unit_xy(GWY_DATA_FIELD(self->obj), GWY_SI_UNIT(si_unit->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_set_si_unit_z(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "si_unit", NULL };
    PyGObject *si_unit;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:GwyDataField.set_si_unit_z", kwlist, &PyGwySIUnit_Type, &si_unit))
        return NULL;
    
    gwy_data_field_set_si_unit_z(GWY_DATA_FIELD(self->obj), GWY_SI_UNIT(si_unit->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_copy_units_to_data_line(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "data_line", NULL };
    PyGObject *data_line;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:GwyDataField.copy_units_to_data_line", kwlist, &PyGwyDataLine_Type, &data_line))
        return NULL;
    
    gwy_data_field_copy_units_to_data_line(GWY_DATA_FIELD(self->obj), GWY_DATA_LINE(data_line->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_itor(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "row", NULL };
    double row, ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"d:GwyDataField.itor", kwlist, &row))
        return NULL;
    
    ret = gwy_data_field_itor(GWY_DATA_FIELD(self->obj), row);
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_field_jtor(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "col", NULL };
    double col, ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"d:GwyDataField.jtor", kwlist, &col))
        return NULL;
    
    ret = gwy_data_field_jtor(GWY_DATA_FIELD(self->obj), col);
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_field_rtoi(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "realy", NULL };
    double realy, ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"d:GwyDataField.rtoi", kwlist, &realy))
        return NULL;
    
    ret = gwy_data_field_rtoi(GWY_DATA_FIELD(self->obj), realy);
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_field_rtoj(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "realx", NULL };
    double realx, ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"d:GwyDataField.rtoj", kwlist, &realx))
        return NULL;
    
    ret = gwy_data_field_rtoj(GWY_DATA_FIELD(self->obj), realx);
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_field_get_val(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "col", "row", NULL };
    int col, row;
    double ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ii:GwyDataField.get_val", kwlist, &col, &row))
        return NULL;
    
    ret = gwy_data_field_get_val(GWY_DATA_FIELD(self->obj), col, row);
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_field_set_val(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "col", "row", "value", NULL };
    int col, row;
    double value;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iid:GwyDataField.set_val", kwlist, &col, &row, &value))
        return NULL;
    
    gwy_data_field_set_val(GWY_DATA_FIELD(self->obj), col, row, value);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_get_dval(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "x", "y", "interpolation", NULL };
    PyObject *py_interpolation = NULL;
    double x, y, ret;
    GwyInterpolationType interpolation;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ddO:GwyDataField.get_dval", kwlist, &x, &y, &py_interpolation))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_INTERPOLATION_TYPE, py_interpolation, (gpointer)&interpolation))
        return NULL;
    
    ret = gwy_data_field_get_dval(GWY_DATA_FIELD(self->obj), x, y, interpolation);
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_field_get_dval_real(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "x", "y", "interpolation", NULL };
    PyObject *py_interpolation = NULL;
    double x, y, ret;
    GwyInterpolationType interpolation;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ddO:GwyDataField.get_dval_real", kwlist, &x, &y, &py_interpolation))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_INTERPOLATION_TYPE, py_interpolation, (gpointer)&interpolation))
        return NULL;
    
    ret = gwy_data_field_get_dval_real(GWY_DATA_FIELD(self->obj), x, y, interpolation);
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_field_rotate(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "angle", "interpolation", NULL };
    PyObject *py_interpolation = NULL;
    double angle;
    GwyInterpolationType interpolation;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"dO:GwyDataField.rotate", kwlist, &angle, &py_interpolation))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_INTERPOLATION_TYPE, py_interpolation, (gpointer)&interpolation))
        return NULL;
    
    gwy_data_field_rotate(GWY_DATA_FIELD(self->obj), angle, interpolation);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_invert(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "x", "y", "z", NULL };
    int x, y, z;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iii:GwyDataField.invert", kwlist, &x, &y, &z))
        return NULL;
    
    gwy_data_field_invert(GWY_DATA_FIELD(self->obj), x, y, z);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_fill(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "value", NULL };
    double value;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"d:GwyDataField.fill", kwlist, &value))
        return NULL;
    
    gwy_data_field_fill(GWY_DATA_FIELD(self->obj), value);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_clear(PyGObject *self)
{
    
    gwy_data_field_clear(GWY_DATA_FIELD(self->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_multiply(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "value", NULL };
    double value;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"d:GwyDataField.multiply", kwlist, &value))
        return NULL;
    
    gwy_data_field_multiply(GWY_DATA_FIELD(self->obj), value);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_add(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "value", NULL };
    double value;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"d:GwyDataField.add", kwlist, &value))
        return NULL;
    
    gwy_data_field_add(GWY_DATA_FIELD(self->obj), value);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_area_fill(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "col", "row", "width", "height", "value", NULL };
    int col, row, width, height;
    double value;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iiiid:GwyDataField.area_fill", kwlist, &col, &row, &width, &height, &value))
        return NULL;
    
    gwy_data_field_area_fill(GWY_DATA_FIELD(self->obj), col, row, width, height, value);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_area_clear(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "col", "row", "width", "height", NULL };
    int col, row, width, height;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iiii:GwyDataField.area_clear", kwlist, &col, &row, &width, &height))
        return NULL;
    
    gwy_data_field_area_clear(GWY_DATA_FIELD(self->obj), col, row, width, height);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_area_multiply(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "col", "row", "width", "height", "value", NULL };
    int col, row, width, height;
    double value;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iiiid:GwyDataField.area_multiply", kwlist, &col, &row, &width, &height, &value))
        return NULL;
    
    gwy_data_field_area_multiply(GWY_DATA_FIELD(self->obj), col, row, width, height, value);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_area_add(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "col", "row", "width", "height", "value", NULL };
    int col, row, width, height;
    double value;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iiiid:GwyDataField.area_add", kwlist, &col, &row, &width, &height, &value))
        return NULL;
    
    gwy_data_field_area_add(GWY_DATA_FIELD(self->obj), col, row, width, height, value);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_get_profile(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "data_line", "scol", "srow", "ecol", "erow", "res", "thickness", "interpolation", NULL };
    PyGObject *data_line;
    int scol, srow, ecol, erow, res, thickness;
    GwyInterpolationType interpolation;
    GwyDataLine *ret;
    PyObject *py_interpolation = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!iiiiiiO:GwyDataField.get_profile", kwlist, &PyGwyDataLine_Type, &data_line, &scol, &srow, &ecol, &erow, &res, &thickness, &py_interpolation))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_INTERPOLATION_TYPE, py_interpolation, (gpointer)&interpolation))
        return NULL;
    
    ret = gwy_data_field_get_profile(GWY_DATA_FIELD(self->obj), GWY_DATA_LINE(data_line->obj), scol, srow, ecol, erow, res, thickness, interpolation);
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_data_field_get_row(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "data_line", "row", NULL };
    PyGObject *data_line;
    int row;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!i:GwyDataField.get_row", kwlist, &PyGwyDataLine_Type, &data_line, &row))
        return NULL;
    
    gwy_data_field_get_row(GWY_DATA_FIELD(self->obj), GWY_DATA_LINE(data_line->obj), row);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_get_column(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "data_line", "col", NULL };
    PyGObject *data_line;
    int col;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!i:GwyDataField.get_column", kwlist, &PyGwyDataLine_Type, &data_line, &col))
        return NULL;
    
    gwy_data_field_get_column(GWY_DATA_FIELD(self->obj), GWY_DATA_LINE(data_line->obj), col);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_set_row(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "data_line", "row", NULL };
    PyGObject *data_line;
    int row;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!i:GwyDataField.set_row", kwlist, &PyGwyDataLine_Type, &data_line, &row))
        return NULL;
    
    gwy_data_field_set_row(GWY_DATA_FIELD(self->obj), GWY_DATA_LINE(data_line->obj), row);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_set_column(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "data_line", "col", NULL };
    PyGObject *data_line;
    int col;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!i:GwyDataField.set_column", kwlist, &PyGwyDataLine_Type, &data_line, &col))
        return NULL;
    
    gwy_data_field_set_column(GWY_DATA_FIELD(self->obj), GWY_DATA_LINE(data_line->obj), col);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_get_row_part(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "data_line", "row", "from_", "to", NULL };
    PyGObject *data_line;
    int row, from, to;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!iii:GwyDataField.get_row_part", kwlist, &PyGwyDataLine_Type, &data_line, &row, &from, &to))
        return NULL;
    
    gwy_data_field_get_row_part(GWY_DATA_FIELD(self->obj), GWY_DATA_LINE(data_line->obj), row, from, to);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_get_column_part(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "data_line", "col", "from_", "to", NULL };
    PyGObject *data_line;
    int col, from, to;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!iii:GwyDataField.get_column_part", kwlist, &PyGwyDataLine_Type, &data_line, &col, &from, &to))
        return NULL;
    
    gwy_data_field_get_column_part(GWY_DATA_FIELD(self->obj), GWY_DATA_LINE(data_line->obj), col, from, to);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_set_row_part(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "data_line", "row", "from_", "to", NULL };
    PyGObject *data_line;
    int row, from, to;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!iii:GwyDataField.set_row_part", kwlist, &PyGwyDataLine_Type, &data_line, &row, &from, &to))
        return NULL;
    
    gwy_data_field_set_row_part(GWY_DATA_FIELD(self->obj), GWY_DATA_LINE(data_line->obj), row, from, to);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_set_column_part(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "data_line", "col", "from_", "to", NULL };
    PyGObject *data_line;
    int col, from, to;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!iii:GwyDataField.set_column_part", kwlist, &PyGwyDataLine_Type, &data_line, &col, &from, &to))
        return NULL;
    
    gwy_data_field_set_column_part(GWY_DATA_FIELD(self->obj), GWY_DATA_LINE(data_line->obj), col, from, to);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_get_xder(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "col", "row", NULL };
    int col, row;
    double ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ii:GwyDataField.get_xder", kwlist, &col, &row))
        return NULL;
    
    ret = gwy_data_field_get_xder(GWY_DATA_FIELD(self->obj), col, row);
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_field_get_yder(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "col", "row", NULL };
    int col, row;
    double ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ii:GwyDataField.get_yder", kwlist, &col, &row))
        return NULL;
    
    ret = gwy_data_field_get_yder(GWY_DATA_FIELD(self->obj), col, row);
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_field_get_angder(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "col", "row", "theta", NULL };
    int col, row;
    double theta, ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iid:GwyDataField.get_angder", kwlist, &col, &row, &theta))
        return NULL;
    
    ret = gwy_data_field_get_angder(GWY_DATA_FIELD(self->obj), col, row, theta);
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_field_xdwt(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "wt_coefs", "direction", "minsize", NULL };
    PyGObject *wt_coefs;
    GwyTransformDirection direction;
    int minsize;
    PyObject *py_direction = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!Oi:GwyDataField.xdwt", kwlist, &PyGwyDataLine_Type, &wt_coefs, &py_direction, &minsize))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_TRANSFORM_DIRECTION, py_direction, (gpointer)&direction))
        return NULL;
    
    gwy_data_field_xdwt(GWY_DATA_FIELD(self->obj), GWY_DATA_LINE(wt_coefs->obj), direction, minsize);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_ydwt(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "wt_coefs", "direction", "minsize", NULL };
    PyGObject *wt_coefs;
    GwyTransformDirection direction;
    int minsize;
    PyObject *py_direction = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!Oi:GwyDataField.ydwt", kwlist, &PyGwyDataLine_Type, &wt_coefs, &py_direction, &minsize))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_TRANSFORM_DIRECTION, py_direction, (gpointer)&direction))
        return NULL;
    
    gwy_data_field_ydwt(GWY_DATA_FIELD(self->obj), GWY_DATA_LINE(wt_coefs->obj), direction, minsize);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_dwt(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "wt_coefs", "direction", "minsize", NULL };
    PyGObject *wt_coefs;
    GwyTransformDirection direction;
    int minsize;
    PyObject *py_direction = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!Oi:GwyDataField.dwt", kwlist, &PyGwyDataLine_Type, &wt_coefs, &py_direction, &minsize))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_TRANSFORM_DIRECTION, py_direction, (gpointer)&direction))
        return NULL;
    
    gwy_data_field_dwt(GWY_DATA_FIELD(self->obj), GWY_DATA_LINE(wt_coefs->obj), direction, minsize);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_dwt_mark_anisotropy(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "mask", "wt_coefs", "ratio", "lowlimit", NULL };
    PyGObject *mask, *wt_coefs;
    double ratio;
    int lowlimit;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!di:GwyDataField.dwt_mark_anisotropy", kwlist, &PyGwyDataField_Type, &mask, &PyGwyDataLine_Type, &wt_coefs, &ratio, &lowlimit))
        return NULL;
    
    gwy_data_field_dwt_mark_anisotropy(GWY_DATA_FIELD(self->obj), GWY_DATA_FIELD(mask->obj), GWY_DATA_LINE(wt_coefs->obj), ratio, lowlimit);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_elliptic_area_fill(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "col", "row", "width", "height", "value", NULL };
    int col, row, width, height, ret;
    double value;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iiiid:GwyDataField.elliptic_area_fill", kwlist, &col, &row, &width, &height, &value))
        return NULL;
    
    ret = gwy_data_field_elliptic_area_fill(GWY_DATA_FIELD(self->obj), col, row, width, height, value);
    
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_gwy_data_field_elliptic_area_unextract(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "col", "row", "width", "height", "data", NULL };
    int col, row, width, height, i_data;
    PyObject *data_pyobj;
    gdouble *data;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iiiiO:GwyDataField.elliptic_area_unextract", kwlist, &col, &row, &width, &height, &data_pyobj))
        return NULL;
    if (!PyList_Check(data_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'data' must be a list of floats");
        return NULL;
    }
    data =  g_malloc(sizeof(gdouble)*PyList_Size(data_pyobj));
    if (data == NULL) {
        return PyErr_NoMemory();
    }
    for (i_data = 0; i_data < PyList_Size(data_pyobj); i_data++) {
        if (!PyFloat_Check(PyList_GetItem(data_pyobj, i_data))) {
            g_free(data);
            PyErr_SetString(PyExc_TypeError, "Parameter 'data' must be a list of floats");
            return NULL;
        }
        data[i_data] = PyFloat_AsDouble(PyList_GetItem(data_pyobj, i_data));
    }
    
    gwy_data_field_elliptic_area_unextract(GWY_DATA_FIELD(self->obj), col, row, width, height, data);
    
    g_free(data);
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_circular_area_fill(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "col", "row", "radius", "value", NULL };
    int col, row, ret;
    double radius, value;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iidd:GwyDataField.circular_area_fill", kwlist, &col, &row, &radius, &value))
        return NULL;
    
    ret = gwy_data_field_circular_area_fill(GWY_DATA_FIELD(self->obj), col, row, radius, value);
    
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_gwy_data_field_circular_area_unextract(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "col", "row", "radius", "data", NULL };
    int col, row, i_data;
    double radius;
    PyObject *data_pyobj;
    gdouble *data;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iidO:GwyDataField.circular_area_unextract", kwlist, &col, &row, &radius, &data_pyobj))
        return NULL;
    if (!PyList_Check(data_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'data' must be a list of floats");
        return NULL;
    }
    data =  g_malloc(sizeof(gdouble)*PyList_Size(data_pyobj));
    if (data == NULL) {
        return PyErr_NoMemory();
    }
    for (i_data = 0; i_data < PyList_Size(data_pyobj); i_data++) {
        if (!PyFloat_Check(PyList_GetItem(data_pyobj, i_data))) {
            g_free(data);
            PyErr_SetString(PyExc_TypeError, "Parameter 'data' must be a list of floats");
            return NULL;
        }
        data[i_data] = PyFloat_AsDouble(PyList_GetItem(data_pyobj, i_data));
    }
    
    gwy_data_field_circular_area_unextract(GWY_DATA_FIELD(self->obj), col, row, radius, data);
    
    g_free(data);
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_normalize(PyGObject *self)
{
    
    gwy_data_field_normalize(GWY_DATA_FIELD(self->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_renormalize(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "range", "offset", NULL };
    double range, offset;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"dd:GwyDataField.renormalize", kwlist, &range, &offset))
        return NULL;
    
    gwy_data_field_renormalize(GWY_DATA_FIELD(self->obj), range, offset);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_threshold(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "threshval", "bottom", "top", NULL };
    int ret;
    double threshval, bottom, top;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ddd:GwyDataField.threshold", kwlist, &threshval, &bottom, &top))
        return NULL;
    
    ret = gwy_data_field_threshold(GWY_DATA_FIELD(self->obj), threshval, bottom, top);
    
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_gwy_data_field_area_threshold(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "col", "row", "width", "height", "threshval", "bottom", "top", NULL };
    int col, row, width, height, ret;
    double threshval, bottom, top;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iiiiddd:GwyDataField.area_threshold", kwlist, &col, &row, &width, &height, &threshval, &bottom, &top))
        return NULL;
    
    ret = gwy_data_field_area_threshold(GWY_DATA_FIELD(self->obj), col, row, width, height, threshval, bottom, top);
    
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_gwy_data_field_clamp(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "bottom", "top", NULL };
    int ret;
    double bottom, top;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"dd:GwyDataField.clamp", kwlist, &bottom, &top))
        return NULL;
    
    ret = gwy_data_field_clamp(GWY_DATA_FIELD(self->obj), bottom, top);
    
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_gwy_data_field_area_clamp(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "col", "row", "width", "height", "bottom", "top", NULL };
    int col, row, width, height, ret;
    double bottom, top;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iiiidd:GwyDataField.area_clamp", kwlist, &col, &row, &width, &height, &bottom, &top))
        return NULL;
    
    ret = gwy_data_field_area_clamp(GWY_DATA_FIELD(self->obj), col, row, width, height, bottom, top);
    
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_gwy_data_field_area_gather(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "result", "buffer", "hsize", "vsize", "average", "col", "row", "width", "height", NULL };
    PyGObject *result, *buffer;
    int hsize, vsize, average, col, row, width, height;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!iiiiiii:GwyDataField.area_gather", kwlist, &PyGwyDataField_Type, &result, &PyGwyDataField_Type, &buffer, &hsize, &vsize, &average, &col, &row, &width, &height))
        return NULL;
    
    gwy_data_field_area_gather(GWY_DATA_FIELD(self->obj), GWY_DATA_FIELD(result->obj), GWY_DATA_FIELD(buffer->obj), hsize, vsize, average, col, row, width, height);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_convolve(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "kernel_field", NULL };
    PyGObject *kernel_field;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:GwyDataField.convolve", kwlist, &PyGwyDataField_Type, &kernel_field))
        return NULL;
    
    gwy_data_field_convolve(GWY_DATA_FIELD(self->obj), GWY_DATA_FIELD(kernel_field->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_area_convolve(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "kernel_field", "col", "row", "width", "height", NULL };
    PyGObject *kernel_field;
    int col, row, width, height;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!iiii:GwyDataField.area_convolve", kwlist, &PyGwyDataField_Type, &kernel_field, &col, &row, &width, &height))
        return NULL;
    
    gwy_data_field_area_convolve(GWY_DATA_FIELD(self->obj), GWY_DATA_FIELD(kernel_field->obj), col, row, width, height);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_convolve_1d(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "kernel_line", "orientation", NULL };
    PyGObject *kernel_line;
    PyObject *py_orientation = NULL;
    GwyOrientation orientation;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O:GwyDataField.convolve_1d", kwlist, &PyGwyDataLine_Type, &kernel_line, &py_orientation))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_ORIENTATION, py_orientation, (gpointer)&orientation))
        return NULL;
    
    gwy_data_field_convolve_1d(GWY_DATA_FIELD(self->obj), GWY_DATA_LINE(kernel_line->obj), orientation);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_area_convolve_1d(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "kernel_line", "orientation", "col", "row", "width", "height", NULL };
    PyGObject *kernel_line;
    PyObject *py_orientation = NULL;
    int col, row, width, height;
    GwyOrientation orientation;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!Oiiii:GwyDataField.area_convolve_1d", kwlist, &PyGwyDataLine_Type, &kernel_line, &py_orientation, &col, &row, &width, &height))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_ORIENTATION, py_orientation, (gpointer)&orientation))
        return NULL;
    
    gwy_data_field_area_convolve_1d(GWY_DATA_FIELD(self->obj), GWY_DATA_LINE(kernel_line->obj), orientation, col, row, width, height);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_filter_median(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "size", NULL };
    int size;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:GwyDataField.filter_median", kwlist, &size))
        return NULL;
    
    gwy_data_field_filter_median(GWY_DATA_FIELD(self->obj), size);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_area_filter_median(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "size", "col", "row", "width", "height", NULL };
    int size, col, row, width, height;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iiiii:GwyDataField.area_filter_median", kwlist, &size, &col, &row, &width, &height))
        return NULL;
    
    gwy_data_field_area_filter_median(GWY_DATA_FIELD(self->obj), size, col, row, width, height);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_filter_mean(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "size", NULL };
    int size;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:GwyDataField.filter_mean", kwlist, &size))
        return NULL;
    
    gwy_data_field_filter_mean(GWY_DATA_FIELD(self->obj), size);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_area_filter_mean(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "size", "col", "row", "width", "height", NULL };
    int size, col, row, width, height;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iiiii:GwyDataField.area_filter_mean", kwlist, &size, &col, &row, &width, &height))
        return NULL;
    
    gwy_data_field_area_filter_mean(GWY_DATA_FIELD(self->obj), size, col, row, width, height);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_filter_conservative(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "size", NULL };
    int size;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:GwyDataField.filter_conservative", kwlist, &size))
        return NULL;
    
    gwy_data_field_filter_conservative(GWY_DATA_FIELD(self->obj), size);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_area_filter_conservative(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "size", "col", "row", "width", "height", NULL };
    int size, col, row, width, height;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iiiii:GwyDataField.area_filter_conservative", kwlist, &size, &col, &row, &width, &height))
        return NULL;
    
    gwy_data_field_area_filter_conservative(GWY_DATA_FIELD(self->obj), size, col, row, width, height);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_filter_laplacian(PyGObject *self)
{
    
    gwy_data_field_filter_laplacian(GWY_DATA_FIELD(self->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_area_filter_laplacian(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "col", "row", "width", "height", NULL };
    int col, row, width, height;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iiii:GwyDataField.area_filter_laplacian", kwlist, &col, &row, &width, &height))
        return NULL;
    
    gwy_data_field_area_filter_laplacian(GWY_DATA_FIELD(self->obj), col, row, width, height);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_filter_sobel(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "orientation", NULL };
    PyObject *py_orientation = NULL;
    GwyOrientation orientation;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O:GwyDataField.filter_sobel", kwlist, &py_orientation))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_ORIENTATION, py_orientation, (gpointer)&orientation))
        return NULL;
    
    gwy_data_field_filter_sobel(GWY_DATA_FIELD(self->obj), orientation);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_area_filter_sobel(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "orientation", "col", "row", "width", "height", NULL };
    PyObject *py_orientation = NULL;
    int col, row, width, height;
    GwyOrientation orientation;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"Oiiii:GwyDataField.area_filter_sobel", kwlist, &py_orientation, &col, &row, &width, &height))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_ORIENTATION, py_orientation, (gpointer)&orientation))
        return NULL;
    
    gwy_data_field_area_filter_sobel(GWY_DATA_FIELD(self->obj), orientation, col, row, width, height);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_filter_prewitt(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "orientation", NULL };
    PyObject *py_orientation = NULL;
    GwyOrientation orientation;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O:GwyDataField.filter_prewitt", kwlist, &py_orientation))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_ORIENTATION, py_orientation, (gpointer)&orientation))
        return NULL;
    
    gwy_data_field_filter_prewitt(GWY_DATA_FIELD(self->obj), orientation);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_area_filter_prewitt(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "orientation", "col", "row", "width", "height", NULL };
    PyObject *py_orientation = NULL;
    int col, row, width, height;
    GwyOrientation orientation;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"Oiiii:GwyDataField.area_filter_prewitt", kwlist, &py_orientation, &col, &row, &width, &height))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_ORIENTATION, py_orientation, (gpointer)&orientation))
        return NULL;
    
    gwy_data_field_area_filter_prewitt(GWY_DATA_FIELD(self->obj), orientation, col, row, width, height);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_filter_dechecker(PyGObject *self)
{
    
    gwy_data_field_filter_dechecker(GWY_DATA_FIELD(self->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_area_filter_dechecker(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "col", "row", "width", "height", NULL };
    int col, row, width, height;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iiii:GwyDataField.area_filter_dechecker", kwlist, &col, &row, &width, &height))
        return NULL;
    
    gwy_data_field_area_filter_dechecker(GWY_DATA_FIELD(self->obj), col, row, width, height);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_filter_gaussian(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "sigma", NULL };
    double sigma;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"d:GwyDataField.filter_gaussian", kwlist, &sigma))
        return NULL;
    
    gwy_data_field_filter_gaussian(GWY_DATA_FIELD(self->obj), sigma);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_area_filter_gaussian(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "sigma", "col", "row", "width", "height", NULL };
    int col, row, width, height;
    double sigma;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"diiii:GwyDataField.area_filter_gaussian", kwlist, &sigma, &col, &row, &width, &height))
        return NULL;
    
    gwy_data_field_area_filter_gaussian(GWY_DATA_FIELD(self->obj), sigma, col, row, width, height);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_filter_minimum(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "size", NULL };
    int size;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:GwyDataField.filter_minimum", kwlist, &size))
        return NULL;
    
    gwy_data_field_filter_minimum(GWY_DATA_FIELD(self->obj), size);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_area_filter_minimum(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "size", "col", "row", "width", "height", NULL };
    int size, col, row, width, height;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iiiii:GwyDataField.area_filter_minimum", kwlist, &size, &col, &row, &width, &height))
        return NULL;
    
    gwy_data_field_area_filter_minimum(GWY_DATA_FIELD(self->obj), size, col, row, width, height);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_filter_maximum(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "size", NULL };
    int size;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:GwyDataField.filter_maximum", kwlist, &size))
        return NULL;
    
    gwy_data_field_filter_maximum(GWY_DATA_FIELD(self->obj), size);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_area_filter_maximum(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "size", "col", "row", "width", "height", NULL };
    int size, col, row, width, height;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iiiii:GwyDataField.area_filter_maximum", kwlist, &size, &col, &row, &width, &height))
        return NULL;
    
    gwy_data_field_area_filter_maximum(GWY_DATA_FIELD(self->obj), size, col, row, width, height);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_filter_rms(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "size", NULL };
    int size;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:GwyDataField.filter_rms", kwlist, &size))
        return NULL;
    
    gwy_data_field_filter_rms(GWY_DATA_FIELD(self->obj), size);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_area_filter_rms(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "size", "col", "row", "width", "height", NULL };
    int size, col, row, width, height;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iiiii:GwyDataField.area_filter_rms", kwlist, &size, &col, &row, &width, &height))
        return NULL;
    
    gwy_data_field_area_filter_rms(GWY_DATA_FIELD(self->obj), size, col, row, width, height);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_filter_kuwahara(PyGObject *self)
{
    
    gwy_data_field_filter_kuwahara(GWY_DATA_FIELD(self->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_area_filter_kuwahara(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "col", "row", "width", "height", NULL };
    int col, row, width, height;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iiii:GwyDataField.area_filter_kuwahara", kwlist, &col, &row, &width, &height))
        return NULL;
    
    gwy_data_field_area_filter_kuwahara(GWY_DATA_FIELD(self->obj), col, row, width, height);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_filter_canny(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "threshold", NULL };
    double threshold;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"d:GwyDataField.filter_canny", kwlist, &threshold))
        return NULL;
    
    gwy_data_field_filter_canny(GWY_DATA_FIELD(self->obj), threshold);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_shade(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "target_field", "theta", "phi", NULL };
    PyGObject *target_field;
    double theta, phi;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!dd:GwyDataField.shade", kwlist, &PyGwyDataField_Type, &target_field, &theta, &phi))
        return NULL;
    
    gwy_data_field_shade(GWY_DATA_FIELD(self->obj), GWY_DATA_FIELD(target_field->obj), theta, phi);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_filter_harris(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "y_gradient", "result", "neighbourhood", "alpha", NULL };
    PyGObject *y_gradient, *result;
    int neighbourhood;
    double alpha;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!id:GwyDataField.filter_harris", kwlist, &PyGwyDataField_Type, &y_gradient, &PyGwyDataField_Type, &result, &neighbourhood, &alpha))
        return NULL;
    
    gwy_data_field_filter_harris(GWY_DATA_FIELD(self->obj), GWY_DATA_FIELD(y_gradient->obj), GWY_DATA_FIELD(result->obj), neighbourhood, alpha);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_fractal_partitioning(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "xresult", "yresult", "interpolation", NULL };
    PyGObject *xresult, *yresult;
    PyObject *py_interpolation = NULL;
    GwyInterpolationType interpolation;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!O:GwyDataField.fractal_partitioning", kwlist, &PyGwyDataLine_Type, &xresult, &PyGwyDataLine_Type, &yresult, &py_interpolation))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_INTERPOLATION_TYPE, py_interpolation, (gpointer)&interpolation))
        return NULL;
    
    gwy_data_field_fractal_partitioning(GWY_DATA_FIELD(self->obj), GWY_DATA_LINE(xresult->obj), GWY_DATA_LINE(yresult->obj), interpolation);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_fractal_cubecounting(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "xresult", "yresult", "interpolation", NULL };
    PyGObject *xresult, *yresult;
    PyObject *py_interpolation = NULL;
    GwyInterpolationType interpolation;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!O:GwyDataField.fractal_cubecounting", kwlist, &PyGwyDataLine_Type, &xresult, &PyGwyDataLine_Type, &yresult, &py_interpolation))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_INTERPOLATION_TYPE, py_interpolation, (gpointer)&interpolation))
        return NULL;
    
    gwy_data_field_fractal_cubecounting(GWY_DATA_FIELD(self->obj), GWY_DATA_LINE(xresult->obj), GWY_DATA_LINE(yresult->obj), interpolation);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_fractal_triangulation(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "xresult", "yresult", "interpolation", NULL };
    PyGObject *xresult, *yresult;
    PyObject *py_interpolation = NULL;
    GwyInterpolationType interpolation;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!O:GwyDataField.fractal_triangulation", kwlist, &PyGwyDataLine_Type, &xresult, &PyGwyDataLine_Type, &yresult, &py_interpolation))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_INTERPOLATION_TYPE, py_interpolation, (gpointer)&interpolation))
        return NULL;
    
    gwy_data_field_fractal_triangulation(GWY_DATA_FIELD(self->obj), GWY_DATA_LINE(xresult->obj), GWY_DATA_LINE(yresult->obj), interpolation);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_fractal_psdf(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "xresult", "yresult", "interpolation", NULL };
    PyGObject *xresult, *yresult;
    PyObject *py_interpolation = NULL;
    GwyInterpolationType interpolation;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!O:GwyDataField.fractal_psdf", kwlist, &PyGwyDataLine_Type, &xresult, &PyGwyDataLine_Type, &yresult, &py_interpolation))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_INTERPOLATION_TYPE, py_interpolation, (gpointer)&interpolation))
        return NULL;
    
    gwy_data_field_fractal_psdf(GWY_DATA_FIELD(self->obj), GWY_DATA_LINE(xresult->obj), GWY_DATA_LINE(yresult->obj), interpolation);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_fractal_correction(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "mask_field", "interpolation", NULL };
    PyGObject *mask_field;
    PyObject *py_interpolation = NULL;
    GwyInterpolationType interpolation;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O:GwyDataField.fractal_correction", kwlist, &PyGwyDataField_Type, &mask_field, &py_interpolation))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_INTERPOLATION_TYPE, py_interpolation, (gpointer)&interpolation))
        return NULL;
    
    gwy_data_field_fractal_correction(GWY_DATA_FIELD(self->obj), GWY_DATA_FIELD(mask_field->obj), interpolation);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_grains_mark_curvature(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "grain_field", "threshval", "below", NULL };
    PyGObject *grain_field;
    double threshval;
    int below;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!di:GwyDataField.grains_mark_curvature", kwlist, &PyGwyDataField_Type, &grain_field, &threshval, &below))
        return NULL;
    
    gwy_data_field_grains_mark_curvature(GWY_DATA_FIELD(self->obj), GWY_DATA_FIELD(grain_field->obj), threshval, below);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_grains_mark_watershed(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "grain_field", "locate_steps", "locate_thresh", "locate_dropsize", "wshed_steps", "wshed_dropsize", "prefilter", "below", NULL };
    PyGObject *grain_field;
    int locate_steps, locate_thresh, wshed_steps, prefilter, below;
    double locate_dropsize, wshed_dropsize;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!iididii:GwyDataField.grains_mark_watershed", kwlist, &PyGwyDataField_Type, &grain_field, &locate_steps, &locate_thresh, &locate_dropsize, &wshed_steps, &wshed_dropsize, &prefilter, &below))
        return NULL;
    
    gwy_data_field_grains_mark_watershed(GWY_DATA_FIELD(self->obj), GWY_DATA_FIELD(grain_field->obj), locate_steps, locate_thresh, locate_dropsize, wshed_steps, wshed_dropsize, prefilter, below);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_grains_remove_grain(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "col", "row", NULL };
    int col, row, ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ii:GwyDataField.grains_remove_grain", kwlist, &col, &row))
        return NULL;
    
    ret = gwy_data_field_grains_remove_grain(GWY_DATA_FIELD(self->obj), col, row);
    
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_data_field_grains_extract_grain(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "col", "row", NULL };
    int col, row, ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ii:GwyDataField.grains_extract_grain", kwlist, &col, &row))
        return NULL;
    
    ret = gwy_data_field_grains_extract_grain(GWY_DATA_FIELD(self->obj), col, row);
    
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_data_field_grains_remove_by_size(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "size", NULL };
    int size;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:GwyDataField.grains_remove_by_size", kwlist, &size))
        return NULL;
    
    gwy_data_field_grains_remove_by_size(GWY_DATA_FIELD(self->obj), size);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_grains_remove_by_height(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "grain_field", "threshval", "below", NULL };
    PyGObject *grain_field;
    double threshval;
    int below;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!di:GwyDataField.grains_remove_by_height", kwlist, &PyGwyDataField_Type, &grain_field, &threshval, &below))
        return NULL;
    
    gwy_data_field_grains_remove_by_height(GWY_DATA_FIELD(self->obj), GWY_DATA_FIELD(grain_field->obj), threshval, below);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_grains_mark_height(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "grain_field", "threshval", "below", NULL };
    PyGObject *grain_field;
    double threshval;
    int below;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!di:GwyDataField.grains_mark_height", kwlist, &PyGwyDataField_Type, &grain_field, &threshval, &below))
        return NULL;
    
    gwy_data_field_grains_mark_height(GWY_DATA_FIELD(self->obj), GWY_DATA_FIELD(grain_field->obj), threshval, below);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_grains_mark_slope(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "grain_field", "threshval", "below", NULL };
    PyGObject *grain_field;
    double threshval;
    int below;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!di:GwyDataField.grains_mark_slope", kwlist, &PyGwyDataField_Type, &grain_field, &threshval, &below))
        return NULL;
    
    gwy_data_field_grains_mark_slope(GWY_DATA_FIELD(self->obj), GWY_DATA_FIELD(grain_field->obj), threshval, below);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_grains_add(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "add_field", NULL };
    PyGObject *add_field;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:GwyDataField.grains_add", kwlist, &PyGwyDataField_Type, &add_field))
        return NULL;
    
    gwy_data_field_grains_add(GWY_DATA_FIELD(self->obj), GWY_DATA_FIELD(add_field->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_grains_intersect(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "intersect_field", NULL };
    PyGObject *intersect_field;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:GwyDataField.grains_intersect", kwlist, &PyGwyDataField_Type, &intersect_field))
        return NULL;
    
    gwy_data_field_grains_intersect(GWY_DATA_FIELD(self->obj), GWY_DATA_FIELD(intersect_field->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_area_grains_tgnd(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "target_line", "col", "row", "width", "height", "below", "nstats", NULL };
    PyGObject *target_line;
    int col, row, width, height, below, nstats;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!iiiiii:GwyDataField.area_grains_tgnd", kwlist, &PyGwyDataLine_Type, &target_line, &col, &row, &width, &height, &below, &nstats))
        return NULL;
    
    gwy_data_field_area_grains_tgnd(GWY_DATA_FIELD(self->obj), GWY_DATA_LINE(target_line->obj), col, row, width, height, below, nstats);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_grains_splash_water(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "minima", "locate_steps", "locate_dropsize", NULL };
    PyGObject *minima;
    int locate_steps;
    double locate_dropsize;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!id:GwyDataField.grains_splash_water", kwlist, &PyGwyDataField_Type, &minima, &locate_steps, &locate_dropsize))
        return NULL;
    
    gwy_data_field_grains_splash_water(GWY_DATA_FIELD(self->obj), GWY_DATA_FIELD(minima->obj), locate_steps, locate_dropsize);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_hough_line(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "x_gradient", "y_gradient", "result", "hwidth", "overlapping", NULL };
    PyGObject *x_gradient, *y_gradient, *result;
    int hwidth, overlapping;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!O!ii:GwyDataField.hough_line", kwlist, &PyGwyDataField_Type, &x_gradient, &PyGwyDataField_Type, &y_gradient, &PyGwyDataField_Type, &result, &hwidth, &overlapping))
        return NULL;
    
    gwy_data_field_hough_line(GWY_DATA_FIELD(self->obj), GWY_DATA_FIELD(x_gradient->obj), GWY_DATA_FIELD(y_gradient->obj), GWY_DATA_FIELD(result->obj), hwidth, overlapping);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_hough_circle(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "x_gradient", "y_gradient", "result", "radius", NULL };
    PyGObject *x_gradient, *y_gradient, *result;
    double radius;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!O!d:GwyDataField.hough_circle", kwlist, &PyGwyDataField_Type, &x_gradient, &PyGwyDataField_Type, &y_gradient, &PyGwyDataField_Type, &result, &radius))
        return NULL;
    
    gwy_data_field_hough_circle(GWY_DATA_FIELD(self->obj), GWY_DATA_FIELD(x_gradient->obj), GWY_DATA_FIELD(y_gradient->obj), GWY_DATA_FIELD(result->obj), radius);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_hough_line_strenghten(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "x_gradient", "y_gradient", "hwidth", "threshold", NULL };
    PyGObject *x_gradient, *y_gradient;
    int hwidth;
    double threshold;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!id:GwyDataField.hough_line_strenghten", kwlist, &PyGwyDataField_Type, &x_gradient, &PyGwyDataField_Type, &y_gradient, &hwidth, &threshold))
        return NULL;
    
    gwy_data_field_hough_line_strenghten(GWY_DATA_FIELD(self->obj), GWY_DATA_FIELD(x_gradient->obj), GWY_DATA_FIELD(y_gradient->obj), hwidth, threshold);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_hough_circle_strenghten(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "x_gradient", "y_gradient", "radius", "threshold", NULL };
    PyGObject *x_gradient, *y_gradient;
    double radius, threshold;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!dd:GwyDataField.hough_circle_strenghten", kwlist, &PyGwyDataField_Type, &x_gradient, &PyGwyDataField_Type, &y_gradient, &radius, &threshold))
        return NULL;
    
    gwy_data_field_hough_circle_strenghten(GWY_DATA_FIELD(self->obj), GWY_DATA_FIELD(x_gradient->obj), GWY_DATA_FIELD(y_gradient->obj), radius, threshold);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_hough_polar_line_to_datafield(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "rho", "theta", "px1", "px2", "py1", "py2", NULL };
    PyObject *px1_pyobj, *px2_pyobj, *py1_pyobj, *py2_pyobj;
    double rho, theta;
    GIntValue px1, px2, py1, py2;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ddOOOO:GwyDataField.hough_polar_line_to_datafield", kwlist, &rho, &theta, &px1_pyobj, &px2_pyobj, &py1_pyobj, &py2_pyobj))
        return NULL;
    if (!PyInt_Check(px1_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'px1' must be an integer variable");
        return NULL;
    }
    px1 = (int) PyInt_AsLong(px1_pyobj);
    if (!PyInt_Check(px2_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'px2' must be an integer variable");
        return NULL;
    }
    px2 = (int) PyInt_AsLong(px2_pyobj);
    if (!PyInt_Check(py1_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'py1' must be an integer variable");
        return NULL;
    }
    py1 = (int) PyInt_AsLong(py1_pyobj);
    if (!PyInt_Check(py2_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'py2' must be an integer variable");
        return NULL;
    }
    py2 = (int) PyInt_AsLong(py2_pyobj);
    
    gwy_data_field_hough_polar_line_to_datafield(GWY_DATA_FIELD(self->obj), rho, theta, &px1, &px2, &py1, &py2);
    
    ((PyIntObject *) px1_pyobj)->ob_ival = px1;
    ((PyIntObject *) px2_pyobj)->ob_ival = px2;
    ((PyIntObject *) py1_pyobj)->ob_ival = py1;
    ((PyIntObject *) py2_pyobj)->ob_ival = py2;
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_1dfft(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "iin", "rout", "iout", "orientation", "windowing", "direction", "interpolation", "preserverms", "level", NULL };
    GwyTransformDirection direction;
    GwyWindowingType windowing;
    PyObject *py_orientation = NULL, *py_windowing = NULL, *py_direction = NULL, *py_interpolation = NULL;
    int preserverms, level;
    PyGObject *iin, *rout, *iout;
    GwyInterpolationType interpolation;
    GwyOrientation orientation;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!O!OOOOii:GwyDataField.a_1dfft", kwlist, &PyGwyDataField_Type, &iin, &PyGwyDataField_Type, &rout, &PyGwyDataField_Type, &iout, &py_orientation, &py_windowing, &py_direction, &py_interpolation, &preserverms, &level))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_ORIENTATION, py_orientation, (gpointer)&orientation))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_WINDOWING_TYPE, py_windowing, (gpointer)&windowing))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_TRANSFORM_DIRECTION, py_direction, (gpointer)&direction))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_INTERPOLATION_TYPE, py_interpolation, (gpointer)&interpolation))
        return NULL;
    
    gwy_data_field_1dfft(GWY_DATA_FIELD(self->obj), GWY_DATA_FIELD(iin->obj), GWY_DATA_FIELD(rout->obj), GWY_DATA_FIELD(iout->obj), orientation, windowing, direction, interpolation, preserverms, level);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_area_1dfft(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "iin", "rout", "iout", "col", "row", "width", "height", "orientation", "windowing", "direction", "interpolation", "preserverms", "level", NULL };
    GwyTransformDirection direction;
    GwyWindowingType windowing;
    int col, row, width, height, preserverms, level;
    PyObject *py_orientation = NULL, *py_windowing = NULL, *py_direction = NULL, *py_interpolation = NULL;
    PyGObject *iin, *rout, *iout;
    GwyInterpolationType interpolation;
    GwyOrientation orientation;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!O!iiiiOOOOii:GwyDataField.area_1dfft", kwlist, &PyGwyDataField_Type, &iin, &PyGwyDataField_Type, &rout, &PyGwyDataField_Type, &iout, &col, &row, &width, &height, &py_orientation, &py_windowing, &py_direction, &py_interpolation, &preserverms, &level))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_ORIENTATION, py_orientation, (gpointer)&orientation))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_WINDOWING_TYPE, py_windowing, (gpointer)&windowing))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_TRANSFORM_DIRECTION, py_direction, (gpointer)&direction))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_INTERPOLATION_TYPE, py_interpolation, (gpointer)&interpolation))
        return NULL;
    
    gwy_data_field_area_1dfft(GWY_DATA_FIELD(self->obj), GWY_DATA_FIELD(iin->obj), GWY_DATA_FIELD(rout->obj), GWY_DATA_FIELD(iout->obj), col, row, width, height, orientation, windowing, direction, interpolation, preserverms, level);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_1dfft_raw(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "iin", "rout", "iout", "orientation", "direction", NULL };
    PyGObject *iin, *rout, *iout;
    PyObject *py_orientation = NULL, *py_direction = NULL;
    GwyOrientation orientation;
    GwyTransformDirection direction;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!O!OO:GwyDataField.a_1dfft_raw", kwlist, &PyGwyDataField_Type, &iin, &PyGwyDataField_Type, &rout, &PyGwyDataField_Type, &iout, &py_orientation, &py_direction))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_ORIENTATION, py_orientation, (gpointer)&orientation))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_TRANSFORM_DIRECTION, py_direction, (gpointer)&direction))
        return NULL;
    
    gwy_data_field_1dfft_raw(GWY_DATA_FIELD(self->obj), GWY_DATA_FIELD(iin->obj), GWY_DATA_FIELD(rout->obj), GWY_DATA_FIELD(iout->obj), orientation, direction);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_2dfft(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "iin", "rout", "iout", "windowing", "direction", "interpolation", "preserverms", "level", NULL };
    GwyWindowingType windowing;
    GwyTransformDirection direction;
    int preserverms, level;
    PyObject *py_windowing = NULL, *py_direction = NULL, *py_interpolation = NULL;
    PyGObject *iin, *rout, *iout;
    GwyInterpolationType interpolation;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!O!OOOii:GwyDataField.a_2dfft", kwlist, &PyGwyDataField_Type, &iin, &PyGwyDataField_Type, &rout, &PyGwyDataField_Type, &iout, &py_windowing, &py_direction, &py_interpolation, &preserverms, &level))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_WINDOWING_TYPE, py_windowing, (gpointer)&windowing))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_TRANSFORM_DIRECTION, py_direction, (gpointer)&direction))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_INTERPOLATION_TYPE, py_interpolation, (gpointer)&interpolation))
        return NULL;
    
    gwy_data_field_2dfft(GWY_DATA_FIELD(self->obj), GWY_DATA_FIELD(iin->obj), GWY_DATA_FIELD(rout->obj), GWY_DATA_FIELD(iout->obj), windowing, direction, interpolation, preserverms, level);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_area_2dfft(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "iin", "rout", "iout", "col", "row", "width", "height", "windowing", "direction", "interpolation", "preserverms", "level", NULL };
    GwyTransformDirection direction;
    GwyWindowingType windowing;
    int col, row, width, height, preserverms, level;
    PyObject *py_windowing = NULL, *py_direction = NULL, *py_interpolation = NULL;
    PyGObject *iin, *rout, *iout;
    GwyInterpolationType interpolation;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!O!iiiiOOOii:GwyDataField.area_2dfft", kwlist, &PyGwyDataField_Type, &iin, &PyGwyDataField_Type, &rout, &PyGwyDataField_Type, &iout, &col, &row, &width, &height, &py_windowing, &py_direction, &py_interpolation, &preserverms, &level))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_WINDOWING_TYPE, py_windowing, (gpointer)&windowing))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_TRANSFORM_DIRECTION, py_direction, (gpointer)&direction))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_INTERPOLATION_TYPE, py_interpolation, (gpointer)&interpolation))
        return NULL;
    
    gwy_data_field_area_2dfft(GWY_DATA_FIELD(self->obj), GWY_DATA_FIELD(iin->obj), GWY_DATA_FIELD(rout->obj), GWY_DATA_FIELD(iout->obj), col, row, width, height, windowing, direction, interpolation, preserverms, level);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_2dfft_raw(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "iin", "rout", "iout", "direction", NULL };
    PyGObject *iin, *rout, *iout;
    GwyTransformDirection direction;
    PyObject *py_direction = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!O!O:GwyDataField.a_2dfft_raw", kwlist, &PyGwyDataField_Type, &iin, &PyGwyDataField_Type, &rout, &PyGwyDataField_Type, &iout, &py_direction))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_TRANSFORM_DIRECTION, py_direction, (gpointer)&direction))
        return NULL;
    
    gwy_data_field_2dfft_raw(GWY_DATA_FIELD(self->obj), GWY_DATA_FIELD(iin->obj), GWY_DATA_FIELD(rout->obj), GWY_DATA_FIELD(iout->obj), direction);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_2dfft_humanize(PyGObject *self)
{
    
    gwy_data_field_2dfft_humanize(GWY_DATA_FIELD(self->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_2dfft_dehumanize(PyGObject *self)
{
    
    gwy_data_field_2dfft_dehumanize(GWY_DATA_FIELD(self->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_fft_filter_1d(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "result_field", "weights", "orientation", "interpolation", NULL };
    PyGObject *result_field, *weights;
    PyObject *py_orientation = NULL, *py_interpolation = NULL;
    GwyInterpolationType interpolation;
    GwyOrientation orientation;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!OO:GwyDataField.fft_filter_1d", kwlist, &PyGwyDataField_Type, &result_field, &PyGwyDataLine_Type, &weights, &py_orientation, &py_interpolation))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_ORIENTATION, py_orientation, (gpointer)&orientation))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_INTERPOLATION_TYPE, py_interpolation, (gpointer)&interpolation))
        return NULL;
    
    gwy_data_field_fft_filter_1d(GWY_DATA_FIELD(self->obj), GWY_DATA_FIELD(result_field->obj), GWY_DATA_LINE(weights->obj), orientation, interpolation);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_area_fit_plane(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "mask", "col", "row", "width", "height", "pa", "pbx", "pby", NULL };
    PyGObject *mask;
    int col, row, width, height;
    PyObject *pa_pyobj, *pbx_pyobj, *pby_pyobj;
    GDoubleValue pa, pbx, pby;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!iiiiOOO:GwyDataField.area_fit_plane", kwlist, &PyGwyDataField_Type, &mask, &col, &row, &width, &height, &pa_pyobj, &pbx_pyobj, &pby_pyobj))
        return NULL;
    if (!PyFloat_Check(pa_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'pa' must be a float variable");
        return NULL;
    }
    pa = PyFloat_AsDouble(pa_pyobj);
    if (!PyFloat_Check(pbx_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'pbx' must be a float variable");
        return NULL;
    }
    pbx = PyFloat_AsDouble(pbx_pyobj);
    if (!PyFloat_Check(pby_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'pby' must be a float variable");
        return NULL;
    }
    pby = PyFloat_AsDouble(pby_pyobj);
    
    gwy_data_field_area_fit_plane(GWY_DATA_FIELD(self->obj), GWY_DATA_FIELD(mask->obj), col, row, width, height, &pa, &pbx, &pby);
    
    ((PyFloatObject *) pa_pyobj)->ob_fval = pa;
    ((PyFloatObject *) pbx_pyobj)->ob_fval = pbx;
    ((PyFloatObject *) pby_pyobj)->ob_fval = pby;
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_fit_plane(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "pa", "pbx", "pby", NULL };
    PyObject *pa_pyobj, *pbx_pyobj, *pby_pyobj;
    GDoubleValue pa, pbx, pby;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"OOO:GwyDataField.fit_plane", kwlist, &pa_pyobj, &pbx_pyobj, &pby_pyobj))
        return NULL;
    if (!PyFloat_Check(pa_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'pa' must be a float variable");
        return NULL;
    }
    pa = PyFloat_AsDouble(pa_pyobj);
    if (!PyFloat_Check(pbx_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'pbx' must be a float variable");
        return NULL;
    }
    pbx = PyFloat_AsDouble(pbx_pyobj);
    if (!PyFloat_Check(pby_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'pby' must be a float variable");
        return NULL;
    }
    pby = PyFloat_AsDouble(pby_pyobj);
    
    gwy_data_field_fit_plane(GWY_DATA_FIELD(self->obj), &pa, &pbx, &pby);
    
    ((PyFloatObject *) pa_pyobj)->ob_fval = pa;
    ((PyFloatObject *) pbx_pyobj)->ob_fval = pbx;
    ((PyFloatObject *) pby_pyobj)->ob_fval = pby;
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_plane_level(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "a", "bx", "by", NULL };
    double a, bx, by;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ddd:GwyDataField.plane_level", kwlist, &a, &bx, &by))
        return NULL;
    
    gwy_data_field_plane_level(GWY_DATA_FIELD(self->obj), a, bx, by);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_plane_rotate(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "xangle", "yangle", "interpolation", NULL };
    PyObject *py_interpolation = NULL;
    double xangle, yangle;
    GwyInterpolationType interpolation;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ddO:GwyDataField.plane_rotate", kwlist, &xangle, &yangle, &py_interpolation))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_INTERPOLATION_TYPE, py_interpolation, (gpointer)&interpolation))
        return NULL;
    
    gwy_data_field_plane_rotate(GWY_DATA_FIELD(self->obj), xangle, yangle, interpolation);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_fit_lines(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "col", "row", "width", "height", "degree", "exclude", "orientation", NULL };
    int col, row, width, height, degree, exclude;
    PyObject *py_orientation = NULL;
    GwyOrientation orientation;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iiiiiiO:GwyDataField.fit_lines", kwlist, &col, &row, &width, &height, &degree, &exclude, &py_orientation))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_ORIENTATION, py_orientation, (gpointer)&orientation))
        return NULL;
    
    gwy_data_field_fit_lines(GWY_DATA_FIELD(self->obj), col, row, width, height, degree, exclude, orientation);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_subtract_polynom(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "col_degree", "row_degree", "coeffs", NULL };
    int col_degree, row_degree, i_coeffs;
    PyObject *coeffs_pyobj;
    gdouble *coeffs;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iiO:GwyDataField.subtract_polynom", kwlist, &col_degree, &row_degree, &coeffs_pyobj))
        return NULL;
    if (!PyList_Check(coeffs_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'coeffs' must be a list of floats");
        return NULL;
    }
    coeffs =  g_malloc(sizeof(gdouble)*PyList_Size(coeffs_pyobj));
    if (coeffs == NULL) {
        return PyErr_NoMemory();
    }
    for (i_coeffs = 0; i_coeffs < PyList_Size(coeffs_pyobj); i_coeffs++) {
        if (!PyFloat_Check(PyList_GetItem(coeffs_pyobj, i_coeffs))) {
            g_free(coeffs);
            PyErr_SetString(PyExc_TypeError, "Parameter 'coeffs' must be a list of floats");
            return NULL;
        }
        coeffs[i_coeffs] = PyFloat_AsDouble(PyList_GetItem(coeffs_pyobj, i_coeffs));
    }
    
    gwy_data_field_subtract_polynom(GWY_DATA_FIELD(self->obj), col_degree, row_degree, coeffs);
    
    g_free(coeffs);
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_area_subtract_polynom(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "col", "row", "width", "height", "col_degree", "row_degree", "coeffs", NULL };
    int col, row, width, height, col_degree, row_degree, i_coeffs;
    PyObject *coeffs_pyobj;
    gdouble *coeffs;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iiiiiiO:GwyDataField.area_subtract_polynom", kwlist, &col, &row, &width, &height, &col_degree, &row_degree, &coeffs_pyobj))
        return NULL;
    if (!PyList_Check(coeffs_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'coeffs' must be a list of floats");
        return NULL;
    }
    coeffs =  g_malloc(sizeof(gdouble)*PyList_Size(coeffs_pyobj));
    if (coeffs == NULL) {
        return PyErr_NoMemory();
    }
    for (i_coeffs = 0; i_coeffs < PyList_Size(coeffs_pyobj); i_coeffs++) {
        if (!PyFloat_Check(PyList_GetItem(coeffs_pyobj, i_coeffs))) {
            g_free(coeffs);
            PyErr_SetString(PyExc_TypeError, "Parameter 'coeffs' must be a list of floats");
            return NULL;
        }
        coeffs[i_coeffs] = PyFloat_AsDouble(PyList_GetItem(coeffs_pyobj, i_coeffs));
    }
    
    gwy_data_field_area_subtract_polynom(GWY_DATA_FIELD(self->obj), col, row, width, height, col_degree, row_degree, coeffs);
    
    g_free(coeffs);
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_subtract_legendre(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "col_degree", "row_degree", "coeffs", NULL };
    int col_degree, row_degree, i_coeffs;
    PyObject *coeffs_pyobj;
    gdouble *coeffs;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iiO:GwyDataField.subtract_legendre", kwlist, &col_degree, &row_degree, &coeffs_pyobj))
        return NULL;
    if (!PyList_Check(coeffs_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'coeffs' must be a list of floats");
        return NULL;
    }
    coeffs =  g_malloc(sizeof(gdouble)*PyList_Size(coeffs_pyobj));
    if (coeffs == NULL) {
        return PyErr_NoMemory();
    }
    for (i_coeffs = 0; i_coeffs < PyList_Size(coeffs_pyobj); i_coeffs++) {
        if (!PyFloat_Check(PyList_GetItem(coeffs_pyobj, i_coeffs))) {
            g_free(coeffs);
            PyErr_SetString(PyExc_TypeError, "Parameter 'coeffs' must be a list of floats");
            return NULL;
        }
        coeffs[i_coeffs] = PyFloat_AsDouble(PyList_GetItem(coeffs_pyobj, i_coeffs));
    }
    
    gwy_data_field_subtract_legendre(GWY_DATA_FIELD(self->obj), col_degree, row_degree, coeffs);
    
    g_free(coeffs);
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_area_subtract_legendre(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "col", "row", "width", "height", "col_degree", "row_degree", "coeffs", NULL };
    int col, row, width, height, col_degree, row_degree, i_coeffs;
    PyObject *coeffs_pyobj;
    gdouble *coeffs;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iiiiiiO:GwyDataField.area_subtract_legendre", kwlist, &col, &row, &width, &height, &col_degree, &row_degree, &coeffs_pyobj))
        return NULL;
    if (!PyList_Check(coeffs_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'coeffs' must be a list of floats");
        return NULL;
    }
    coeffs =  g_malloc(sizeof(gdouble)*PyList_Size(coeffs_pyobj));
    if (coeffs == NULL) {
        return PyErr_NoMemory();
    }
    for (i_coeffs = 0; i_coeffs < PyList_Size(coeffs_pyobj); i_coeffs++) {
        if (!PyFloat_Check(PyList_GetItem(coeffs_pyobj, i_coeffs))) {
            g_free(coeffs);
            PyErr_SetString(PyExc_TypeError, "Parameter 'coeffs' must be a list of floats");
            return NULL;
        }
        coeffs[i_coeffs] = PyFloat_AsDouble(PyList_GetItem(coeffs_pyobj, i_coeffs));
    }
    
    gwy_data_field_area_subtract_legendre(GWY_DATA_FIELD(self->obj), col, row, width, height, col_degree, row_degree, coeffs);
    
    g_free(coeffs);
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_subtract_poly_max(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "max_degree", "coeffs", NULL };
    int max_degree, i_coeffs;
    PyObject *coeffs_pyobj;
    gdouble *coeffs;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iO:GwyDataField.subtract_poly_max", kwlist, &max_degree, &coeffs_pyobj))
        return NULL;
    if (!PyList_Check(coeffs_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'coeffs' must be a list of floats");
        return NULL;
    }
    coeffs =  g_malloc(sizeof(gdouble)*PyList_Size(coeffs_pyobj));
    if (coeffs == NULL) {
        return PyErr_NoMemory();
    }
    for (i_coeffs = 0; i_coeffs < PyList_Size(coeffs_pyobj); i_coeffs++) {
        if (!PyFloat_Check(PyList_GetItem(coeffs_pyobj, i_coeffs))) {
            g_free(coeffs);
            PyErr_SetString(PyExc_TypeError, "Parameter 'coeffs' must be a list of floats");
            return NULL;
        }
        coeffs[i_coeffs] = PyFloat_AsDouble(PyList_GetItem(coeffs_pyobj, i_coeffs));
    }
    
    gwy_data_field_subtract_poly_max(GWY_DATA_FIELD(self->obj), max_degree, coeffs);
    
    g_free(coeffs);
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_area_subtract_poly_max(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "col", "row", "width", "height", "max_degree", "coeffs", NULL };
    int col, row, width, height, max_degree, i_coeffs;
    PyObject *coeffs_pyobj;
    gdouble *coeffs;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iiiiiO:GwyDataField.area_subtract_poly_max", kwlist, &col, &row, &width, &height, &max_degree, &coeffs_pyobj))
        return NULL;
    if (!PyList_Check(coeffs_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'coeffs' must be a list of floats");
        return NULL;
    }
    coeffs =  g_malloc(sizeof(gdouble)*PyList_Size(coeffs_pyobj));
    if (coeffs == NULL) {
        return PyErr_NoMemory();
    }
    for (i_coeffs = 0; i_coeffs < PyList_Size(coeffs_pyobj); i_coeffs++) {
        if (!PyFloat_Check(PyList_GetItem(coeffs_pyobj, i_coeffs))) {
            g_free(coeffs);
            PyErr_SetString(PyExc_TypeError, "Parameter 'coeffs' must be a list of floats");
            return NULL;
        }
        coeffs[i_coeffs] = PyFloat_AsDouble(PyList_GetItem(coeffs_pyobj, i_coeffs));
    }
    
    gwy_data_field_area_subtract_poly_max(GWY_DATA_FIELD(self->obj), col, row, width, height, max_degree, coeffs);
    
    g_free(coeffs);
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_area_local_plane_quantity(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "size", "col", "row", "width", "height", "type", "result", NULL };
    int size, col, row, width, height;
    GwyPlaneFitQuantity type;
    PyGObject *result;
    PyObject *py_type = NULL;
    GwyDataField *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iiiiiOO!:GwyDataField.area_local_plane_quantity", kwlist, &size, &col, &row, &width, &height, &py_type, &PyGwyDataField_Type, &result))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_PLANE_FIT_QUANTITY, py_type, (gpointer)&type))
        return NULL;
    
    ret = gwy_data_field_area_local_plane_quantity(GWY_DATA_FIELD(self->obj), size, col, row, width, height, type, GWY_DATA_FIELD(result->obj));
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_data_field_local_plane_quantity(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "size", "type", "result", NULL };
    int size;
    GwyPlaneFitQuantity type;
    PyGObject *result;
    PyObject *py_type = NULL;
    GwyDataField *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iOO!:GwyDataField.local_plane_quantity", kwlist, &size, &py_type, &PyGwyDataField_Type, &result))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_PLANE_FIT_QUANTITY, py_type, (gpointer)&type))
        return NULL;
    
    ret = gwy_data_field_local_plane_quantity(GWY_DATA_FIELD(self->obj), size, type, GWY_DATA_FIELD(result->obj));
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_data_field_get_max(PyGObject *self)
{
    double ret;

    
    ret = gwy_data_field_get_max(GWY_DATA_FIELD(self->obj));
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_field_get_min(PyGObject *self)
{
    double ret;

    
    ret = gwy_data_field_get_min(GWY_DATA_FIELD(self->obj));
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_field_get_min_max(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "min", "max", NULL };
    PyObject *min_pyobj, *max_pyobj;
    GDoubleValue min, max;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"OO:GwyDataField.get_min_max", kwlist, &min_pyobj, &max_pyobj))
        return NULL;
    if (!PyFloat_Check(min_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'min' must be a float variable");
        return NULL;
    }
    min = PyFloat_AsDouble(min_pyobj);
    if (!PyFloat_Check(max_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'max' must be a float variable");
        return NULL;
    }
    max = PyFloat_AsDouble(max_pyobj);
    
    gwy_data_field_get_min_max(GWY_DATA_FIELD(self->obj), &min, &max);
    
    ((PyFloatObject *) min_pyobj)->ob_fval = min;
    ((PyFloatObject *) max_pyobj)->ob_fval = max;
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_get_avg(PyGObject *self)
{
    double ret;

    
    ret = gwy_data_field_get_avg(GWY_DATA_FIELD(self->obj));
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_field_get_rms(PyGObject *self)
{
    double ret;

    
    ret = gwy_data_field_get_rms(GWY_DATA_FIELD(self->obj));
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_field_get_sum(PyGObject *self)
{
    double ret;

    
    ret = gwy_data_field_get_sum(GWY_DATA_FIELD(self->obj));
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_field_get_median(PyGObject *self)
{
    double ret;

    
    ret = gwy_data_field_get_median(GWY_DATA_FIELD(self->obj));
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_field_get_surface_area(PyGObject *self)
{
    double ret;

    
    ret = gwy_data_field_get_surface_area(GWY_DATA_FIELD(self->obj));
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_field_area_get_max(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "mask", "col", "row", "width", "height", NULL };
    PyGObject *mask;
    int col, row, width, height;
    double ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!iiii:GwyDataField.area_get_max", kwlist, &PyGwyDataField_Type, &mask, &col, &row, &width, &height))
        return NULL;
    
    ret = gwy_data_field_area_get_max(GWY_DATA_FIELD(self->obj), GWY_DATA_FIELD(mask->obj), col, row, width, height);
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_field_area_get_min(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "mask", "col", "row", "width", "height", NULL };
    PyGObject *mask;
    int col, row, width, height;
    double ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!iiii:GwyDataField.area_get_min", kwlist, &PyGwyDataField_Type, &mask, &col, &row, &width, &height))
        return NULL;
    
    ret = gwy_data_field_area_get_min(GWY_DATA_FIELD(self->obj), GWY_DATA_FIELD(mask->obj), col, row, width, height);
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_field_area_get_avg(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "mask", "col", "row", "width", "height", NULL };
    PyGObject *mask;
    int col, row, width, height;
    double ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!iiii:GwyDataField.area_get_avg", kwlist, &PyGwyDataField_Type, &mask, &col, &row, &width, &height))
        return NULL;
    
    ret = gwy_data_field_area_get_avg(GWY_DATA_FIELD(self->obj), GWY_DATA_FIELD(mask->obj), col, row, width, height);
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_field_area_get_rms(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "mask", "col", "row", "width", "height", NULL };
    PyGObject *mask;
    int col, row, width, height;
    double ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!iiii:GwyDataField.area_get_rms", kwlist, &PyGwyDataField_Type, &mask, &col, &row, &width, &height))
        return NULL;
    
    ret = gwy_data_field_area_get_rms(GWY_DATA_FIELD(self->obj), GWY_DATA_FIELD(mask->obj), col, row, width, height);
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_field_area_get_sum(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "mask", "col", "row", "width", "height", NULL };
    PyGObject *mask;
    int col, row, width, height;
    double ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!iiii:GwyDataField.area_get_sum", kwlist, &PyGwyDataField_Type, &mask, &col, &row, &width, &height))
        return NULL;
    
    ret = gwy_data_field_area_get_sum(GWY_DATA_FIELD(self->obj), GWY_DATA_FIELD(mask->obj), col, row, width, height);
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_field_area_get_median(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "mask", "col", "row", "width", "height", NULL };
    PyGObject *mask;
    int col, row, width, height;
    double ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!iiii:GwyDataField.area_get_median", kwlist, &PyGwyDataField_Type, &mask, &col, &row, &width, &height))
        return NULL;
    
    ret = gwy_data_field_area_get_median(GWY_DATA_FIELD(self->obj), GWY_DATA_FIELD(mask->obj), col, row, width, height);
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_field_area_get_surface_area(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "mask", "col", "row", "width", "height", NULL };
    PyGObject *mask;
    int col, row, width, height;
    double ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!iiii:GwyDataField.area_get_surface_area", kwlist, &PyGwyDataField_Type, &mask, &col, &row, &width, &height))
        return NULL;
    
    ret = gwy_data_field_area_get_surface_area(GWY_DATA_FIELD(self->obj), GWY_DATA_FIELD(mask->obj), col, row, width, height);
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_field_area_get_volume(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "basis", "mask", "col", "row", "width", "height", NULL };
    PyGObject *basis, *mask;
    int col, row, width, height;
    double ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!iiii:GwyDataField.area_get_volume", kwlist, &PyGwyDataField_Type, &basis, &PyGwyDataField_Type, &mask, &col, &row, &width, &height))
        return NULL;
    
    ret = gwy_data_field_area_get_volume(GWY_DATA_FIELD(self->obj), GWY_DATA_FIELD(basis->obj), GWY_DATA_FIELD(mask->obj), col, row, width, height);
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_field_get_stats(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "avg", "ra", "rms", "skew", "kurtosis", NULL };
    PyObject *avg_pyobj, *ra_pyobj, *rms_pyobj, *skew_pyobj, *kurtosis_pyobj;
    GDoubleValue avg, ra, rms, skew, kurtosis;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"OOOOO:GwyDataField.get_stats", kwlist, &avg_pyobj, &ra_pyobj, &rms_pyobj, &skew_pyobj, &kurtosis_pyobj))
        return NULL;
    if (!PyFloat_Check(avg_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'avg' must be a float variable");
        return NULL;
    }
    avg = PyFloat_AsDouble(avg_pyobj);
    if (!PyFloat_Check(ra_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'ra' must be a float variable");
        return NULL;
    }
    ra = PyFloat_AsDouble(ra_pyobj);
    if (!PyFloat_Check(rms_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'rms' must be a float variable");
        return NULL;
    }
    rms = PyFloat_AsDouble(rms_pyobj);
    if (!PyFloat_Check(skew_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'skew' must be a float variable");
        return NULL;
    }
    skew = PyFloat_AsDouble(skew_pyobj);
    if (!PyFloat_Check(kurtosis_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'kurtosis' must be a float variable");
        return NULL;
    }
    kurtosis = PyFloat_AsDouble(kurtosis_pyobj);
    
    gwy_data_field_get_stats(GWY_DATA_FIELD(self->obj), &avg, &ra, &rms, &skew, &kurtosis);
    
    ((PyFloatObject *) avg_pyobj)->ob_fval = avg;
    ((PyFloatObject *) ra_pyobj)->ob_fval = ra;
    ((PyFloatObject *) rms_pyobj)->ob_fval = rms;
    ((PyFloatObject *) skew_pyobj)->ob_fval = skew;
    ((PyFloatObject *) kurtosis_pyobj)->ob_fval = kurtosis;
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_area_get_stats(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "mask", "col", "row", "width", "height", "avg", "ra", "rms", "skew", "kurtosis", NULL };
    PyGObject *mask;
    int col, row, width, height;
    PyObject *avg_pyobj, *ra_pyobj, *rms_pyobj, *skew_pyobj, *kurtosis_pyobj;
    GDoubleValue avg, ra, rms, skew, kurtosis;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!iiiiOOOOO:GwyDataField.area_get_stats", kwlist, &PyGwyDataField_Type, &mask, &col, &row, &width, &height, &avg_pyobj, &ra_pyobj, &rms_pyobj, &skew_pyobj, &kurtosis_pyobj))
        return NULL;
    if (!PyFloat_Check(avg_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'avg' must be a float variable");
        return NULL;
    }
    avg = PyFloat_AsDouble(avg_pyobj);
    if (!PyFloat_Check(ra_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'ra' must be a float variable");
        return NULL;
    }
    ra = PyFloat_AsDouble(ra_pyobj);
    if (!PyFloat_Check(rms_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'rms' must be a float variable");
        return NULL;
    }
    rms = PyFloat_AsDouble(rms_pyobj);
    if (!PyFloat_Check(skew_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'skew' must be a float variable");
        return NULL;
    }
    skew = PyFloat_AsDouble(skew_pyobj);
    if (!PyFloat_Check(kurtosis_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'kurtosis' must be a float variable");
        return NULL;
    }
    kurtosis = PyFloat_AsDouble(kurtosis_pyobj);
    
    gwy_data_field_area_get_stats(GWY_DATA_FIELD(self->obj), GWY_DATA_FIELD(mask->obj), col, row, width, height, &avg, &ra, &rms, &skew, &kurtosis);
    
    ((PyFloatObject *) avg_pyobj)->ob_fval = avg;
    ((PyFloatObject *) ra_pyobj)->ob_fval = ra;
    ((PyFloatObject *) rms_pyobj)->ob_fval = rms;
    ((PyFloatObject *) skew_pyobj)->ob_fval = skew;
    ((PyFloatObject *) kurtosis_pyobj)->ob_fval = kurtosis;
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_area_count_in_range(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "mask", "col", "row", "width", "height", "below", "above", "nbelow", "nabove", NULL };
    PyGObject *mask;
    int col, row, width, height;
    GIntValue nbelow, nabove;
    PyObject *nbelow_pyobj, *nabove_pyobj;
    double below, above;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!iiiiddOO:GwyDataField.area_count_in_range", kwlist, &PyGwyDataField_Type, &mask, &col, &row, &width, &height, &below, &above, &nbelow_pyobj, &nabove_pyobj))
        return NULL;
    if (!PyInt_Check(nbelow_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'nbelow' must be an integer variable");
        return NULL;
    }
    nbelow = (int) PyInt_AsLong(nbelow_pyobj);
    if (!PyInt_Check(nabove_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'nabove' must be an integer variable");
        return NULL;
    }
    nabove = (int) PyInt_AsLong(nabove_pyobj);
    
    gwy_data_field_area_count_in_range(GWY_DATA_FIELD(self->obj), GWY_DATA_FIELD(mask->obj), col, row, width, height, below, above, &nbelow, &nabove);
    
    ((PyIntObject *) nbelow_pyobj)->ob_ival = nbelow;
    ((PyIntObject *) nabove_pyobj)->ob_ival = nabove;
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_area_dh(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "mask", "target_line", "col", "row", "width", "height", "nstats", NULL };
    PyGObject *mask, *target_line;
    int col, row, width, height, nstats;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!iiiii:GwyDataField.area_dh", kwlist, &PyGwyDataField_Type, &mask, &PyGwyDataLine_Type, &target_line, &col, &row, &width, &height, &nstats))
        return NULL;
    
    gwy_data_field_area_dh(GWY_DATA_FIELD(self->obj), GWY_DATA_FIELD(mask->obj), GWY_DATA_LINE(target_line->obj), col, row, width, height, nstats);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_dh(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "target_line", "nstats", NULL };
    PyGObject *target_line;
    int nstats;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!i:GwyDataField.dh", kwlist, &PyGwyDataLine_Type, &target_line, &nstats))
        return NULL;
    
    gwy_data_field_dh(GWY_DATA_FIELD(self->obj), GWY_DATA_LINE(target_line->obj), nstats);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_area_cdh(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "mask", "target_line", "col", "row", "width", "height", "nstats", NULL };
    PyGObject *mask, *target_line;
    int col, row, width, height, nstats;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!iiiii:GwyDataField.area_cdh", kwlist, &PyGwyDataField_Type, &mask, &PyGwyDataLine_Type, &target_line, &col, &row, &width, &height, &nstats))
        return NULL;
    
    gwy_data_field_area_cdh(GWY_DATA_FIELD(self->obj), GWY_DATA_FIELD(mask->obj), GWY_DATA_LINE(target_line->obj), col, row, width, height, nstats);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_cdh(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "target_line", "nstats", NULL };
    PyGObject *target_line;
    int nstats;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!i:GwyDataField.cdh", kwlist, &PyGwyDataLine_Type, &target_line, &nstats))
        return NULL;
    
    gwy_data_field_cdh(GWY_DATA_FIELD(self->obj), GWY_DATA_LINE(target_line->obj), nstats);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_area_da(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "target_line", "col", "row", "width", "height", "orientation", "nstats", NULL };
    PyGObject *target_line;
    int col, row, width, height, nstats;
    GwyOrientation orientation;
    PyObject *py_orientation = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!iiiiOi:GwyDataField.area_da", kwlist, &PyGwyDataLine_Type, &target_line, &col, &row, &width, &height, &py_orientation, &nstats))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_ORIENTATION, py_orientation, (gpointer)&orientation))
        return NULL;
    
    gwy_data_field_area_da(GWY_DATA_FIELD(self->obj), GWY_DATA_LINE(target_line->obj), col, row, width, height, orientation, nstats);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_da(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "target_line", "orientation", "nstats", NULL };
    PyGObject *target_line;
    PyObject *py_orientation = NULL;
    int nstats;
    GwyOrientation orientation;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!Oi:GwyDataField.da", kwlist, &PyGwyDataLine_Type, &target_line, &py_orientation, &nstats))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_ORIENTATION, py_orientation, (gpointer)&orientation))
        return NULL;
    
    gwy_data_field_da(GWY_DATA_FIELD(self->obj), GWY_DATA_LINE(target_line->obj), orientation, nstats);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_area_cda(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "target_line", "col", "row", "width", "height", "orientation", "nstats", NULL };
    PyGObject *target_line;
    int col, row, width, height, nstats;
    GwyOrientation orientation;
    PyObject *py_orientation = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!iiiiOi:GwyDataField.area_cda", kwlist, &PyGwyDataLine_Type, &target_line, &col, &row, &width, &height, &py_orientation, &nstats))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_ORIENTATION, py_orientation, (gpointer)&orientation))
        return NULL;
    
    gwy_data_field_area_cda(GWY_DATA_FIELD(self->obj), GWY_DATA_LINE(target_line->obj), col, row, width, height, orientation, nstats);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_cda(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "target_line", "orientation", "nstats", NULL };
    PyGObject *target_line;
    PyObject *py_orientation = NULL;
    int nstats;
    GwyOrientation orientation;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!Oi:GwyDataField.cda", kwlist, &PyGwyDataLine_Type, &target_line, &py_orientation, &nstats))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_ORIENTATION, py_orientation, (gpointer)&orientation))
        return NULL;
    
    gwy_data_field_cda(GWY_DATA_FIELD(self->obj), GWY_DATA_LINE(target_line->obj), orientation, nstats);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_area_acf(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "target_line", "col", "row", "width", "height", "orientation", "interpolation", "nstats", NULL };
    PyGObject *target_line;
    int col, row, width, height, nstats;
    GwyInterpolationType interpolation;
    GwyOrientation orientation;
    PyObject *py_orientation = NULL, *py_interpolation = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!iiiiOOi:GwyDataField.area_acf", kwlist, &PyGwyDataLine_Type, &target_line, &col, &row, &width, &height, &py_orientation, &py_interpolation, &nstats))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_ORIENTATION, py_orientation, (gpointer)&orientation))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_INTERPOLATION_TYPE, py_interpolation, (gpointer)&interpolation))
        return NULL;
    
    gwy_data_field_area_acf(GWY_DATA_FIELD(self->obj), GWY_DATA_LINE(target_line->obj), col, row, width, height, orientation, interpolation, nstats);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_acf(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "target_line", "orientation", "interpolation", "nstats", NULL };
    PyGObject *target_line;
    PyObject *py_orientation = NULL, *py_interpolation = NULL;
    int nstats;
    GwyInterpolationType interpolation;
    GwyOrientation orientation;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!OOi:GwyDataField.acf", kwlist, &PyGwyDataLine_Type, &target_line, &py_orientation, &py_interpolation, &nstats))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_ORIENTATION, py_orientation, (gpointer)&orientation))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_INTERPOLATION_TYPE, py_interpolation, (gpointer)&interpolation))
        return NULL;
    
    gwy_data_field_acf(GWY_DATA_FIELD(self->obj), GWY_DATA_LINE(target_line->obj), orientation, interpolation, nstats);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_area_hhcf(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "target_line", "col", "row", "width", "height", "orientation", "interpolation", "nstats", NULL };
    PyGObject *target_line;
    int col, row, width, height, nstats;
    GwyInterpolationType interpolation;
    GwyOrientation orientation;
    PyObject *py_orientation = NULL, *py_interpolation = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!iiiiOOi:GwyDataField.area_hhcf", kwlist, &PyGwyDataLine_Type, &target_line, &col, &row, &width, &height, &py_orientation, &py_interpolation, &nstats))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_ORIENTATION, py_orientation, (gpointer)&orientation))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_INTERPOLATION_TYPE, py_interpolation, (gpointer)&interpolation))
        return NULL;
    
    gwy_data_field_area_hhcf(GWY_DATA_FIELD(self->obj), GWY_DATA_LINE(target_line->obj), col, row, width, height, orientation, interpolation, nstats);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_hhcf(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "target_line", "orientation", "interpolation", "nstats", NULL };
    PyGObject *target_line;
    PyObject *py_orientation = NULL, *py_interpolation = NULL;
    int nstats;
    GwyInterpolationType interpolation;
    GwyOrientation orientation;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!OOi:GwyDataField.hhcf", kwlist, &PyGwyDataLine_Type, &target_line, &py_orientation, &py_interpolation, &nstats))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_ORIENTATION, py_orientation, (gpointer)&orientation))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_INTERPOLATION_TYPE, py_interpolation, (gpointer)&interpolation))
        return NULL;
    
    gwy_data_field_hhcf(GWY_DATA_FIELD(self->obj), GWY_DATA_LINE(target_line->obj), orientation, interpolation, nstats);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_area_psdf(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "target_line", "col", "row", "width", "height", "orientation", "interpolation", "windowing", "nstats", NULL };
    GwyWindowingType windowing;
    int col, row, width, height, nstats;
    PyObject *py_orientation = NULL, *py_interpolation = NULL, *py_windowing = NULL;
    PyGObject *target_line;
    GwyInterpolationType interpolation;
    GwyOrientation orientation;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!iiiiOOOi:GwyDataField.area_psdf", kwlist, &PyGwyDataLine_Type, &target_line, &col, &row, &width, &height, &py_orientation, &py_interpolation, &py_windowing, &nstats))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_ORIENTATION, py_orientation, (gpointer)&orientation))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_INTERPOLATION_TYPE, py_interpolation, (gpointer)&interpolation))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_WINDOWING_TYPE, py_windowing, (gpointer)&windowing))
        return NULL;
    
    gwy_data_field_area_psdf(GWY_DATA_FIELD(self->obj), GWY_DATA_LINE(target_line->obj), col, row, width, height, orientation, interpolation, windowing, nstats);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_psdf(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "target_line", "orientation", "interpolation", "windowing", "nstats", NULL };
    GwyWindowingType windowing;
    PyObject *py_orientation = NULL, *py_interpolation = NULL, *py_windowing = NULL;
    int nstats;
    PyGObject *target_line;
    GwyInterpolationType interpolation;
    GwyOrientation orientation;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!OOOi:GwyDataField.psdf", kwlist, &PyGwyDataLine_Type, &target_line, &py_orientation, &py_interpolation, &py_windowing, &nstats))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_ORIENTATION, py_orientation, (gpointer)&orientation))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_INTERPOLATION_TYPE, py_interpolation, (gpointer)&interpolation))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_WINDOWING_TYPE, py_windowing, (gpointer)&windowing))
        return NULL;
    
    gwy_data_field_psdf(GWY_DATA_FIELD(self->obj), GWY_DATA_LINE(target_line->obj), orientation, interpolation, windowing, nstats);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_area_rpsdf(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "target_line", "col", "row", "width", "height", "interpolation", "windowing", "nstats", NULL };
    PyGObject *target_line;
    int col, row, width, height, nstats;
    GwyInterpolationType interpolation;
    PyObject *py_interpolation = NULL, *py_windowing = NULL;
    GwyWindowingType windowing;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!iiiiOOi:GwyDataField.area_rpsdf", kwlist, &PyGwyDataLine_Type, &target_line, &col, &row, &width, &height, &py_interpolation, &py_windowing, &nstats))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_INTERPOLATION_TYPE, py_interpolation, (gpointer)&interpolation))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_WINDOWING_TYPE, py_windowing, (gpointer)&windowing))
        return NULL;
    
    gwy_data_field_area_rpsdf(GWY_DATA_FIELD(self->obj), GWY_DATA_LINE(target_line->obj), col, row, width, height, interpolation, windowing, nstats);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_rpsdf(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "target_line", "interpolation", "windowing", "nstats", NULL };
    PyGObject *target_line;
    PyObject *py_interpolation = NULL, *py_windowing = NULL;
    int nstats;
    GwyInterpolationType interpolation;
    GwyWindowingType windowing;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!OOi:GwyDataField.rpsdf", kwlist, &PyGwyDataLine_Type, &target_line, &py_interpolation, &py_windowing, &nstats))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_INTERPOLATION_TYPE, py_interpolation, (gpointer)&interpolation))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_WINDOWING_TYPE, py_windowing, (gpointer)&windowing))
        return NULL;
    
    gwy_data_field_rpsdf(GWY_DATA_FIELD(self->obj), GWY_DATA_LINE(target_line->obj), interpolation, windowing, nstats);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_area_2dacf(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "target_field", "col", "row", "width", "height", "xrange", "yrange", NULL };
    PyGObject *target_field;
    int col, row, width, height, xrange, yrange;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!iiiiii:GwyDataField.area_2dacf", kwlist, &PyGwyDataField_Type, &target_field, &col, &row, &width, &height, &xrange, &yrange))
        return NULL;
    
    gwy_data_field_area_2dacf(GWY_DATA_FIELD(self->obj), GWY_DATA_FIELD(target_field->obj), col, row, width, height, xrange, yrange);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_2dacf(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "target_field", NULL };
    PyGObject *target_field;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:GwyDataField.a_2dacf", kwlist, &PyGwyDataField_Type, &target_field))
        return NULL;
    
    gwy_data_field_2dacf(GWY_DATA_FIELD(self->obj), GWY_DATA_FIELD(target_field->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_area_minkowski_volume(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "target_line", "col", "row", "width", "height", "nstats", NULL };
    PyGObject *target_line;
    int col, row, width, height, nstats;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!iiiii:GwyDataField.area_minkowski_volume", kwlist, &PyGwyDataLine_Type, &target_line, &col, &row, &width, &height, &nstats))
        return NULL;
    
    gwy_data_field_area_minkowski_volume(GWY_DATA_FIELD(self->obj), GWY_DATA_LINE(target_line->obj), col, row, width, height, nstats);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_minkowski_volume(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "target_line", "nstats", NULL };
    PyGObject *target_line;
    int nstats;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!i:GwyDataField.minkowski_volume", kwlist, &PyGwyDataLine_Type, &target_line, &nstats))
        return NULL;
    
    gwy_data_field_minkowski_volume(GWY_DATA_FIELD(self->obj), GWY_DATA_LINE(target_line->obj), nstats);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_area_minkowski_boundary(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "target_line", "col", "row", "width", "height", "nstats", NULL };
    PyGObject *target_line;
    int col, row, width, height, nstats;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!iiiii:GwyDataField.area_minkowski_boundary", kwlist, &PyGwyDataLine_Type, &target_line, &col, &row, &width, &height, &nstats))
        return NULL;
    
    gwy_data_field_area_minkowski_boundary(GWY_DATA_FIELD(self->obj), GWY_DATA_LINE(target_line->obj), col, row, width, height, nstats);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_minkowski_boundary(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "target_line", "nstats", NULL };
    PyGObject *target_line;
    int nstats;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!i:GwyDataField.minkowski_boundary", kwlist, &PyGwyDataLine_Type, &target_line, &nstats))
        return NULL;
    
    gwy_data_field_minkowski_boundary(GWY_DATA_FIELD(self->obj), GWY_DATA_LINE(target_line->obj), nstats);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_area_minkowski_euler(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "target_line", "col", "row", "width", "height", "nstats", NULL };
    PyGObject *target_line;
    int col, row, width, height, nstats;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!iiiii:GwyDataField.area_minkowski_euler", kwlist, &PyGwyDataLine_Type, &target_line, &col, &row, &width, &height, &nstats))
        return NULL;
    
    gwy_data_field_area_minkowski_euler(GWY_DATA_FIELD(self->obj), GWY_DATA_LINE(target_line->obj), col, row, width, height, nstats);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_minkowski_euler(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "target_line", "nstats", NULL };
    PyGObject *target_line;
    int nstats;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!i:GwyDataField.minkowski_euler", kwlist, &PyGwyDataLine_Type, &target_line, &nstats))
        return NULL;
    
    gwy_data_field_minkowski_euler(GWY_DATA_FIELD(self->obj), GWY_DATA_LINE(target_line->obj), nstats);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_slope_distribution(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "derdist", "kernel_size", NULL };
    PyGObject *derdist;
    int kernel_size;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!i:GwyDataField.slope_distribution", kwlist, &PyGwyDataLine_Type, &derdist, &kernel_size))
        return NULL;
    
    gwy_data_field_slope_distribution(GWY_DATA_FIELD(self->obj), GWY_DATA_LINE(derdist->obj), kernel_size);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_get_normal_coeffs(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "nx", "ny", "nz", "normalize1", NULL };
    PyObject *nx_pyobj, *ny_pyobj, *nz_pyobj;
    int normalize1;
    GDoubleValue nx, ny, nz;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"OOOi:GwyDataField.get_normal_coeffs", kwlist, &nx_pyobj, &ny_pyobj, &nz_pyobj, &normalize1))
        return NULL;
    if (!PyFloat_Check(nx_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'nx' must be a float variable");
        return NULL;
    }
    nx = PyFloat_AsDouble(nx_pyobj);
    if (!PyFloat_Check(ny_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'ny' must be a float variable");
        return NULL;
    }
    ny = PyFloat_AsDouble(ny_pyobj);
    if (!PyFloat_Check(nz_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'nz' must be a float variable");
        return NULL;
    }
    nz = PyFloat_AsDouble(nz_pyobj);
    
    gwy_data_field_get_normal_coeffs(GWY_DATA_FIELD(self->obj), &nx, &ny, &nz, normalize1);
    
    ((PyFloatObject *) nx_pyobj)->ob_fval = nx;
    ((PyFloatObject *) ny_pyobj)->ob_fval = ny;
    ((PyFloatObject *) nz_pyobj)->ob_fval = nz;
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_area_get_inclination(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "col", "row", "width", "height", "theta", "phi", NULL };
    int col, row, width, height;
    PyObject *theta_pyobj, *phi_pyobj;
    GDoubleValue theta, phi;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iiiiOO:GwyDataField.area_get_inclination", kwlist, &col, &row, &width, &height, &theta_pyobj, &phi_pyobj))
        return NULL;
    if (!PyFloat_Check(theta_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'theta' must be a float variable");
        return NULL;
    }
    theta = PyFloat_AsDouble(theta_pyobj);
    if (!PyFloat_Check(phi_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'phi' must be a float variable");
        return NULL;
    }
    phi = PyFloat_AsDouble(phi_pyobj);
    
    gwy_data_field_area_get_inclination(GWY_DATA_FIELD(self->obj), col, row, width, height, &theta, &phi);
    
    ((PyFloatObject *) theta_pyobj)->ob_fval = theta;
    ((PyFloatObject *) phi_pyobj)->ob_fval = phi;
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_area_get_line_stats(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "mask", "target_line", "col", "row", "width", "height", "quantity", "orientation", NULL };
    PyGObject *mask, *target_line;
    int col, row, width, height;
    GwyLineStatQuantity quantity;
    GwyOrientation orientation;
    PyObject *py_quantity = NULL, *py_orientation = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!iiiiOO:GwyDataField.area_get_line_stats", kwlist, &PyGwyDataField_Type, &mask, &PyGwyDataLine_Type, &target_line, &col, &row, &width, &height, &py_quantity, &py_orientation))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_LINE_STAT_QUANTITY, py_quantity, (gpointer)&quantity))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_ORIENTATION, py_orientation, (gpointer)&orientation))
        return NULL;
    
    gwy_data_field_area_get_line_stats(GWY_DATA_FIELD(self->obj), GWY_DATA_FIELD(mask->obj), GWY_DATA_LINE(target_line->obj), col, row, width, height, quantity, orientation);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_get_line_stats(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "target_line", "quantity", "orientation", NULL };
    PyGObject *target_line;
    PyObject *py_quantity = NULL, *py_orientation = NULL;
    GwyLineStatQuantity quantity;
    GwyOrientation orientation;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!OO:GwyDataField.get_line_stats", kwlist, &PyGwyDataLine_Type, &target_line, &py_quantity, &py_orientation))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_LINE_STAT_QUANTITY, py_quantity, (gpointer)&quantity))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_ORIENTATION, py_orientation, (gpointer)&orientation))
        return NULL;
    
    gwy_data_field_get_line_stats(GWY_DATA_FIELD(self->obj), GWY_DATA_LINE(target_line->obj), quantity, orientation);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_field_get_profile_wrap(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "scol", "srow", "ecol", "erow", "res", "thickness", "interpolation", NULL };
    int scol, srow, ecol, erow, res, thickness;
    PyObject *py_interpolation = NULL;
    GwyInterpolationType interpolation;
    GwyDataLine *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iiiiiiO:GwyDataField.get_profile", kwlist, &scol, &srow, &ecol, &erow, &res, &thickness, &py_interpolation))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_INTERPOLATION_TYPE, py_interpolation, (gpointer)&interpolation))
        return NULL;
    
    ret = gwy_data_field_get_profile_wrap(GWY_DATA_FIELD(self->obj), scol, srow, ecol, erow, res, thickness, interpolation);
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_data_field_fit_polynom_wrap(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "col_degree", "row_degree", NULL };
    int col_degree, row_degree;
    PyObject *py_ret;
    GArray *ret;
    gint i_ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ii:GwyDataField.fit_polynom", kwlist, &col_degree, &row_degree))
        return NULL;
    
    ret = gwy_data_field_fit_polynom_wrap(GWY_DATA_FIELD(self->obj), col_degree, row_degree);
    
    py_ret = PyList_New(ret->len);
    for (i_ret = 0; i_ret < ret->len; i_ret++) {
        PyList_SetItem(py_ret, i_ret, PyFloat_FromDouble(g_array_index(ret, gdouble, i_ret)));
    }
    g_array_free(ret, TRUE);
    return py_ret;

}

static PyObject *
_wrap_gwy_data_field_area_fit_polynom_wrap(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "col", "row", "width", "height", "col_degree", "row_degree", NULL };
    int col, row, width, height, col_degree, row_degree;
    PyObject *py_ret;
    GArray *ret;
    gint i_ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iiiiii:GwyDataField.area_fit_polynom", kwlist, &col, &row, &width, &height, &col_degree, &row_degree))
        return NULL;
    
    ret = gwy_data_field_area_fit_polynom_wrap(GWY_DATA_FIELD(self->obj), col, row, width, height, col_degree, row_degree);
    
    py_ret = PyList_New(ret->len);
    for (i_ret = 0; i_ret < ret->len; i_ret++) {
        PyList_SetItem(py_ret, i_ret, PyFloat_FromDouble(g_array_index(ret, gdouble, i_ret)));
    }
    g_array_free(ret, TRUE);
    return py_ret;

}

static PyObject *
_wrap_gwy_data_field_elliptic_area_extract_wrap(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "col", "row", "width", "height", NULL };
    int col, row, width, height;
    PyObject *py_ret;
    GArray *ret;
    gint i_ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iiii:GwyDataField.elliptic_area_extract", kwlist, &col, &row, &width, &height))
        return NULL;
    
    ret = gwy_data_field_elliptic_area_extract_wrap(GWY_DATA_FIELD(self->obj), col, row, width, height);
    
    py_ret = PyList_New(ret->len);
    for (i_ret = 0; i_ret < ret->len; i_ret++) {
        PyList_SetItem(py_ret, i_ret, PyFloat_FromDouble(g_array_index(ret, gdouble, i_ret)));
    }
    g_array_free(ret, TRUE);
    return py_ret;

}

static PyObject *
_wrap_gwy_data_field_circular_area_extract_wrap(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "col", "row", "radius", NULL };
    int col, row;
    double radius;
    GArray *ret;
    gint i_ret;
    PyObject *py_ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iid:GwyDataField.circular_area_extract", kwlist, &col, &row, &radius))
        return NULL;
    
    ret = gwy_data_field_circular_area_extract_wrap(GWY_DATA_FIELD(self->obj), col, row, radius);
    
    py_ret = PyList_New(ret->len);
    for (i_ret = 0; i_ret < ret->len; i_ret++) {
        PyList_SetItem(py_ret, i_ret, PyFloat_FromDouble(g_array_index(ret, gdouble, i_ret)));
    }
    g_array_free(ret, TRUE);
    return py_ret;

}

static PyObject *
_wrap_gwy_data_field_create_full_mask(PyGObject *self)
{
    GwyDataField *ret;

    
    ret = gwy_data_field_create_full_mask(GWY_DATA_FIELD(self->obj));
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

#line 235 "./pygwy.override"
/**
 * gwy_data_field_duplicate:
 *
 * Duplicate datafield
 *
 * Returns: duplicated datafield
**/
static PyObject *
_wrap_gwy_data_field_duplicate(PyGObject *self)
{   
   GwyDataField *ret;

   ret = gwy_data_field_duplicate(GWY_DATA_FIELD(self->obj));

   return pygobject_new((GObject *)ret); 
}

#line 6005 "pygwywrap.c"


#line 305 "./pygwy.override"
/**
 * gwy_data_field_get_data:
 *
 * Create a tuple of data which the datafield contains. Content of the tuple is NOT reference to original datafield but its copy.
 *
 * Returns: tuple of raw numeric data from DataField
**/
static PyObject *
_wrap_gwy_data_field_get_data(PyGObject *self)
{   
   gdouble *data;
   gint len, xres, yres;
   PyObject *tuple;
   int i;

   xres = gwy_data_field_get_xres(GWY_DATA_FIELD(self->obj));
   yres = gwy_data_field_get_yres(GWY_DATA_FIELD(self->obj));
   // Get size of data field
   len = xres * yres;
   // Create tuple by size of data field
   tuple = PyTuple_New(len);
   
   data = gwy_data_field_get_data(GWY_DATA_FIELD(self->obj));
   // fill tuple with data field values
   for (i = 0; i < len; i++) {
      /* get data read only, any changes to the tuple does not reflect on actual datafield */
      PyTuple_SetItem(tuple, i, PyFloat_FromDouble(data[i]));
   }

   return tuple;
}

#line 6041 "pygwywrap.c"


static const PyMethodDef _PyGwyDataField_methods[] = {
    { "sum_fields", (PyCFunction)_wrap_gwy_data_field_sum_fields, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "subtract_fields", (PyCFunction)_wrap_gwy_data_field_subtract_fields, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "divide_fields", (PyCFunction)_wrap_gwy_data_field_divide_fields, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "multiply_fields", (PyCFunction)_wrap_gwy_data_field_multiply_fields, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "min_of_fields", (PyCFunction)_wrap_gwy_data_field_min_of_fields, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "max_of_fields", (PyCFunction)_wrap_gwy_data_field_max_of_fields, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "check_compatibility", (PyCFunction)_wrap_gwy_data_field_check_compatibility, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "correct_laplace_iteration", (PyCFunction)_wrap_gwy_data_field_correct_laplace_iteration, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "correct_average", (PyCFunction)_wrap_gwy_data_field_correct_average, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "mask_outliers", (PyCFunction)_wrap_gwy_data_field_mask_outliers, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_correlation_score", (PyCFunction)_wrap_gwy_data_field_get_correlation_score, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "crosscorrelate", (PyCFunction)_wrap_gwy_data_field_crosscorrelate, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "correlate", (PyCFunction)_wrap_gwy_data_field_correlate, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "new_alike", (PyCFunction)_wrap_gwy_data_field_new_alike, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "data_changed", (PyCFunction)_wrap_gwy_data_field_data_changed, METH_NOARGS,
      NULL },
    { "new_resampled", (PyCFunction)_wrap_gwy_data_field_new_resampled, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "resample", (PyCFunction)_wrap_gwy_data_field_resample, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "resize", (PyCFunction)_wrap_gwy_data_field_resize, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "area_extract", (PyCFunction)_wrap_gwy_data_field_area_extract, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "copy", (PyCFunction)_wrap_gwy_data_field_copy, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "area_copy", (PyCFunction)_wrap_gwy_data_field_area_copy, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_xres", (PyCFunction)_wrap_gwy_data_field_get_xres, METH_NOARGS,
      NULL },
    { "get_yres", (PyCFunction)_wrap_gwy_data_field_get_yres, METH_NOARGS,
      NULL },
    { "get_xreal", (PyCFunction)_wrap_gwy_data_field_get_xreal, METH_NOARGS,
      NULL },
    { "get_yreal", (PyCFunction)_wrap_gwy_data_field_get_yreal, METH_NOARGS,
      NULL },
    { "set_xreal", (PyCFunction)_wrap_gwy_data_field_set_xreal, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "set_yreal", (PyCFunction)_wrap_gwy_data_field_set_yreal, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_xoffset", (PyCFunction)_wrap_gwy_data_field_get_xoffset, METH_NOARGS,
      NULL },
    { "get_yoffset", (PyCFunction)_wrap_gwy_data_field_get_yoffset, METH_NOARGS,
      NULL },
    { "set_xoffset", (PyCFunction)_wrap_gwy_data_field_set_xoffset, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "set_yoffset", (PyCFunction)_wrap_gwy_data_field_set_yoffset, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_si_unit_xy", (PyCFunction)_wrap_gwy_data_field_get_si_unit_xy, METH_NOARGS,
      NULL },
    { "get_si_unit_z", (PyCFunction)_wrap_gwy_data_field_get_si_unit_z, METH_NOARGS,
      NULL },
    { "set_si_unit_xy", (PyCFunction)_wrap_gwy_data_field_set_si_unit_xy, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "set_si_unit_z", (PyCFunction)_wrap_gwy_data_field_set_si_unit_z, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "copy_units_to_data_line", (PyCFunction)_wrap_gwy_data_field_copy_units_to_data_line, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "itor", (PyCFunction)_wrap_gwy_data_field_itor, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "jtor", (PyCFunction)_wrap_gwy_data_field_jtor, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "rtoi", (PyCFunction)_wrap_gwy_data_field_rtoi, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "rtoj", (PyCFunction)_wrap_gwy_data_field_rtoj, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_val", (PyCFunction)_wrap_gwy_data_field_get_val, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "set_val", (PyCFunction)_wrap_gwy_data_field_set_val, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_dval", (PyCFunction)_wrap_gwy_data_field_get_dval, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_dval_real", (PyCFunction)_wrap_gwy_data_field_get_dval_real, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "rotate", (PyCFunction)_wrap_gwy_data_field_rotate, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "invert", (PyCFunction)_wrap_gwy_data_field_invert, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "fill", (PyCFunction)_wrap_gwy_data_field_fill, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "clear", (PyCFunction)_wrap_gwy_data_field_clear, METH_NOARGS,
      NULL },
    { "multiply", (PyCFunction)_wrap_gwy_data_field_multiply, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "add", (PyCFunction)_wrap_gwy_data_field_add, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "area_fill", (PyCFunction)_wrap_gwy_data_field_area_fill, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "area_clear", (PyCFunction)_wrap_gwy_data_field_area_clear, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "area_multiply", (PyCFunction)_wrap_gwy_data_field_area_multiply, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "area_add", (PyCFunction)_wrap_gwy_data_field_area_add, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_profile", (PyCFunction)_wrap_gwy_data_field_get_profile, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_row", (PyCFunction)_wrap_gwy_data_field_get_row, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_column", (PyCFunction)_wrap_gwy_data_field_get_column, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "set_row", (PyCFunction)_wrap_gwy_data_field_set_row, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "set_column", (PyCFunction)_wrap_gwy_data_field_set_column, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_row_part", (PyCFunction)_wrap_gwy_data_field_get_row_part, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_column_part", (PyCFunction)_wrap_gwy_data_field_get_column_part, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "set_row_part", (PyCFunction)_wrap_gwy_data_field_set_row_part, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "set_column_part", (PyCFunction)_wrap_gwy_data_field_set_column_part, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_xder", (PyCFunction)_wrap_gwy_data_field_get_xder, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_yder", (PyCFunction)_wrap_gwy_data_field_get_yder, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_angder", (PyCFunction)_wrap_gwy_data_field_get_angder, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "xdwt", (PyCFunction)_wrap_gwy_data_field_xdwt, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "ydwt", (PyCFunction)_wrap_gwy_data_field_ydwt, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "dwt", (PyCFunction)_wrap_gwy_data_field_dwt, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "dwt_mark_anisotropy", (PyCFunction)_wrap_gwy_data_field_dwt_mark_anisotropy, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "elliptic_area_fill", (PyCFunction)_wrap_gwy_data_field_elliptic_area_fill, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "elliptic_area_unextract", (PyCFunction)_wrap_gwy_data_field_elliptic_area_unextract, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "circular_area_fill", (PyCFunction)_wrap_gwy_data_field_circular_area_fill, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "circular_area_unextract", (PyCFunction)_wrap_gwy_data_field_circular_area_unextract, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "normalize", (PyCFunction)_wrap_gwy_data_field_normalize, METH_NOARGS,
      NULL },
    { "renormalize", (PyCFunction)_wrap_gwy_data_field_renormalize, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "threshold", (PyCFunction)_wrap_gwy_data_field_threshold, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "area_threshold", (PyCFunction)_wrap_gwy_data_field_area_threshold, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "clamp", (PyCFunction)_wrap_gwy_data_field_clamp, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "area_clamp", (PyCFunction)_wrap_gwy_data_field_area_clamp, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "area_gather", (PyCFunction)_wrap_gwy_data_field_area_gather, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "convolve", (PyCFunction)_wrap_gwy_data_field_convolve, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "area_convolve", (PyCFunction)_wrap_gwy_data_field_area_convolve, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "convolve_1d", (PyCFunction)_wrap_gwy_data_field_convolve_1d, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "area_convolve_1d", (PyCFunction)_wrap_gwy_data_field_area_convolve_1d, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "filter_median", (PyCFunction)_wrap_gwy_data_field_filter_median, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "area_filter_median", (PyCFunction)_wrap_gwy_data_field_area_filter_median, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "filter_mean", (PyCFunction)_wrap_gwy_data_field_filter_mean, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "area_filter_mean", (PyCFunction)_wrap_gwy_data_field_area_filter_mean, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "filter_conservative", (PyCFunction)_wrap_gwy_data_field_filter_conservative, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "area_filter_conservative", (PyCFunction)_wrap_gwy_data_field_area_filter_conservative, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "filter_laplacian", (PyCFunction)_wrap_gwy_data_field_filter_laplacian, METH_NOARGS,
      NULL },
    { "area_filter_laplacian", (PyCFunction)_wrap_gwy_data_field_area_filter_laplacian, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "filter_sobel", (PyCFunction)_wrap_gwy_data_field_filter_sobel, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "area_filter_sobel", (PyCFunction)_wrap_gwy_data_field_area_filter_sobel, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "filter_prewitt", (PyCFunction)_wrap_gwy_data_field_filter_prewitt, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "area_filter_prewitt", (PyCFunction)_wrap_gwy_data_field_area_filter_prewitt, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "filter_dechecker", (PyCFunction)_wrap_gwy_data_field_filter_dechecker, METH_NOARGS,
      NULL },
    { "area_filter_dechecker", (PyCFunction)_wrap_gwy_data_field_area_filter_dechecker, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "filter_gaussian", (PyCFunction)_wrap_gwy_data_field_filter_gaussian, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "area_filter_gaussian", (PyCFunction)_wrap_gwy_data_field_area_filter_gaussian, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "filter_minimum", (PyCFunction)_wrap_gwy_data_field_filter_minimum, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "area_filter_minimum", (PyCFunction)_wrap_gwy_data_field_area_filter_minimum, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "filter_maximum", (PyCFunction)_wrap_gwy_data_field_filter_maximum, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "area_filter_maximum", (PyCFunction)_wrap_gwy_data_field_area_filter_maximum, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "filter_rms", (PyCFunction)_wrap_gwy_data_field_filter_rms, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "area_filter_rms", (PyCFunction)_wrap_gwy_data_field_area_filter_rms, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "filter_kuwahara", (PyCFunction)_wrap_gwy_data_field_filter_kuwahara, METH_NOARGS,
      NULL },
    { "area_filter_kuwahara", (PyCFunction)_wrap_gwy_data_field_area_filter_kuwahara, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "filter_canny", (PyCFunction)_wrap_gwy_data_field_filter_canny, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "shade", (PyCFunction)_wrap_gwy_data_field_shade, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "filter_harris", (PyCFunction)_wrap_gwy_data_field_filter_harris, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "fractal_partitioning", (PyCFunction)_wrap_gwy_data_field_fractal_partitioning, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "fractal_cubecounting", (PyCFunction)_wrap_gwy_data_field_fractal_cubecounting, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "fractal_triangulation", (PyCFunction)_wrap_gwy_data_field_fractal_triangulation, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "fractal_psdf", (PyCFunction)_wrap_gwy_data_field_fractal_psdf, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "fractal_correction", (PyCFunction)_wrap_gwy_data_field_fractal_correction, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "grains_mark_curvature", (PyCFunction)_wrap_gwy_data_field_grains_mark_curvature, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "grains_mark_watershed", (PyCFunction)_wrap_gwy_data_field_grains_mark_watershed, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "grains_remove_grain", (PyCFunction)_wrap_gwy_data_field_grains_remove_grain, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "grains_extract_grain", (PyCFunction)_wrap_gwy_data_field_grains_extract_grain, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "grains_remove_by_size", (PyCFunction)_wrap_gwy_data_field_grains_remove_by_size, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "grains_remove_by_height", (PyCFunction)_wrap_gwy_data_field_grains_remove_by_height, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "grains_mark_height", (PyCFunction)_wrap_gwy_data_field_grains_mark_height, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "grains_mark_slope", (PyCFunction)_wrap_gwy_data_field_grains_mark_slope, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "grains_add", (PyCFunction)_wrap_gwy_data_field_grains_add, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "grains_intersect", (PyCFunction)_wrap_gwy_data_field_grains_intersect, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "area_grains_tgnd", (PyCFunction)_wrap_gwy_data_field_area_grains_tgnd, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "grains_splash_water", (PyCFunction)_wrap_gwy_data_field_grains_splash_water, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "hough_line", (PyCFunction)_wrap_gwy_data_field_hough_line, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "hough_circle", (PyCFunction)_wrap_gwy_data_field_hough_circle, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "hough_line_strenghten", (PyCFunction)_wrap_gwy_data_field_hough_line_strenghten, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "hough_circle_strenghten", (PyCFunction)_wrap_gwy_data_field_hough_circle_strenghten, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "hough_polar_line_to_datafield", (PyCFunction)_wrap_gwy_data_field_hough_polar_line_to_datafield, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "a_1dfft", (PyCFunction)_wrap_gwy_data_field_1dfft, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "area_1dfft", (PyCFunction)_wrap_gwy_data_field_area_1dfft, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "a_1dfft_raw", (PyCFunction)_wrap_gwy_data_field_1dfft_raw, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "a_2dfft", (PyCFunction)_wrap_gwy_data_field_2dfft, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "area_2dfft", (PyCFunction)_wrap_gwy_data_field_area_2dfft, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "a_2dfft_raw", (PyCFunction)_wrap_gwy_data_field_2dfft_raw, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "a_2dfft_humanize", (PyCFunction)_wrap_gwy_data_field_2dfft_humanize, METH_NOARGS,
      NULL },
    { "a_2dfft_dehumanize", (PyCFunction)_wrap_gwy_data_field_2dfft_dehumanize, METH_NOARGS,
      NULL },
    { "fft_filter_1d", (PyCFunction)_wrap_gwy_data_field_fft_filter_1d, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "area_fit_plane", (PyCFunction)_wrap_gwy_data_field_area_fit_plane, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "fit_plane", (PyCFunction)_wrap_gwy_data_field_fit_plane, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "plane_level", (PyCFunction)_wrap_gwy_data_field_plane_level, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "plane_rotate", (PyCFunction)_wrap_gwy_data_field_plane_rotate, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "fit_lines", (PyCFunction)_wrap_gwy_data_field_fit_lines, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "subtract_polynom", (PyCFunction)_wrap_gwy_data_field_subtract_polynom, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "area_subtract_polynom", (PyCFunction)_wrap_gwy_data_field_area_subtract_polynom, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "subtract_legendre", (PyCFunction)_wrap_gwy_data_field_subtract_legendre, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "area_subtract_legendre", (PyCFunction)_wrap_gwy_data_field_area_subtract_legendre, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "subtract_poly_max", (PyCFunction)_wrap_gwy_data_field_subtract_poly_max, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "area_subtract_poly_max", (PyCFunction)_wrap_gwy_data_field_area_subtract_poly_max, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "area_local_plane_quantity", (PyCFunction)_wrap_gwy_data_field_area_local_plane_quantity, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "local_plane_quantity", (PyCFunction)_wrap_gwy_data_field_local_plane_quantity, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_max", (PyCFunction)_wrap_gwy_data_field_get_max, METH_NOARGS,
      NULL },
    { "get_min", (PyCFunction)_wrap_gwy_data_field_get_min, METH_NOARGS,
      NULL },
    { "get_min_max", (PyCFunction)_wrap_gwy_data_field_get_min_max, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_avg", (PyCFunction)_wrap_gwy_data_field_get_avg, METH_NOARGS,
      NULL },
    { "get_rms", (PyCFunction)_wrap_gwy_data_field_get_rms, METH_NOARGS,
      NULL },
    { "get_sum", (PyCFunction)_wrap_gwy_data_field_get_sum, METH_NOARGS,
      NULL },
    { "get_median", (PyCFunction)_wrap_gwy_data_field_get_median, METH_NOARGS,
      NULL },
    { "get_surface_area", (PyCFunction)_wrap_gwy_data_field_get_surface_area, METH_NOARGS,
      NULL },
    { "area_get_max", (PyCFunction)_wrap_gwy_data_field_area_get_max, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "area_get_min", (PyCFunction)_wrap_gwy_data_field_area_get_min, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "area_get_avg", (PyCFunction)_wrap_gwy_data_field_area_get_avg, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "area_get_rms", (PyCFunction)_wrap_gwy_data_field_area_get_rms, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "area_get_sum", (PyCFunction)_wrap_gwy_data_field_area_get_sum, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "area_get_median", (PyCFunction)_wrap_gwy_data_field_area_get_median, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "area_get_surface_area", (PyCFunction)_wrap_gwy_data_field_area_get_surface_area, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "area_get_volume", (PyCFunction)_wrap_gwy_data_field_area_get_volume, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_stats", (PyCFunction)_wrap_gwy_data_field_get_stats, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "area_get_stats", (PyCFunction)_wrap_gwy_data_field_area_get_stats, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "area_count_in_range", (PyCFunction)_wrap_gwy_data_field_area_count_in_range, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "area_dh", (PyCFunction)_wrap_gwy_data_field_area_dh, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "dh", (PyCFunction)_wrap_gwy_data_field_dh, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "area_cdh", (PyCFunction)_wrap_gwy_data_field_area_cdh, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "cdh", (PyCFunction)_wrap_gwy_data_field_cdh, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "area_da", (PyCFunction)_wrap_gwy_data_field_area_da, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "da", (PyCFunction)_wrap_gwy_data_field_da, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "area_cda", (PyCFunction)_wrap_gwy_data_field_area_cda, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "cda", (PyCFunction)_wrap_gwy_data_field_cda, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "area_acf", (PyCFunction)_wrap_gwy_data_field_area_acf, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "acf", (PyCFunction)_wrap_gwy_data_field_acf, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "area_hhcf", (PyCFunction)_wrap_gwy_data_field_area_hhcf, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "hhcf", (PyCFunction)_wrap_gwy_data_field_hhcf, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "area_psdf", (PyCFunction)_wrap_gwy_data_field_area_psdf, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "psdf", (PyCFunction)_wrap_gwy_data_field_psdf, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "area_rpsdf", (PyCFunction)_wrap_gwy_data_field_area_rpsdf, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "rpsdf", (PyCFunction)_wrap_gwy_data_field_rpsdf, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "area_2dacf", (PyCFunction)_wrap_gwy_data_field_area_2dacf, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "a_2dacf", (PyCFunction)_wrap_gwy_data_field_2dacf, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "area_minkowski_volume", (PyCFunction)_wrap_gwy_data_field_area_minkowski_volume, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "minkowski_volume", (PyCFunction)_wrap_gwy_data_field_minkowski_volume, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "area_minkowski_boundary", (PyCFunction)_wrap_gwy_data_field_area_minkowski_boundary, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "minkowski_boundary", (PyCFunction)_wrap_gwy_data_field_minkowski_boundary, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "area_minkowski_euler", (PyCFunction)_wrap_gwy_data_field_area_minkowski_euler, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "minkowski_euler", (PyCFunction)_wrap_gwy_data_field_minkowski_euler, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "slope_distribution", (PyCFunction)_wrap_gwy_data_field_slope_distribution, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_normal_coeffs", (PyCFunction)_wrap_gwy_data_field_get_normal_coeffs, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "area_get_inclination", (PyCFunction)_wrap_gwy_data_field_area_get_inclination, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "area_get_line_stats", (PyCFunction)_wrap_gwy_data_field_area_get_line_stats, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_line_stats", (PyCFunction)_wrap_gwy_data_field_get_line_stats, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_profile", (PyCFunction)_wrap_gwy_data_field_get_profile_wrap, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "fit_polynom", (PyCFunction)_wrap_gwy_data_field_fit_polynom_wrap, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "area_fit_polynom", (PyCFunction)_wrap_gwy_data_field_area_fit_polynom_wrap, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "elliptic_area_extract", (PyCFunction)_wrap_gwy_data_field_elliptic_area_extract_wrap, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "circular_area_extract", (PyCFunction)_wrap_gwy_data_field_circular_area_extract_wrap, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "create_full_mask", (PyCFunction)_wrap_gwy_data_field_create_full_mask, METH_NOARGS,
      NULL },
    { "duplicate", (PyCFunction)_wrap_gwy_data_field_duplicate, METH_NOARGS,
      NULL },
    { "get_data", (PyCFunction)_wrap_gwy_data_field_get_data, METH_NOARGS,
      NULL },
    { NULL, NULL, 0, NULL }
};

PyTypeObject G_GNUC_INTERNAL PyGwyDataField_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "gwy.DataField",                   /* tp_name */
    sizeof(PyGObject),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)0,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    offsetof(PyGObject, weakreflist),             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyGwyDataField_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    offsetof(PyGObject, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_gwy_data_field_new,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)0,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0              /* tp_is_gc */
};



/* ----------- GwyDataLine ----------- */

static int
_wrap_gwy_data_line_new(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "res", "real", "nullme", NULL };
    int res, nullme;
    double real;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"idi:GwyDataLine.__init__", kwlist, &res, &real, &nullme))
        return -1;
    self->obj = (GObject *)gwy_data_line_new(res, real, nullme);

    if (!self->obj) {
        PyErr_SetString(PyExc_RuntimeError, "could not create GwyDataLine object");
        return -1;
    }
    pygobject_register_wrapper((PyObject *)self);
    return 0;
}

static PyObject *
_wrap_gwy_data_line_check_compatibility(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "data_line2", "check", NULL };
    PyGObject *data_line2;
    PyObject *py_check = NULL;
    guint ret;
    GwyDataCompatibilityFlags check;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O:GwyDataLine.check_compatibility", kwlist, &PyGwyDataLine_Type, &data_line2, &py_check))
        return NULL;
    if (pyg_flags_get_value(GWY_TYPE_DATA_COMPATIBILITY_FLAGS, py_check, (gpointer)&check))
        return NULL;
    
    ret = gwy_data_line_check_compatibility(GWY_DATA_LINE(self->obj), GWY_DATA_LINE(data_line2->obj), check);
    
    return pyg_flags_from_gtype(GWY_TYPE_DATA_COMPATIBILITY_FLAGS, ret);
}

static PyObject *
_wrap_gwy_data_line_copy_units_to_data_field(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "data_field", NULL };
    PyGObject *data_field;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:GwyDataLine.copy_units_to_data_field", kwlist, &PyGwyDataField_Type, &data_field))
        return NULL;
    
    gwy_data_line_copy_units_to_data_field(GWY_DATA_LINE(self->obj), GWY_DATA_FIELD(data_field->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_line_new_alike(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "nullme", NULL };
    int nullme;
    GwyDataLine *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:GwyDataLine.new_alike", kwlist, &nullme))
        return NULL;
    
    ret = gwy_data_line_new_alike(GWY_DATA_LINE(self->obj), nullme);
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_data_line_data_changed(PyGObject *self)
{
    
    gwy_data_line_data_changed(GWY_DATA_LINE(self->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_line_new_resampled(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "res", "interpolation", NULL };
    int res;
    PyObject *py_interpolation = NULL;
    GwyInterpolationType interpolation;
    GwyDataLine *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iO:GwyDataLine.new_resampled", kwlist, &res, &py_interpolation))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_INTERPOLATION_TYPE, py_interpolation, (gpointer)&interpolation))
        return NULL;
    
    ret = gwy_data_line_new_resampled(GWY_DATA_LINE(self->obj), res, interpolation);
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_data_line_resample(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "res", "interpolation", NULL };
    int res;
    PyObject *py_interpolation = NULL;
    GwyInterpolationType interpolation;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iO:GwyDataLine.resample", kwlist, &res, &py_interpolation))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_INTERPOLATION_TYPE, py_interpolation, (gpointer)&interpolation))
        return NULL;
    
    gwy_data_line_resample(GWY_DATA_LINE(self->obj), res, interpolation);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_line_resize(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "from_", "to", NULL };
    int from, to;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ii:GwyDataLine.resize", kwlist, &from, &to))
        return NULL;
    
    gwy_data_line_resize(GWY_DATA_LINE(self->obj), from, to);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_line_part_extract(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "from_", "len", NULL };
    int from, len;
    GwyDataLine *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ii:GwyDataLine.part_extract", kwlist, &from, &len))
        return NULL;
    
    ret = gwy_data_line_part_extract(GWY_DATA_LINE(self->obj), from, len);
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_data_line_copy(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "b", NULL };
    PyGObject *b;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:GwyDataLine.copy", kwlist, &PyGwyDataLine_Type, &b))
        return NULL;
    
    gwy_data_line_copy(GWY_DATA_LINE(self->obj), GWY_DATA_LINE(b->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_line_get_res(PyGObject *self)
{
    int ret;

    
    ret = gwy_data_line_get_res(GWY_DATA_LINE(self->obj));
    
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_gwy_data_line_get_real(PyGObject *self)
{
    double ret;

    
    ret = gwy_data_line_get_real(GWY_DATA_LINE(self->obj));
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_line_set_real(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "real", NULL };
    double real;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"d:GwyDataLine.set_real", kwlist, &real))
        return NULL;
    
    gwy_data_line_set_real(GWY_DATA_LINE(self->obj), real);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_line_get_offset(PyGObject *self)
{
    double ret;

    
    ret = gwy_data_line_get_offset(GWY_DATA_LINE(self->obj));
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_line_set_offset(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "offset", NULL };
    double offset;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"d:GwyDataLine.set_offset", kwlist, &offset))
        return NULL;
    
    gwy_data_line_set_offset(GWY_DATA_LINE(self->obj), offset);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_line_get_si_unit_x(PyGObject *self)
{
    GwySIUnit *ret;

    
    ret = gwy_data_line_get_si_unit_x(GWY_DATA_LINE(self->obj));
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_data_line_get_si_unit_y(PyGObject *self)
{
    GwySIUnit *ret;

    
    ret = gwy_data_line_get_si_unit_y(GWY_DATA_LINE(self->obj));
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_data_line_set_si_unit_x(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "si_unit", NULL };
    PyGObject *si_unit;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:GwyDataLine.set_si_unit_x", kwlist, &PyGwySIUnit_Type, &si_unit))
        return NULL;
    
    gwy_data_line_set_si_unit_x(GWY_DATA_LINE(self->obj), GWY_SI_UNIT(si_unit->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_line_set_si_unit_y(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "si_unit", NULL };
    PyGObject *si_unit;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:GwyDataLine.set_si_unit_y", kwlist, &PyGwySIUnit_Type, &si_unit))
        return NULL;
    
    gwy_data_line_set_si_unit_y(GWY_DATA_LINE(self->obj), GWY_SI_UNIT(si_unit->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_line_itor(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "pixpos", NULL };
    double pixpos, ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"d:GwyDataLine.itor", kwlist, &pixpos))
        return NULL;
    
    ret = gwy_data_line_itor(GWY_DATA_LINE(self->obj), pixpos);
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_line_rtoi(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "realpos", NULL };
    double realpos, ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"d:GwyDataLine.rtoi", kwlist, &realpos))
        return NULL;
    
    ret = gwy_data_line_rtoi(GWY_DATA_LINE(self->obj), realpos);
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_line_get_val(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "i", NULL };
    int i;
    double ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:GwyDataLine.get_val", kwlist, &i))
        return NULL;
    
    ret = gwy_data_line_get_val(GWY_DATA_LINE(self->obj), i);
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_line_set_val(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "i", "value", NULL };
    int i;
    double value;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"id:GwyDataLine.set_val", kwlist, &i, &value))
        return NULL;
    
    gwy_data_line_set_val(GWY_DATA_LINE(self->obj), i, value);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_line_get_dval(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "x", "interpolation", NULL };
    int interpolation;
    double x, ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"di:GwyDataLine.get_dval", kwlist, &x, &interpolation))
        return NULL;
    
    ret = gwy_data_line_get_dval(GWY_DATA_LINE(self->obj), x, interpolation);
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_line_get_dval_real(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "x", "interpolation", NULL };
    int interpolation;
    double x, ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"di:GwyDataLine.get_dval_real", kwlist, &x, &interpolation))
        return NULL;
    
    ret = gwy_data_line_get_dval_real(GWY_DATA_LINE(self->obj), x, interpolation);
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_line_invert(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "x", "z", NULL };
    int x, z;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ii:GwyDataLine.invert", kwlist, &x, &z))
        return NULL;
    
    gwy_data_line_invert(GWY_DATA_LINE(self->obj), x, z);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_line_clear(PyGObject *self)
{
    
    gwy_data_line_clear(GWY_DATA_LINE(self->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_line_fill(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "value", NULL };
    double value;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"d:GwyDataLine.fill", kwlist, &value))
        return NULL;
    
    gwy_data_line_fill(GWY_DATA_LINE(self->obj), value);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_line_multiply(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "value", NULL };
    double value;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"d:GwyDataLine.multiply", kwlist, &value))
        return NULL;
    
    gwy_data_line_multiply(GWY_DATA_LINE(self->obj), value);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_line_add(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "value", NULL };
    double value;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"d:GwyDataLine.add", kwlist, &value))
        return NULL;
    
    gwy_data_line_add(GWY_DATA_LINE(self->obj), value);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_line_part_clear(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "from_", "to", NULL };
    int from, to;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ii:GwyDataLine.part_clear", kwlist, &from, &to))
        return NULL;
    
    gwy_data_line_part_clear(GWY_DATA_LINE(self->obj), from, to);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_line_part_fill(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "from_", "to", "value", NULL };
    int from, to;
    double value;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iid:GwyDataLine.part_fill", kwlist, &from, &to, &value))
        return NULL;
    
    gwy_data_line_part_fill(GWY_DATA_LINE(self->obj), from, to, value);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_line_part_multiply(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "from_", "to", "value", NULL };
    int from, to;
    double value;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iid:GwyDataLine.part_multiply", kwlist, &from, &to, &value))
        return NULL;
    
    gwy_data_line_part_multiply(GWY_DATA_LINE(self->obj), from, to, value);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_line_part_add(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "from_", "to", "value", NULL };
    int from, to;
    double value;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iid:GwyDataLine.part_add", kwlist, &from, &to, &value))
        return NULL;
    
    gwy_data_line_part_add(GWY_DATA_LINE(self->obj), from, to, value);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_line_threshold(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "threshval", "bottom", "top", NULL };
    int ret;
    double threshval, bottom, top;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ddd:GwyDataLine.threshold", kwlist, &threshval, &bottom, &top))
        return NULL;
    
    ret = gwy_data_line_threshold(GWY_DATA_LINE(self->obj), threshval, bottom, top);
    
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_gwy_data_line_part_threshold(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "from_", "to", "threshval", "bottom", "top", NULL };
    int from, to, ret;
    double threshval, bottom, top;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iiddd:GwyDataLine.part_threshold", kwlist, &from, &to, &threshval, &bottom, &top))
        return NULL;
    
    ret = gwy_data_line_part_threshold(GWY_DATA_LINE(self->obj), from, to, threshval, bottom, top);
    
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_gwy_data_line_line_level(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "av", "bv", NULL };
    double av, bv;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"dd:GwyDataLine.line_level", kwlist, &av, &bv))
        return NULL;
    
    gwy_data_line_line_level(GWY_DATA_LINE(self->obj), av, bv);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_line_rotate(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "angle", "interpolation", NULL };
    PyObject *py_interpolation = NULL;
    double angle;
    GwyInterpolationType interpolation;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"dO:GwyDataLine.rotate", kwlist, &angle, &py_interpolation))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_INTERPOLATION_TYPE, py_interpolation, (gpointer)&interpolation))
        return NULL;
    
    gwy_data_line_rotate(GWY_DATA_LINE(self->obj), angle, interpolation);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_line_line_rotate(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "angle", "interpolation", NULL };
    int interpolation;
    double angle;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"di:GwyDataLine.line_rotate", kwlist, &angle, &interpolation))
        return NULL;
    
    gwy_data_line_line_rotate(GWY_DATA_LINE(self->obj), angle, interpolation);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_line_get_der(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "i", NULL };
    int i;
    double ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:GwyDataLine.get_der", kwlist, &i))
        return NULL;
    
    ret = gwy_data_line_get_der(GWY_DATA_LINE(self->obj), i);
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_line_part_subtract_polynom(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "n", "coeffs", "from_", "to", NULL };
    int n, i_coeffs, from, to;
    PyObject *coeffs_pyobj;
    gdouble *coeffs;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iOii:GwyDataLine.part_subtract_polynom", kwlist, &n, &coeffs_pyobj, &from, &to))
        return NULL;
    if (!PyList_Check(coeffs_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'coeffs' must be a list of floats");
        return NULL;
    }
    coeffs =  g_malloc(sizeof(gdouble)*PyList_Size(coeffs_pyobj));
    if (coeffs == NULL) {
        return PyErr_NoMemory();
    }
    for (i_coeffs = 0; i_coeffs < PyList_Size(coeffs_pyobj); i_coeffs++) {
        if (!PyFloat_Check(PyList_GetItem(coeffs_pyobj, i_coeffs))) {
            g_free(coeffs);
            PyErr_SetString(PyExc_TypeError, "Parameter 'coeffs' must be a list of floats");
            return NULL;
        }
        coeffs[i_coeffs] = PyFloat_AsDouble(PyList_GetItem(coeffs_pyobj, i_coeffs));
    }
    
    gwy_data_line_part_subtract_polynom(GWY_DATA_LINE(self->obj), n, coeffs, from, to);
    
    g_free(coeffs);
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_line_subtract_polynom(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "n", "coeffs", NULL };
    int n, i_coeffs;
    PyObject *coeffs_pyobj;
    gdouble *coeffs;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iO:GwyDataLine.subtract_polynom", kwlist, &n, &coeffs_pyobj))
        return NULL;
    if (!PyList_Check(coeffs_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'coeffs' must be a list of floats");
        return NULL;
    }
    coeffs =  g_malloc(sizeof(gdouble)*PyList_Size(coeffs_pyobj));
    if (coeffs == NULL) {
        return PyErr_NoMemory();
    }
    for (i_coeffs = 0; i_coeffs < PyList_Size(coeffs_pyobj); i_coeffs++) {
        if (!PyFloat_Check(PyList_GetItem(coeffs_pyobj, i_coeffs))) {
            g_free(coeffs);
            PyErr_SetString(PyExc_TypeError, "Parameter 'coeffs' must be a list of floats");
            return NULL;
        }
        coeffs[i_coeffs] = PyFloat_AsDouble(PyList_GetItem(coeffs_pyobj, i_coeffs));
    }
    
    gwy_data_line_subtract_polynom(GWY_DATA_LINE(self->obj), n, coeffs);
    
    g_free(coeffs);
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_line_cumulate(PyGObject *self)
{
    
    gwy_data_line_cumulate(GWY_DATA_LINE(self->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_line_dwt(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "wt_coefs", "direction", "minsize", NULL };
    PyGObject *wt_coefs;
    GwyTransformDirection direction;
    int minsize;
    PyObject *py_direction = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!Oi:GwyDataLine.dwt", kwlist, &PyGwyDataLine_Type, &wt_coefs, &py_direction, &minsize))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_TRANSFORM_DIRECTION, py_direction, (gpointer)&direction))
        return NULL;
    
    gwy_data_line_dwt(GWY_DATA_LINE(self->obj), GWY_DATA_LINE(wt_coefs->obj), direction, minsize);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_line_fft(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "isrc", "rdest", "idest", "windowing", "direction", "interpolation", "preserverms", "level", NULL };
    GwyWindowingType windowing;
    GwyTransformDirection direction;
    int preserverms, level;
    PyObject *py_windowing = NULL, *py_direction = NULL, *py_interpolation = NULL;
    PyGObject *isrc, *rdest, *idest;
    GwyInterpolationType interpolation;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!O!OOOii:GwyDataLine.fft", kwlist, &PyGwyDataLine_Type, &isrc, &PyGwyDataLine_Type, &rdest, &PyGwyDataLine_Type, &idest, &py_windowing, &py_direction, &py_interpolation, &preserverms, &level))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_WINDOWING_TYPE, py_windowing, (gpointer)&windowing))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_TRANSFORM_DIRECTION, py_direction, (gpointer)&direction))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_INTERPOLATION_TYPE, py_interpolation, (gpointer)&interpolation))
        return NULL;
    
    gwy_data_line_fft(GWY_DATA_LINE(self->obj), GWY_DATA_LINE(isrc->obj), GWY_DATA_LINE(rdest->obj), GWY_DATA_LINE(idest->obj), windowing, direction, interpolation, preserverms, level);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_line_part_fft(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "isrc", "rdest", "idest", "from_", "len", "windowing", "direction", "interpolation", "preserverms", "level", NULL };
    GwyTransformDirection direction;
    GwyWindowingType windowing;
    int from, len, preserverms, level;
    PyObject *py_windowing = NULL, *py_direction = NULL, *py_interpolation = NULL;
    PyGObject *isrc, *rdest, *idest;
    GwyInterpolationType interpolation;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!O!iiOOOii:GwyDataLine.part_fft", kwlist, &PyGwyDataLine_Type, &isrc, &PyGwyDataLine_Type, &rdest, &PyGwyDataLine_Type, &idest, &from, &len, &py_windowing, &py_direction, &py_interpolation, &preserverms, &level))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_WINDOWING_TYPE, py_windowing, (gpointer)&windowing))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_TRANSFORM_DIRECTION, py_direction, (gpointer)&direction))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_INTERPOLATION_TYPE, py_interpolation, (gpointer)&interpolation))
        return NULL;
    
    gwy_data_line_part_fft(GWY_DATA_LINE(self->obj), GWY_DATA_LINE(isrc->obj), GWY_DATA_LINE(rdest->obj), GWY_DATA_LINE(idest->obj), from, len, windowing, direction, interpolation, preserverms, level);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_line_fft_raw(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "isrc", "rdest", "idest", "direction", NULL };
    PyGObject *isrc, *rdest, *idest;
    GwyTransformDirection direction;
    PyObject *py_direction = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!O!O:GwyDataLine.fft_raw", kwlist, &PyGwyDataLine_Type, &isrc, &PyGwyDataLine_Type, &rdest, &PyGwyDataLine_Type, &idest, &py_direction))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_TRANSFORM_DIRECTION, py_direction, (gpointer)&direction))
        return NULL;
    
    gwy_data_line_fft_raw(GWY_DATA_LINE(self->obj), GWY_DATA_LINE(isrc->obj), GWY_DATA_LINE(rdest->obj), GWY_DATA_LINE(idest->obj), direction);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_line_get_max(PyGObject *self)
{
    double ret;

    
    ret = gwy_data_line_get_max(GWY_DATA_LINE(self->obj));
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_line_get_min(PyGObject *self)
{
    double ret;

    
    ret = gwy_data_line_get_min(GWY_DATA_LINE(self->obj));
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_line_get_avg(PyGObject *self)
{
    double ret;

    
    ret = gwy_data_line_get_avg(GWY_DATA_LINE(self->obj));
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_line_get_rms(PyGObject *self)
{
    double ret;

    
    ret = gwy_data_line_get_rms(GWY_DATA_LINE(self->obj));
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_line_get_tan_beta0(PyGObject *self)
{
    double ret;

    
    ret = gwy_data_line_get_tan_beta0(GWY_DATA_LINE(self->obj));
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_line_get_sum(PyGObject *self)
{
    double ret;

    
    ret = gwy_data_line_get_sum(GWY_DATA_LINE(self->obj));
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_line_part_get_max(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "from_", "to", NULL };
    int from, to;
    double ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ii:GwyDataLine.part_get_max", kwlist, &from, &to))
        return NULL;
    
    ret = gwy_data_line_part_get_max(GWY_DATA_LINE(self->obj), from, to);
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_line_part_get_min(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "from_", "to", NULL };
    int from, to;
    double ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ii:GwyDataLine.part_get_min", kwlist, &from, &to))
        return NULL;
    
    ret = gwy_data_line_part_get_min(GWY_DATA_LINE(self->obj), from, to);
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_line_part_get_avg(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "from_", "to", NULL };
    int from, to;
    double ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ii:GwyDataLine.part_get_avg", kwlist, &from, &to))
        return NULL;
    
    ret = gwy_data_line_part_get_avg(GWY_DATA_LINE(self->obj), from, to);
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_line_part_get_rms(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "from_", "to", NULL };
    int from, to;
    double ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ii:GwyDataLine.part_get_rms", kwlist, &from, &to))
        return NULL;
    
    ret = gwy_data_line_part_get_rms(GWY_DATA_LINE(self->obj), from, to);
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_line_part_get_tan_beta0(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "from_", "to", NULL };
    int from, to;
    double ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ii:GwyDataLine.part_get_tan_beta0", kwlist, &from, &to))
        return NULL;
    
    ret = gwy_data_line_part_get_tan_beta0(GWY_DATA_LINE(self->obj), from, to);
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_line_part_get_sum(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "from_", "to", NULL };
    int from, to;
    double ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ii:GwyDataLine.part_get_sum", kwlist, &from, &to))
        return NULL;
    
    ret = gwy_data_line_part_get_sum(GWY_DATA_LINE(self->obj), from, to);
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_line_get_modus(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "histogram_steps", NULL };
    int histogram_steps;
    double ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:GwyDataLine.get_modus", kwlist, &histogram_steps))
        return NULL;
    
    ret = gwy_data_line_get_modus(GWY_DATA_LINE(self->obj), histogram_steps);
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_line_part_get_modus(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "from_", "to", "histogram_steps", NULL };
    int from, to, histogram_steps;
    double ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iii:GwyDataLine.part_get_modus", kwlist, &from, &to, &histogram_steps))
        return NULL;
    
    ret = gwy_data_line_part_get_modus(GWY_DATA_LINE(self->obj), from, to, histogram_steps);
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_line_get_median(PyGObject *self)
{
    double ret;

    
    ret = gwy_data_line_get_median(GWY_DATA_LINE(self->obj));
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_line_part_get_median(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "from_", "to", NULL };
    int from, to;
    double ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ii:GwyDataLine.part_get_median", kwlist, &from, &to))
        return NULL;
    
    ret = gwy_data_line_part_get_median(GWY_DATA_LINE(self->obj), from, to);
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_line_get_length(PyGObject *self)
{
    double ret;

    
    ret = gwy_data_line_get_length(GWY_DATA_LINE(self->obj));
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_line_distribution(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "distribution", "ymin", "ymax", "normalize_to_unity", "nstats", NULL };
    PyGObject *distribution;
    double ymin, ymax;
    int normalize_to_unity, nstats;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!ddii:GwyDataLine.distribution", kwlist, &PyGwyDataLine_Type, &distribution, &ymin, &ymax, &normalize_to_unity, &nstats))
        return NULL;
    
    gwy_data_line_distribution(GWY_DATA_LINE(self->obj), GWY_DATA_LINE(distribution->obj), ymin, ymax, normalize_to_unity, nstats);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_line_dh(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "target_line", "ymin", "ymax", "nsteps", NULL };
    PyGObject *target_line;
    double ymin, ymax;
    int nsteps;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!ddi:GwyDataLine.dh", kwlist, &PyGwyDataLine_Type, &target_line, &ymin, &ymax, &nsteps))
        return NULL;
    
    gwy_data_line_dh(GWY_DATA_LINE(self->obj), GWY_DATA_LINE(target_line->obj), ymin, ymax, nsteps);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_line_cdh(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "target_line", "ymin", "ymax", "nsteps", NULL };
    PyGObject *target_line;
    double ymin, ymax;
    int nsteps;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!ddi:GwyDataLine.cdh", kwlist, &PyGwyDataLine_Type, &target_line, &ymin, &ymax, &nsteps))
        return NULL;
    
    gwy_data_line_cdh(GWY_DATA_LINE(self->obj), GWY_DATA_LINE(target_line->obj), ymin, ymax, nsteps);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_line_da(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "target_line", "ymin", "ymax", "nsteps", NULL };
    PyGObject *target_line;
    double ymin, ymax;
    int nsteps;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!ddi:GwyDataLine.da", kwlist, &PyGwyDataLine_Type, &target_line, &ymin, &ymax, &nsteps))
        return NULL;
    
    gwy_data_line_da(GWY_DATA_LINE(self->obj), GWY_DATA_LINE(target_line->obj), ymin, ymax, nsteps);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_line_cda(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "target_line", "ymin", "ymax", "nsteps", NULL };
    PyGObject *target_line;
    double ymin, ymax;
    int nsteps;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!ddi:GwyDataLine.cda", kwlist, &PyGwyDataLine_Type, &target_line, &ymin, &ymax, &nsteps))
        return NULL;
    
    gwy_data_line_cda(GWY_DATA_LINE(self->obj), GWY_DATA_LINE(target_line->obj), ymin, ymax, nsteps);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_line_acf(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "target_line", NULL };
    PyGObject *target_line;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:GwyDataLine.acf", kwlist, &PyGwyDataLine_Type, &target_line))
        return NULL;
    
    gwy_data_line_acf(GWY_DATA_LINE(self->obj), GWY_DATA_LINE(target_line->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_line_hhcf(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "target_line", NULL };
    PyGObject *target_line;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:GwyDataLine.hhcf", kwlist, &PyGwyDataLine_Type, &target_line))
        return NULL;
    
    gwy_data_line_hhcf(GWY_DATA_LINE(self->obj), GWY_DATA_LINE(target_line->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_line_psdf(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "target_line", "windowing", "interpolation", NULL };
    PyGObject *target_line;
    int windowing, interpolation;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!ii:GwyDataLine.psdf", kwlist, &PyGwyDataLine_Type, &target_line, &windowing, &interpolation))
        return NULL;
    
    gwy_data_line_psdf(GWY_DATA_LINE(self->obj), GWY_DATA_LINE(target_line->obj), windowing, interpolation);
    
    Py_INCREF(Py_None);
    return Py_None;
}

#line 305 "./pygwy.override"
static PyObject *
_wrap_gwy_data_line_get_data(PyGObject *self)
{   
   gdouble *data;
   gint res;
   PyObject *tuple;
   int i;

   // Get size of data line
   res = gwy_data_line_get_res(GWY_DATA_LINE(self->obj));
   // Create tuple by size of data field
   tuple = PyTuple_New(res);
   
   data = gwy_data_line_get_data(GWY_DATA_LINE(self->obj));
   // fill tuple with data field values
   for (i = 0; i < res; i++) {
      /* get data read only, any changes to the tuple does not reflect on actual datafield */
      PyTuple_SetItem(tuple, i, PyFloat_FromDouble(data[i]));
   }

   return tuple;
}
#line 7665 "pygwywrap.c"


static const PyMethodDef _PyGwyDataLine_methods[] = {
    { "check_compatibility", (PyCFunction)_wrap_gwy_data_line_check_compatibility, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "copy_units_to_data_field", (PyCFunction)_wrap_gwy_data_line_copy_units_to_data_field, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "new_alike", (PyCFunction)_wrap_gwy_data_line_new_alike, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "data_changed", (PyCFunction)_wrap_gwy_data_line_data_changed, METH_NOARGS,
      NULL },
    { "new_resampled", (PyCFunction)_wrap_gwy_data_line_new_resampled, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "resample", (PyCFunction)_wrap_gwy_data_line_resample, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "resize", (PyCFunction)_wrap_gwy_data_line_resize, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "part_extract", (PyCFunction)_wrap_gwy_data_line_part_extract, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "copy", (PyCFunction)_wrap_gwy_data_line_copy, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_res", (PyCFunction)_wrap_gwy_data_line_get_res, METH_NOARGS,
      NULL },
    { "get_real", (PyCFunction)_wrap_gwy_data_line_get_real, METH_NOARGS,
      NULL },
    { "set_real", (PyCFunction)_wrap_gwy_data_line_set_real, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_offset", (PyCFunction)_wrap_gwy_data_line_get_offset, METH_NOARGS,
      NULL },
    { "set_offset", (PyCFunction)_wrap_gwy_data_line_set_offset, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_si_unit_x", (PyCFunction)_wrap_gwy_data_line_get_si_unit_x, METH_NOARGS,
      NULL },
    { "get_si_unit_y", (PyCFunction)_wrap_gwy_data_line_get_si_unit_y, METH_NOARGS,
      NULL },
    { "set_si_unit_x", (PyCFunction)_wrap_gwy_data_line_set_si_unit_x, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "set_si_unit_y", (PyCFunction)_wrap_gwy_data_line_set_si_unit_y, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "itor", (PyCFunction)_wrap_gwy_data_line_itor, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "rtoi", (PyCFunction)_wrap_gwy_data_line_rtoi, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_val", (PyCFunction)_wrap_gwy_data_line_get_val, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "set_val", (PyCFunction)_wrap_gwy_data_line_set_val, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_dval", (PyCFunction)_wrap_gwy_data_line_get_dval, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_dval_real", (PyCFunction)_wrap_gwy_data_line_get_dval_real, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "invert", (PyCFunction)_wrap_gwy_data_line_invert, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "clear", (PyCFunction)_wrap_gwy_data_line_clear, METH_NOARGS,
      NULL },
    { "fill", (PyCFunction)_wrap_gwy_data_line_fill, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "multiply", (PyCFunction)_wrap_gwy_data_line_multiply, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "add", (PyCFunction)_wrap_gwy_data_line_add, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "part_clear", (PyCFunction)_wrap_gwy_data_line_part_clear, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "part_fill", (PyCFunction)_wrap_gwy_data_line_part_fill, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "part_multiply", (PyCFunction)_wrap_gwy_data_line_part_multiply, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "part_add", (PyCFunction)_wrap_gwy_data_line_part_add, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "threshold", (PyCFunction)_wrap_gwy_data_line_threshold, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "part_threshold", (PyCFunction)_wrap_gwy_data_line_part_threshold, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "line_level", (PyCFunction)_wrap_gwy_data_line_line_level, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "rotate", (PyCFunction)_wrap_gwy_data_line_rotate, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "line_rotate", (PyCFunction)_wrap_gwy_data_line_line_rotate, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_der", (PyCFunction)_wrap_gwy_data_line_get_der, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "part_subtract_polynom", (PyCFunction)_wrap_gwy_data_line_part_subtract_polynom, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "subtract_polynom", (PyCFunction)_wrap_gwy_data_line_subtract_polynom, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "cumulate", (PyCFunction)_wrap_gwy_data_line_cumulate, METH_NOARGS,
      NULL },
    { "dwt", (PyCFunction)_wrap_gwy_data_line_dwt, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "fft", (PyCFunction)_wrap_gwy_data_line_fft, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "part_fft", (PyCFunction)_wrap_gwy_data_line_part_fft, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "fft_raw", (PyCFunction)_wrap_gwy_data_line_fft_raw, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_max", (PyCFunction)_wrap_gwy_data_line_get_max, METH_NOARGS,
      NULL },
    { "get_min", (PyCFunction)_wrap_gwy_data_line_get_min, METH_NOARGS,
      NULL },
    { "get_avg", (PyCFunction)_wrap_gwy_data_line_get_avg, METH_NOARGS,
      NULL },
    { "get_rms", (PyCFunction)_wrap_gwy_data_line_get_rms, METH_NOARGS,
      NULL },
    { "get_tan_beta0", (PyCFunction)_wrap_gwy_data_line_get_tan_beta0, METH_NOARGS,
      NULL },
    { "get_sum", (PyCFunction)_wrap_gwy_data_line_get_sum, METH_NOARGS,
      NULL },
    { "part_get_max", (PyCFunction)_wrap_gwy_data_line_part_get_max, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "part_get_min", (PyCFunction)_wrap_gwy_data_line_part_get_min, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "part_get_avg", (PyCFunction)_wrap_gwy_data_line_part_get_avg, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "part_get_rms", (PyCFunction)_wrap_gwy_data_line_part_get_rms, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "part_get_tan_beta0", (PyCFunction)_wrap_gwy_data_line_part_get_tan_beta0, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "part_get_sum", (PyCFunction)_wrap_gwy_data_line_part_get_sum, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_modus", (PyCFunction)_wrap_gwy_data_line_get_modus, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "part_get_modus", (PyCFunction)_wrap_gwy_data_line_part_get_modus, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_median", (PyCFunction)_wrap_gwy_data_line_get_median, METH_NOARGS,
      NULL },
    { "part_get_median", (PyCFunction)_wrap_gwy_data_line_part_get_median, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_length", (PyCFunction)_wrap_gwy_data_line_get_length, METH_NOARGS,
      NULL },
    { "distribution", (PyCFunction)_wrap_gwy_data_line_distribution, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "dh", (PyCFunction)_wrap_gwy_data_line_dh, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "cdh", (PyCFunction)_wrap_gwy_data_line_cdh, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "da", (PyCFunction)_wrap_gwy_data_line_da, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "cda", (PyCFunction)_wrap_gwy_data_line_cda, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "acf", (PyCFunction)_wrap_gwy_data_line_acf, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "hhcf", (PyCFunction)_wrap_gwy_data_line_hhcf, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "psdf", (PyCFunction)_wrap_gwy_data_line_psdf, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_data", (PyCFunction)_wrap_gwy_data_line_get_data, METH_NOARGS,
      NULL },
    { NULL, NULL, 0, NULL }
};

PyTypeObject G_GNUC_INTERNAL PyGwyDataLine_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "gwy.DataLine",                   /* tp_name */
    sizeof(PyGObject),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)0,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    offsetof(PyGObject, weakreflist),             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyGwyDataLine_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    offsetof(PyGObject, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_gwy_data_line_new,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)0,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0              /* tp_is_gc */
};



/* ----------- GwyDataView ----------- */

static int
_wrap_gwy_data_view_new(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "data", NULL };
    PyGObject *data;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:GwyDataView.__init__", kwlist, &PyGwyContainer_Type, &data))
        return -1;
    self->obj = (GObject *)gwy_data_view_new(GWY_CONTAINER(data->obj));

    if (!self->obj) {
        PyErr_SetString(PyExc_RuntimeError, "could not create GwyDataView object");
        return -1;
    }
    pygobject_register_wrapper((PyObject *)self);
    return 0;
}

static PyObject *
_wrap_gwy_data_view_get_base_layer(PyGObject *self)
{
    GwyPixmapLayer *ret;

    
    ret = gwy_data_view_get_base_layer(GWY_DATA_VIEW(self->obj));
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_data_view_set_base_layer(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "layer", NULL };
    PyGObject *layer;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:GwyDataView.set_base_layer", kwlist, &PyGwyPixmapLayer_Type, &layer))
        return NULL;
    
    gwy_data_view_set_base_layer(GWY_DATA_VIEW(self->obj), GWY_PIXMAP_LAYER(layer->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_view_get_alpha_layer(PyGObject *self)
{
    GwyPixmapLayer *ret;

    
    ret = gwy_data_view_get_alpha_layer(GWY_DATA_VIEW(self->obj));
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_data_view_set_alpha_layer(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "layer", NULL };
    PyGObject *layer;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:GwyDataView.set_alpha_layer", kwlist, &PyGwyPixmapLayer_Type, &layer))
        return NULL;
    
    gwy_data_view_set_alpha_layer(GWY_DATA_VIEW(self->obj), GWY_PIXMAP_LAYER(layer->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_view_get_top_layer(PyGObject *self)
{
    GwyVectorLayer *ret;

    
    ret = gwy_data_view_get_top_layer(GWY_DATA_VIEW(self->obj));
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_data_view_set_top_layer(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "layer", NULL };
    PyGObject *layer;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:GwyDataView.set_top_layer", kwlist, &PyGwyVectorLayer_Type, &layer))
        return NULL;
    
    gwy_data_view_set_top_layer(GWY_DATA_VIEW(self->obj), GWY_VECTOR_LAYER(layer->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_view_get_data_prefix(PyGObject *self)
{
    const gchar *ret;

    
    ret = gwy_data_view_get_data_prefix(GWY_DATA_VIEW(self->obj));
    
    if (ret)
        return PyString_FromString(ret);
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_view_set_data_prefix(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "prefix", NULL };
    char *prefix;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:GwyDataView.set_data_prefix", kwlist, &prefix))
        return NULL;
    
    gwy_data_view_set_data_prefix(GWY_DATA_VIEW(self->obj), prefix);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_view_get_hexcess(PyGObject *self)
{
    double ret;

    
    ret = gwy_data_view_get_hexcess(GWY_DATA_VIEW(self->obj));
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_view_get_vexcess(PyGObject *self)
{
    double ret;

    
    ret = gwy_data_view_get_vexcess(GWY_DATA_VIEW(self->obj));
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_view_set_zoom(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "zoom", NULL };
    double zoom;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"d:GwyDataView.set_zoom", kwlist, &zoom))
        return NULL;
    
    gwy_data_view_set_zoom(GWY_DATA_VIEW(self->obj), zoom);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_view_get_zoom(PyGObject *self)
{
    double ret;

    
    ret = gwy_data_view_get_zoom(GWY_DATA_VIEW(self->obj));
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_view_get_real_zoom(PyGObject *self)
{
    double ret;

    
    ret = gwy_data_view_get_real_zoom(GWY_DATA_VIEW(self->obj));
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_view_get_data(PyGObject *self)
{
    GwyContainer *ret;

    
    ret = gwy_data_view_get_data(GWY_DATA_VIEW(self->obj));
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_data_view_coords_xy_to_real(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "xscr", "yscr", "xreal", "yreal", NULL };
    int xscr, yscr;
    PyObject *xreal_pyobj, *yreal_pyobj;
    GDoubleValue xreal, yreal;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iiOO:GwyDataView.coords_xy_to_real", kwlist, &xscr, &yscr, &xreal_pyobj, &yreal_pyobj))
        return NULL;
    if (!PyFloat_Check(xreal_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'xreal' must be a float variable");
        return NULL;
    }
    xreal = PyFloat_AsDouble(xreal_pyobj);
    if (!PyFloat_Check(yreal_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'yreal' must be a float variable");
        return NULL;
    }
    yreal = PyFloat_AsDouble(yreal_pyobj);
    
    gwy_data_view_coords_xy_to_real(GWY_DATA_VIEW(self->obj), xscr, yscr, &xreal, &yreal);
    
    ((PyFloatObject *) xreal_pyobj)->ob_fval = xreal;
    ((PyFloatObject *) yreal_pyobj)->ob_fval = yreal;
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_view_get_xmeasure(PyGObject *self)
{
    double ret;

    
    ret = gwy_data_view_get_xmeasure(GWY_DATA_VIEW(self->obj));
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_view_get_ymeasure(PyGObject *self)
{
    double ret;

    
    ret = gwy_data_view_get_ymeasure(GWY_DATA_VIEW(self->obj));
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_view_get_pixel_data_sizes(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "xres", "yres", NULL };
    PyObject *xres_pyobj, *yres_pyobj;
    GIntValue xres, yres;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"OO:GwyDataView.get_pixel_data_sizes", kwlist, &xres_pyobj, &yres_pyobj))
        return NULL;
    if (!PyInt_Check(xres_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'xres' must be an integer variable");
        return NULL;
    }
    xres = (int) PyInt_AsLong(xres_pyobj);
    if (!PyInt_Check(yres_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'yres' must be an integer variable");
        return NULL;
    }
    yres = (int) PyInt_AsLong(yres_pyobj);
    
    gwy_data_view_get_pixel_data_sizes(GWY_DATA_VIEW(self->obj), &xres, &yres);
    
    ((PyIntObject *) xres_pyobj)->ob_ival = xres;
    ((PyIntObject *) yres_pyobj)->ob_ival = yres;
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_view_get_real_data_sizes(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "xreal", "yreal", NULL };
    PyObject *xreal_pyobj, *yreal_pyobj;
    GDoubleValue xreal, yreal;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"OO:GwyDataView.get_real_data_sizes", kwlist, &xreal_pyobj, &yreal_pyobj))
        return NULL;
    if (!PyFloat_Check(xreal_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'xreal' must be a float variable");
        return NULL;
    }
    xreal = PyFloat_AsDouble(xreal_pyobj);
    if (!PyFloat_Check(yreal_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'yreal' must be a float variable");
        return NULL;
    }
    yreal = PyFloat_AsDouble(yreal_pyobj);
    
    gwy_data_view_get_real_data_sizes(GWY_DATA_VIEW(self->obj), &xreal, &yreal);
    
    ((PyFloatObject *) xreal_pyobj)->ob_fval = xreal;
    ((PyFloatObject *) yreal_pyobj)->ob_fval = yreal;
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_view_get_pixbuf(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "max_width", "max_height", NULL };
    int max_width, max_height;
    GdkPixbuf *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ii:GwyDataView.get_pixbuf", kwlist, &max_width, &max_height))
        return NULL;
    
    ret = gwy_data_view_get_pixbuf(GWY_DATA_VIEW(self->obj), max_width, max_height);
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_data_view_export_pixbuf(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "zoom", "draw_alpha", "draw_top", NULL };
    int draw_alpha, draw_top;
    double zoom;
    GdkPixbuf *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"dii:GwyDataView.export_pixbuf", kwlist, &zoom, &draw_alpha, &draw_top))
        return NULL;
    
    ret = gwy_data_view_export_pixbuf(GWY_DATA_VIEW(self->obj), zoom, draw_alpha, draw_top);
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static const PyMethodDef _PyGwyDataView_methods[] = {
    { "get_base_layer", (PyCFunction)_wrap_gwy_data_view_get_base_layer, METH_NOARGS,
      NULL },
    { "set_base_layer", (PyCFunction)_wrap_gwy_data_view_set_base_layer, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_alpha_layer", (PyCFunction)_wrap_gwy_data_view_get_alpha_layer, METH_NOARGS,
      NULL },
    { "set_alpha_layer", (PyCFunction)_wrap_gwy_data_view_set_alpha_layer, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_top_layer", (PyCFunction)_wrap_gwy_data_view_get_top_layer, METH_NOARGS,
      NULL },
    { "set_top_layer", (PyCFunction)_wrap_gwy_data_view_set_top_layer, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_data_prefix", (PyCFunction)_wrap_gwy_data_view_get_data_prefix, METH_NOARGS,
      NULL },
    { "set_data_prefix", (PyCFunction)_wrap_gwy_data_view_set_data_prefix, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_hexcess", (PyCFunction)_wrap_gwy_data_view_get_hexcess, METH_NOARGS,
      NULL },
    { "get_vexcess", (PyCFunction)_wrap_gwy_data_view_get_vexcess, METH_NOARGS,
      NULL },
    { "set_zoom", (PyCFunction)_wrap_gwy_data_view_set_zoom, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_zoom", (PyCFunction)_wrap_gwy_data_view_get_zoom, METH_NOARGS,
      NULL },
    { "get_real_zoom", (PyCFunction)_wrap_gwy_data_view_get_real_zoom, METH_NOARGS,
      NULL },
    { "get_data", (PyCFunction)_wrap_gwy_data_view_get_data, METH_NOARGS,
      NULL },
    { "coords_xy_to_real", (PyCFunction)_wrap_gwy_data_view_coords_xy_to_real, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_xmeasure", (PyCFunction)_wrap_gwy_data_view_get_xmeasure, METH_NOARGS,
      NULL },
    { "get_ymeasure", (PyCFunction)_wrap_gwy_data_view_get_ymeasure, METH_NOARGS,
      NULL },
    { "get_pixel_data_sizes", (PyCFunction)_wrap_gwy_data_view_get_pixel_data_sizes, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_real_data_sizes", (PyCFunction)_wrap_gwy_data_view_get_real_data_sizes, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_pixbuf", (PyCFunction)_wrap_gwy_data_view_get_pixbuf, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "export_pixbuf", (PyCFunction)_wrap_gwy_data_view_export_pixbuf, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

PyTypeObject G_GNUC_INTERNAL PyGwyDataView_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "gwy.DataView",                   /* tp_name */
    sizeof(PyGObject),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)0,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    offsetof(PyGObject, weakreflist),             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyGwyDataView_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    offsetof(PyGObject, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_gwy_data_view_new,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)0,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0              /* tp_is_gc */
};



/* ----------- GwyDataViewLayer ----------- */

static PyObject *
_wrap_gwy_data_view_layer_plugged(PyGObject *self)
{
    
    gwy_data_view_layer_plugged(GWY_DATA_VIEW_LAYER(self->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_view_layer_unplugged(PyGObject *self)
{
    
    gwy_data_view_layer_unplugged(GWY_DATA_VIEW_LAYER(self->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_view_layer_updated(PyGObject *self)
{
    
    gwy_data_view_layer_updated(GWY_DATA_VIEW_LAYER(self->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_view_layer_realize(PyGObject *self)
{
    
    gwy_data_view_layer_realize(GWY_DATA_VIEW_LAYER(self->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_view_layer_unrealize(PyGObject *self)
{
    
    gwy_data_view_layer_unrealize(GWY_DATA_VIEW_LAYER(self->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static const PyMethodDef _PyGwyDataViewLayer_methods[] = {
    { "plugged", (PyCFunction)_wrap_gwy_data_view_layer_plugged, METH_NOARGS,
      NULL },
    { "unplugged", (PyCFunction)_wrap_gwy_data_view_layer_unplugged, METH_NOARGS,
      NULL },
    { "updated", (PyCFunction)_wrap_gwy_data_view_layer_updated, METH_NOARGS,
      NULL },
    { "realize", (PyCFunction)_wrap_gwy_data_view_layer_realize, METH_NOARGS,
      NULL },
    { "unrealize", (PyCFunction)_wrap_gwy_data_view_layer_unrealize, METH_NOARGS,
      NULL },
    { NULL, NULL, 0, NULL }
};

PyTypeObject G_GNUC_INTERNAL PyGwyDataViewLayer_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "gwy.DataViewLayer",                   /* tp_name */
    sizeof(PyGObject),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)0,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    offsetof(PyGObject, weakreflist),             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyGwyDataViewLayer_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    offsetof(PyGObject, inst_dict),                 /* tp_dictoffset */
    (initproc)0,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)0,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0              /* tp_is_gc */
};



/* ----------- GwyDataWindow ----------- */

static int
_wrap_gwy_data_window_new(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "data_view", NULL };
    PyGObject *data_view;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:GwyDataWindow.__init__", kwlist, &PyGwyDataView_Type, &data_view))
        return -1;
    self->obj = (GObject *)gwy_data_window_new(GWY_DATA_VIEW(data_view->obj));

    if (!self->obj) {
        PyErr_SetString(PyExc_RuntimeError, "could not create GwyDataWindow object");
        return -1;
    }
    pygobject_register_wrapper((PyObject *)self);
    return 0;
}

static PyObject *
_wrap_gwy_data_window_get_data_view(PyGObject *self)
{
    GwyDataView *ret;

    
    ret = gwy_data_window_get_data_view(GWY_DATA_WINDOW(self->obj));
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_data_window_get_color_axis(PyGObject *self)
{
    GtkWidget *ret;

    
    ret = gwy_data_window_get_color_axis(GWY_DATA_WINDOW(self->obj));
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_data_window_get_data(PyGObject *self)
{
    GwyContainer *ret;

    
    ret = gwy_data_window_get_data(GWY_DATA_WINDOW(self->obj));
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_data_window_set_zoom(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "izoom", NULL };
    int izoom;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:GwyDataWindow.set_zoom", kwlist, &izoom))
        return NULL;
    
    gwy_data_window_set_zoom(GWY_DATA_WINDOW(self->obj), izoom);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_window_get_data_name(PyGObject *self)
{
    const gchar *ret;

    
    ret = gwy_data_window_get_data_name(GWY_DATA_WINDOW(self->obj));
    
    if (ret)
        return PyString_FromString(ret);
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_window_set_data_name(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "data_name", NULL };
    char *data_name;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:GwyDataWindow.set_data_name", kwlist, &data_name))
        return NULL;
    
    gwy_data_window_set_data_name(GWY_DATA_WINDOW(self->obj), data_name);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_window_get_ul_corner_widget(PyGObject *self)
{
    GtkWidget *ret;

    
    ret = gwy_data_window_get_ul_corner_widget(GWY_DATA_WINDOW(self->obj));
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_data_window_set_ul_corner_widget(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "corner", NULL };
    PyGObject *corner;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:GwyDataWindow.set_ul_corner_widget", kwlist, &PyGtkWidget_Type, &corner))
        return NULL;
    
    gwy_data_window_set_ul_corner_widget(GWY_DATA_WINDOW(self->obj), GTK_WIDGET(corner->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static const PyMethodDef _PyGwyDataWindow_methods[] = {
    { "get_data_view", (PyCFunction)_wrap_gwy_data_window_get_data_view, METH_NOARGS,
      NULL },
    { "get_color_axis", (PyCFunction)_wrap_gwy_data_window_get_color_axis, METH_NOARGS,
      NULL },
    { "get_data", (PyCFunction)_wrap_gwy_data_window_get_data, METH_NOARGS,
      NULL },
    { "set_zoom", (PyCFunction)_wrap_gwy_data_window_set_zoom, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_data_name", (PyCFunction)_wrap_gwy_data_window_get_data_name, METH_NOARGS,
      NULL },
    { "set_data_name", (PyCFunction)_wrap_gwy_data_window_set_data_name, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_ul_corner_widget", (PyCFunction)_wrap_gwy_data_window_get_ul_corner_widget, METH_NOARGS,
      NULL },
    { "set_ul_corner_widget", (PyCFunction)_wrap_gwy_data_window_set_ul_corner_widget, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

PyTypeObject G_GNUC_INTERNAL PyGwyDataWindow_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "gwy.DataWindow",                   /* tp_name */
    sizeof(PyGObject),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)0,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    offsetof(PyGObject, weakreflist),             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyGwyDataWindow_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    offsetof(PyGObject, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_gwy_data_window_new,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)0,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0              /* tp_is_gc */
};



/* ----------- GwyGraph ----------- */

static int
_wrap_gwy_graph_new(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "gmodel", NULL };
    PyGObject *gmodel;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:GwyGraph.__init__", kwlist, &PyGwyGraphModel_Type, &gmodel))
        return -1;
    self->obj = (GObject *)gwy_graph_new(GWY_GRAPH_MODEL(gmodel->obj));

    if (!self->obj) {
        PyErr_SetString(PyExc_RuntimeError, "could not create GwyGraph object");
        return -1;
    }
    pygobject_register_wrapper((PyObject *)self);
    return 0;
}

static PyObject *
_wrap_gwy_graph_get_axis(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "type", NULL };
    PyObject *py_type = NULL;
    GwyAxis *ret;
    GtkPositionType type;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O:GwyGraph.get_axis", kwlist, &py_type))
        return NULL;
    if (pyg_enum_get_value(GTK_TYPE_POSITION_TYPE, py_type, (gpointer)&type))
        return NULL;
    
    ret = gwy_graph_get_axis(GWY_GRAPH(self->obj), type);
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_graph_set_axis_visible(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "type", "is_visible", NULL };
    PyObject *py_type = NULL;
    int is_visible;
    GtkPositionType type;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"Oi:GwyGraph.set_axis_visible", kwlist, &py_type, &is_visible))
        return NULL;
    if (pyg_enum_get_value(GTK_TYPE_POSITION_TYPE, py_type, (gpointer)&type))
        return NULL;
    
    gwy_graph_set_axis_visible(GWY_GRAPH(self->obj), type, is_visible);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_graph_get_area(PyGObject *self)
{
    GtkWidget *ret;

    
    ret = gwy_graph_get_area(GWY_GRAPH(self->obj));
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_graph_set_model(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "gmodel", NULL };
    PyGObject *gmodel;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:GwyGraph.set_model", kwlist, &PyGwyGraphModel_Type, &gmodel))
        return NULL;
    
    gwy_graph_set_model(GWY_GRAPH(self->obj), GWY_GRAPH_MODEL(gmodel->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_graph_get_model(PyGObject *self)
{
    GwyGraphModel *ret;

    
    ret = gwy_graph_get_model(GWY_GRAPH(self->obj));
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_graph_set_status(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "status", NULL };
    PyObject *py_status = NULL;
    GwyGraphStatusType status;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O:GwyGraph.set_status", kwlist, &py_status))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_GRAPH_STATUS_TYPE, py_status, (gpointer)&status))
        return NULL;
    
    gwy_graph_set_status(GWY_GRAPH(self->obj), status);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_graph_get_status(PyGObject *self)
{
    gint ret;

    
    ret = gwy_graph_get_status(GWY_GRAPH(self->obj));
    
    return pyg_enum_from_gtype(GWY_TYPE_GRAPH_STATUS_TYPE, ret);
}

static PyObject *
_wrap_gwy_graph_enable_user_input(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "enable", NULL };
    int enable;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:GwyGraph.enable_user_input", kwlist, &enable))
        return NULL;
    
    gwy_graph_enable_user_input(GWY_GRAPH(self->obj), enable);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_graph_export_pixmap(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "export_title", "export_axis", "export_labels", NULL };
    int export_title, export_axis, export_labels;
    GdkPixbuf *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iii:GwyGraph.export_pixmap", kwlist, &export_title, &export_axis, &export_labels))
        return NULL;
    
    ret = gwy_graph_export_pixmap(GWY_GRAPH(self->obj), export_title, export_axis, export_labels);
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_graph_window_new(PyGObject *self)
{
    GtkWidget *ret;

    
    ret = gwy_graph_window_new(GWY_GRAPH(self->obj));
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static const PyMethodDef _PyGwyGraph_methods[] = {
    { "get_axis", (PyCFunction)_wrap_gwy_graph_get_axis, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "set_axis_visible", (PyCFunction)_wrap_gwy_graph_set_axis_visible, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_area", (PyCFunction)_wrap_gwy_graph_get_area, METH_NOARGS,
      NULL },
    { "set_model", (PyCFunction)_wrap_gwy_graph_set_model, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_model", (PyCFunction)_wrap_gwy_graph_get_model, METH_NOARGS,
      NULL },
    { "set_status", (PyCFunction)_wrap_gwy_graph_set_status, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_status", (PyCFunction)_wrap_gwy_graph_get_status, METH_NOARGS,
      NULL },
    { "enable_user_input", (PyCFunction)_wrap_gwy_graph_enable_user_input, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "export_pixmap", (PyCFunction)_wrap_gwy_graph_export_pixmap, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "window_new", (PyCFunction)_wrap_gwy_graph_window_new, METH_NOARGS,
      NULL },
    { NULL, NULL, 0, NULL }
};

PyTypeObject G_GNUC_INTERNAL PyGwyGraph_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "gwy.Graph",                   /* tp_name */
    sizeof(PyGObject),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)0,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    offsetof(PyGObject, weakreflist),             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyGwyGraph_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    offsetof(PyGObject, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_gwy_graph_new,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)0,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0              /* tp_is_gc */
};



/* ----------- GwyGraphArea ----------- */

static int
_wrap_gwy_graph_area_new(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char* kwlist[] = { NULL };

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,
                                     ":gwy.GraphArea.__init__",
                                     kwlist))
        return -1;

    pygobject_constructv(self, 0, NULL);
    if (!self->obj) {
        PyErr_SetString(
            PyExc_RuntimeError, 
            "could not create gwy.GraphArea object");
        return -1;
    }
    return 0;
}

static PyObject *
_wrap_gwy_graph_area_get_label(PyGObject *self)
{
    GtkWidget *ret;

    
    ret = gwy_graph_area_get_label(GWY_GRAPH_AREA(self->obj));
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_graph_area_set_model(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "gmodel", NULL };
    PyGObject *gmodel;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:GwyGraphArea.set_model", kwlist, &PyGwyGraphModel_Type, &gmodel))
        return NULL;
    
    gwy_graph_area_set_model(GWY_GRAPH_AREA(self->obj), GWY_GRAPH_MODEL(gmodel->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_graph_area_get_model(PyGObject *self)
{
    GwyGraphModel *ret;

    
    ret = gwy_graph_area_get_model(GWY_GRAPH_AREA(self->obj));
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_graph_area_get_cursor(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "x_cursor", "y_cursor", NULL };
    PyObject *x_cursor_pyobj, *y_cursor_pyobj;
    GDoubleValue x_cursor, y_cursor;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"OO:GwyGraphArea.get_cursor", kwlist, &x_cursor_pyobj, &y_cursor_pyobj))
        return NULL;
    if (!PyFloat_Check(x_cursor_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'x_cursor' must be a float variable");
        return NULL;
    }
    x_cursor = PyFloat_AsDouble(x_cursor_pyobj);
    if (!PyFloat_Check(y_cursor_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'y_cursor' must be a float variable");
        return NULL;
    }
    y_cursor = PyFloat_AsDouble(y_cursor_pyobj);
    
    gwy_graph_area_get_cursor(GWY_GRAPH_AREA(self->obj), &x_cursor, &y_cursor);
    
    ((PyFloatObject *) x_cursor_pyobj)->ob_fval = x_cursor;
    ((PyFloatObject *) y_cursor_pyobj)->ob_fval = y_cursor;
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_graph_area_set_x_range(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "x_min", "x_max", NULL };
    double x_min, x_max;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"dd:GwyGraphArea.set_x_range", kwlist, &x_min, &x_max))
        return NULL;
    
    gwy_graph_area_set_x_range(GWY_GRAPH_AREA(self->obj), x_min, x_max);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_graph_area_set_y_range(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "y_min", "y_max", NULL };
    double y_min, y_max;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"dd:GwyGraphArea.set_y_range", kwlist, &y_min, &y_max))
        return NULL;
    
    gwy_graph_area_set_y_range(GWY_GRAPH_AREA(self->obj), y_min, y_max);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_graph_area_set_x_grid_data(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "ndata", "grid_data", NULL };
    PyObject *py_ndata = NULL, *grid_data_pyobj;
    int i_grid_data;
    guint ndata = 0;
    gdouble *grid_data;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"OO:GwyGraphArea.set_x_grid_data", kwlist, &py_ndata, &grid_data_pyobj))
        return NULL;
    if (py_ndata) {
        if (PyLong_Check(py_ndata))
            ndata = PyLong_AsUnsignedLong(py_ndata);
        else if (PyInt_Check(py_ndata))
            ndata = PyInt_AsLong(py_ndata);
        else
            PyErr_SetString(PyExc_TypeError, "Parameter 'ndata' must be an int or a long");
        if (PyErr_Occurred())
            return NULL;
    }
    if (!PyList_Check(grid_data_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'grid_data' must be a list of floats");
        return NULL;
    }
    grid_data =  g_malloc(sizeof(gdouble)*PyList_Size(grid_data_pyobj));
    if (grid_data == NULL) {
        return PyErr_NoMemory();
    }
    for (i_grid_data = 0; i_grid_data < PyList_Size(grid_data_pyobj); i_grid_data++) {
        if (!PyFloat_Check(PyList_GetItem(grid_data_pyobj, i_grid_data))) {
            g_free(grid_data);
            PyErr_SetString(PyExc_TypeError, "Parameter 'grid_data' must be a list of floats");
            return NULL;
        }
        grid_data[i_grid_data] = PyFloat_AsDouble(PyList_GetItem(grid_data_pyobj, i_grid_data));
    }
    
    gwy_graph_area_set_x_grid_data(GWY_GRAPH_AREA(self->obj), ndata, grid_data);
    
    g_free(grid_data);
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_graph_area_set_y_grid_data(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "ndata", "grid_data", NULL };
    PyObject *py_ndata = NULL, *grid_data_pyobj;
    int i_grid_data;
    guint ndata = 0;
    gdouble *grid_data;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"OO:GwyGraphArea.set_y_grid_data", kwlist, &py_ndata, &grid_data_pyobj))
        return NULL;
    if (py_ndata) {
        if (PyLong_Check(py_ndata))
            ndata = PyLong_AsUnsignedLong(py_ndata);
        else if (PyInt_Check(py_ndata))
            ndata = PyInt_AsLong(py_ndata);
        else
            PyErr_SetString(PyExc_TypeError, "Parameter 'ndata' must be an int or a long");
        if (PyErr_Occurred())
            return NULL;
    }
    if (!PyList_Check(grid_data_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'grid_data' must be a list of floats");
        return NULL;
    }
    grid_data =  g_malloc(sizeof(gdouble)*PyList_Size(grid_data_pyobj));
    if (grid_data == NULL) {
        return PyErr_NoMemory();
    }
    for (i_grid_data = 0; i_grid_data < PyList_Size(grid_data_pyobj); i_grid_data++) {
        if (!PyFloat_Check(PyList_GetItem(grid_data_pyobj, i_grid_data))) {
            g_free(grid_data);
            PyErr_SetString(PyExc_TypeError, "Parameter 'grid_data' must be a list of floats");
            return NULL;
        }
        grid_data[i_grid_data] = PyFloat_AsDouble(PyList_GetItem(grid_data_pyobj, i_grid_data));
    }
    
    gwy_graph_area_set_y_grid_data(GWY_GRAPH_AREA(self->obj), ndata, grid_data);
    
    g_free(grid_data);
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_graph_area_get_x_grid_data(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "ndata", NULL };
    PyObject *ndata_pyobj;
    GIntValue ndata;
    gdouble *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O:GwyGraphArea.get_x_grid_data", kwlist, &ndata_pyobj))
        return NULL;
    if (!PyInt_Check(ndata_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'ndata' must be an integer variable");
        return NULL;
    }
    ndata = (int) PyInt_AsLong(ndata_pyobj);
    
    ret = gwy_graph_area_get_x_grid_data(GWY_GRAPH_AREA(self->obj), &ndata);
    
    ((PyIntObject *) ndata_pyobj)->ob_ival = ndata;
    PyErr_SetString(PyExc_NotImplementedError, "Return type 'const-gdouble*' not supported");
    return NULL;
}

static PyObject *
_wrap_gwy_graph_area_get_y_grid_data(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "ndata", NULL };
    PyObject *ndata_pyobj;
    GIntValue ndata;
    gdouble *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O:GwyGraphArea.get_y_grid_data", kwlist, &ndata_pyobj))
        return NULL;
    if (!PyInt_Check(ndata_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'ndata' must be an integer variable");
        return NULL;
    }
    ndata = (int) PyInt_AsLong(ndata_pyobj);
    
    ret = gwy_graph_area_get_y_grid_data(GWY_GRAPH_AREA(self->obj), &ndata);
    
    ((PyIntObject *) ndata_pyobj)->ob_ival = ndata;
    PyErr_SetString(PyExc_NotImplementedError, "Return type 'const-gdouble*' not supported");
    return NULL;
}

static PyObject *
_wrap_gwy_graph_area_get_selection(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "status_type", NULL };
    PyObject *py_status_type = NULL;
    GwyGraphStatusType status_type;
    GwySelection *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O:GwyGraphArea.get_selection", kwlist, &py_status_type))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_GRAPH_STATUS_TYPE, py_status_type, (gpointer)&status_type))
        return NULL;
    
    ret = gwy_graph_area_get_selection(GWY_GRAPH_AREA(self->obj), status_type);
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_graph_area_set_status(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "status_type", NULL };
    PyObject *py_status_type = NULL;
    GwyGraphStatusType status_type;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O:GwyGraphArea.set_status", kwlist, &py_status_type))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_GRAPH_STATUS_TYPE, py_status_type, (gpointer)&status_type))
        return NULL;
    
    gwy_graph_area_set_status(GWY_GRAPH_AREA(self->obj), status_type);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_graph_area_get_status(PyGObject *self)
{
    gint ret;

    
    ret = gwy_graph_area_get_status(GWY_GRAPH_AREA(self->obj));
    
    return pyg_enum_from_gtype(GWY_TYPE_GRAPH_STATUS_TYPE, ret);
}

static PyObject *
_wrap_gwy_graph_area_draw_on_drawable(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "drawable", "gc", "x", "y", "width", "height", NULL };
    PyGObject *drawable, *gc;
    int x, y, width, height;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!iiii:GwyGraphArea.draw_on_drawable", kwlist, &PyGdkDrawable_Type, &drawable, &PyGdkGC_Type, &gc, &x, &y, &width, &height))
        return NULL;
    
    gwy_graph_area_draw_on_drawable(GWY_GRAPH_AREA(self->obj), GDK_DRAWABLE(drawable->obj), GDK_GC(gc->obj), x, y, width, height);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_graph_area_enable_user_input(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "enable", NULL };
    int enable;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:GwyGraphArea.enable_user_input", kwlist, &enable))
        return NULL;
    
    gwy_graph_area_enable_user_input(GWY_GRAPH_AREA(self->obj), enable);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_graph_area_edit_curve(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "id", NULL };
    int id;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:GwyGraphArea.edit_curve", kwlist, &id))
        return NULL;
    
    gwy_graph_area_edit_curve(GWY_GRAPH_AREA(self->obj), id);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static const PyMethodDef _PyGwyGraphArea_methods[] = {
    { "get_label", (PyCFunction)_wrap_gwy_graph_area_get_label, METH_NOARGS,
      NULL },
    { "set_model", (PyCFunction)_wrap_gwy_graph_area_set_model, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_model", (PyCFunction)_wrap_gwy_graph_area_get_model, METH_NOARGS,
      NULL },
    { "get_cursor", (PyCFunction)_wrap_gwy_graph_area_get_cursor, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "set_x_range", (PyCFunction)_wrap_gwy_graph_area_set_x_range, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "set_y_range", (PyCFunction)_wrap_gwy_graph_area_set_y_range, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "set_x_grid_data", (PyCFunction)_wrap_gwy_graph_area_set_x_grid_data, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "set_y_grid_data", (PyCFunction)_wrap_gwy_graph_area_set_y_grid_data, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_x_grid_data", (PyCFunction)_wrap_gwy_graph_area_get_x_grid_data, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_y_grid_data", (PyCFunction)_wrap_gwy_graph_area_get_y_grid_data, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_selection", (PyCFunction)_wrap_gwy_graph_area_get_selection, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "set_status", (PyCFunction)_wrap_gwy_graph_area_set_status, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_status", (PyCFunction)_wrap_gwy_graph_area_get_status, METH_NOARGS,
      NULL },
    { "draw_on_drawable", (PyCFunction)_wrap_gwy_graph_area_draw_on_drawable, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "enable_user_input", (PyCFunction)_wrap_gwy_graph_area_enable_user_input, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "edit_curve", (PyCFunction)_wrap_gwy_graph_area_edit_curve, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

PyTypeObject G_GNUC_INTERNAL PyGwyGraphArea_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "gwy.GraphArea",                   /* tp_name */
    sizeof(PyGObject),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)0,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    offsetof(PyGObject, weakreflist),             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyGwyGraphArea_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    offsetof(PyGObject, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_gwy_graph_area_new,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)0,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0              /* tp_is_gc */
};



/* ----------- GwyGraphCorner ----------- */

static int
_wrap_gwy_graph_corner_new(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char* kwlist[] = { NULL };

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,
                                     ":gwy.GraphCorner.__init__",
                                     kwlist))
        return -1;

    pygobject_constructv(self, 0, NULL);
    if (!self->obj) {
        PyErr_SetString(
            PyExc_RuntimeError, 
            "could not create gwy.GraphCorner object");
        return -1;
    }
    return 0;
}

PyTypeObject G_GNUC_INTERNAL PyGwyGraphCorner_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "gwy.GraphCorner",                   /* tp_name */
    sizeof(PyGObject),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)0,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    offsetof(PyGObject, weakreflist),             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    offsetof(PyGObject, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_gwy_graph_corner_new,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)0,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0              /* tp_is_gc */
};



/* ----------- GwyGraphCurveModel ----------- */

static int
_wrap_gwy_graph_curve_model_new(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char* kwlist[] = { NULL };

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,
                                     ":gwy.GraphCurveModel.__init__",
                                     kwlist))
        return -1;

    pygobject_constructv(self, 0, NULL);
    if (!self->obj) {
        PyErr_SetString(
            PyExc_RuntimeError, 
            "could not create gwy.GraphCurveModel object");
        return -1;
    }
    return 0;
}

static PyObject *
_wrap_gwy_graph_curve_model_new_alike(PyGObject *self)
{
    GwyGraphCurveModel *ret;

    
    ret = gwy_graph_curve_model_new_alike(GWY_GRAPH_CURVE_MODEL(self->obj));
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_graph_curve_model_set_data(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "xdata", "ydata", "n", NULL };
    int i_xdata, i_ydata, n;
    PyObject *xdata_pyobj, *ydata_pyobj;
    gdouble *xdata, *ydata;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"OOi:GwyGraphCurveModel.set_data", kwlist, &xdata_pyobj, &ydata_pyobj, &n))
        return NULL;
    if (!PyList_Check(xdata_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'xdata' must be a list of floats");
        return NULL;
    }
    xdata =  g_malloc(sizeof(gdouble)*PyList_Size(xdata_pyobj));
    if (xdata == NULL) {
        return PyErr_NoMemory();
    }
    for (i_xdata = 0; i_xdata < PyList_Size(xdata_pyobj); i_xdata++) {
        if (!PyFloat_Check(PyList_GetItem(xdata_pyobj, i_xdata))) {
            g_free(xdata);
            PyErr_SetString(PyExc_TypeError, "Parameter 'xdata' must be a list of floats");
            return NULL;
        }
        xdata[i_xdata] = PyFloat_AsDouble(PyList_GetItem(xdata_pyobj, i_xdata));
    }
    if (!PyList_Check(ydata_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'ydata' must be a list of floats");
        return NULL;
    }
    ydata =  g_malloc(sizeof(gdouble)*PyList_Size(ydata_pyobj));
    if (ydata == NULL) {
        return PyErr_NoMemory();
    }
    for (i_ydata = 0; i_ydata < PyList_Size(ydata_pyobj); i_ydata++) {
        if (!PyFloat_Check(PyList_GetItem(ydata_pyobj, i_ydata))) {
            g_free(ydata);
            PyErr_SetString(PyExc_TypeError, "Parameter 'ydata' must be a list of floats");
            return NULL;
        }
        ydata[i_ydata] = PyFloat_AsDouble(PyList_GetItem(ydata_pyobj, i_ydata));
    }
    
    gwy_graph_curve_model_set_data(GWY_GRAPH_CURVE_MODEL(self->obj), xdata, ydata, n);
    
    g_free(xdata);
    g_free(ydata);
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_graph_curve_model_set_data_from_dataline(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "dline", "from_index", "to_index", NULL };
    PyGObject *dline;
    int from_index, to_index;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!ii:GwyGraphCurveModel.set_data_from_dataline", kwlist, &PyGwyDataLine_Type, &dline, &from_index, &to_index))
        return NULL;
    
    gwy_graph_curve_model_set_data_from_dataline(GWY_GRAPH_CURVE_MODEL(self->obj), GWY_DATA_LINE(dline->obj), from_index, to_index);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_graph_curve_model_get_xdata(PyGObject *self)
{
    gdouble *ret;

    
    ret = gwy_graph_curve_model_get_xdata(GWY_GRAPH_CURVE_MODEL(self->obj));
    
    PyErr_SetString(PyExc_NotImplementedError, "Return type 'const-gdouble*' not supported");
    return NULL;
}

static PyObject *
_wrap_gwy_graph_curve_model_get_ydata(PyGObject *self)
{
    gdouble *ret;

    
    ret = gwy_graph_curve_model_get_ydata(GWY_GRAPH_CURVE_MODEL(self->obj));
    
    PyErr_SetString(PyExc_NotImplementedError, "Return type 'const-gdouble*' not supported");
    return NULL;
}

static PyObject *
_wrap_gwy_graph_curve_model_get_ndata(PyGObject *self)
{
    int ret;

    
    ret = gwy_graph_curve_model_get_ndata(GWY_GRAPH_CURVE_MODEL(self->obj));
    
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_gwy_graph_curve_model_get_x_range(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "x_min", "x_max", NULL };
    PyObject *x_min_pyobj, *x_max_pyobj;
    int ret;
    GDoubleValue x_min, x_max;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"OO:GwyGraphCurveModel.get_x_range", kwlist, &x_min_pyobj, &x_max_pyobj))
        return NULL;
    if (!PyFloat_Check(x_min_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'x_min' must be a float variable");
        return NULL;
    }
    x_min = PyFloat_AsDouble(x_min_pyobj);
    if (!PyFloat_Check(x_max_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'x_max' must be a float variable");
        return NULL;
    }
    x_max = PyFloat_AsDouble(x_max_pyobj);
    
    ret = gwy_graph_curve_model_get_x_range(GWY_GRAPH_CURVE_MODEL(self->obj), &x_min, &x_max);
    
    ((PyFloatObject *) x_min_pyobj)->ob_fval = x_min;
    ((PyFloatObject *) x_max_pyobj)->ob_fval = x_max;
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_graph_curve_model_get_y_range(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "y_min", "y_max", NULL };
    PyObject *y_min_pyobj, *y_max_pyobj;
    int ret;
    GDoubleValue y_min, y_max;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"OO:GwyGraphCurveModel.get_y_range", kwlist, &y_min_pyobj, &y_max_pyobj))
        return NULL;
    if (!PyFloat_Check(y_min_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'y_min' must be a float variable");
        return NULL;
    }
    y_min = PyFloat_AsDouble(y_min_pyobj);
    if (!PyFloat_Check(y_max_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'y_max' must be a float variable");
        return NULL;
    }
    y_max = PyFloat_AsDouble(y_max_pyobj);
    
    ret = gwy_graph_curve_model_get_y_range(GWY_GRAPH_CURVE_MODEL(self->obj), &y_min, &y_max);
    
    ((PyFloatObject *) y_min_pyobj)->ob_fval = y_min;
    ((PyFloatObject *) y_max_pyobj)->ob_fval = y_max;
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_graph_curve_model_get_ranges(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "x_logscale", "y_logscale", "x_min", "x_max", "y_min", "y_max", NULL };
    int x_logscale, y_logscale, ret;
    PyObject *x_min_pyobj, *x_max_pyobj, *y_min_pyobj, *y_max_pyobj;
    GDoubleValue x_min, x_max, y_min, y_max;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iiOOOO:GwyGraphCurveModel.get_ranges", kwlist, &x_logscale, &y_logscale, &x_min_pyobj, &x_max_pyobj, &y_min_pyobj, &y_max_pyobj))
        return NULL;
    if (!PyFloat_Check(x_min_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'x_min' must be a float variable");
        return NULL;
    }
    x_min = PyFloat_AsDouble(x_min_pyobj);
    if (!PyFloat_Check(x_max_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'x_max' must be a float variable");
        return NULL;
    }
    x_max = PyFloat_AsDouble(x_max_pyobj);
    if (!PyFloat_Check(y_min_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'y_min' must be a float variable");
        return NULL;
    }
    y_min = PyFloat_AsDouble(y_min_pyobj);
    if (!PyFloat_Check(y_max_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'y_max' must be a float variable");
        return NULL;
    }
    y_max = PyFloat_AsDouble(y_max_pyobj);
    
    ret = gwy_graph_curve_model_get_ranges(GWY_GRAPH_CURVE_MODEL(self->obj), x_logscale, y_logscale, &x_min, &x_max, &y_min, &y_max);
    
    ((PyFloatObject *) x_min_pyobj)->ob_fval = x_min;
    ((PyFloatObject *) x_max_pyobj)->ob_fval = x_max;
    ((PyFloatObject *) y_min_pyobj)->ob_fval = y_min;
    ((PyFloatObject *) y_max_pyobj)->ob_fval = y_max;
    return PyBool_FromLong(ret);

}

static const PyMethodDef _PyGwyGraphCurveModel_methods[] = {
    { "new_alike", (PyCFunction)_wrap_gwy_graph_curve_model_new_alike, METH_NOARGS,
      NULL },
    { "set_data", (PyCFunction)_wrap_gwy_graph_curve_model_set_data, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "set_data_from_dataline", (PyCFunction)_wrap_gwy_graph_curve_model_set_data_from_dataline, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_xdata", (PyCFunction)_wrap_gwy_graph_curve_model_get_xdata, METH_NOARGS,
      NULL },
    { "get_ydata", (PyCFunction)_wrap_gwy_graph_curve_model_get_ydata, METH_NOARGS,
      NULL },
    { "get_ndata", (PyCFunction)_wrap_gwy_graph_curve_model_get_ndata, METH_NOARGS,
      NULL },
    { "get_x_range", (PyCFunction)_wrap_gwy_graph_curve_model_get_x_range, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_y_range", (PyCFunction)_wrap_gwy_graph_curve_model_get_y_range, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_ranges", (PyCFunction)_wrap_gwy_graph_curve_model_get_ranges, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

PyTypeObject G_GNUC_INTERNAL PyGwyGraphCurveModel_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "gwy.GraphCurveModel",                   /* tp_name */
    sizeof(PyGObject),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)0,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    offsetof(PyGObject, weakreflist),             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyGwyGraphCurveModel_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    offsetof(PyGObject, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_gwy_graph_curve_model_new,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)0,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0              /* tp_is_gc */
};



/* ----------- GwyGraphCurves ----------- */

static int
_wrap_gwy_graph_curves_new(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "gmodel", NULL };
    PyGObject *gmodel;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:GwyGraphCurves.__init__", kwlist, &PyGwyGraphModel_Type, &gmodel))
        return -1;
    self->obj = (GObject *)gwy_graph_curves_new(GWY_GRAPH_MODEL(gmodel->obj));

    if (!self->obj) {
        PyErr_SetString(PyExc_RuntimeError, "could not create GwyGraphCurves object");
        return -1;
    }
    pygobject_register_wrapper((PyObject *)self);
    return 0;
}

static PyObject *
_wrap_gwy_graph_curves_set_model(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "gmodel", NULL };
    PyGObject *gmodel;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:GwyGraphCurves.set_model", kwlist, &PyGwyGraphModel_Type, &gmodel))
        return NULL;
    
    gwy_graph_curves_set_model(GWY_GRAPH_CURVES(self->obj), GWY_GRAPH_MODEL(gmodel->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_graph_curves_get_model(PyGObject *self)
{
    GwyGraphModel *ret;

    
    ret = gwy_graph_curves_get_model(GWY_GRAPH_CURVES(self->obj));
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static const PyMethodDef _PyGwyGraphCurves_methods[] = {
    { "set_model", (PyCFunction)_wrap_gwy_graph_curves_set_model, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_model", (PyCFunction)_wrap_gwy_graph_curves_get_model, METH_NOARGS,
      NULL },
    { NULL, NULL, 0, NULL }
};

PyTypeObject G_GNUC_INTERNAL PyGwyGraphCurves_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "gwy.GraphCurves",                   /* tp_name */
    sizeof(PyGObject),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)0,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    offsetof(PyGObject, weakreflist),             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyGwyGraphCurves_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    offsetof(PyGObject, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_gwy_graph_curves_new,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)0,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0              /* tp_is_gc */
};



/* ----------- GwyGraphData ----------- */

static int
_wrap_gwy_graph_data_new(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "gmodel", NULL };
    PyGObject *gmodel;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:GwyGraphData.__init__", kwlist, &PyGwyGraphModel_Type, &gmodel))
        return -1;
    self->obj = (GObject *)gwy_graph_data_new(GWY_GRAPH_MODEL(gmodel->obj));

    if (!self->obj) {
        PyErr_SetString(PyExc_RuntimeError, "could not create GwyGraphData object");
        return -1;
    }
    pygobject_register_wrapper((PyObject *)self);
    return 0;
}

static PyObject *
_wrap_gwy_graph_data_set_model(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "gmodel", NULL };
    PyGObject *gmodel;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:GwyGraphData.set_model", kwlist, &PyGwyGraphModel_Type, &gmodel))
        return NULL;
    
    gwy_graph_data_set_model(GWY_GRAPH_DATA(self->obj), GWY_GRAPH_MODEL(gmodel->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_graph_data_get_model(PyGObject *self)
{
    GwyGraphModel *ret;

    
    ret = gwy_graph_data_get_model(GWY_GRAPH_DATA(self->obj));
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static const PyMethodDef _PyGwyGraphData_methods[] = {
    { "set_model", (PyCFunction)_wrap_gwy_graph_data_set_model, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_model", (PyCFunction)_wrap_gwy_graph_data_get_model, METH_NOARGS,
      NULL },
    { NULL, NULL, 0, NULL }
};

PyTypeObject G_GNUC_INTERNAL PyGwyGraphData_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "gwy.GraphData",                   /* tp_name */
    sizeof(PyGObject),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)0,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    offsetof(PyGObject, weakreflist),             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyGwyGraphData_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    offsetof(PyGObject, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_gwy_graph_data_new,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)0,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0              /* tp_is_gc */
};



/* ----------- GwyGraphLabel ----------- */

static int
_wrap_gwy_graph_label_new(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char* kwlist[] = { NULL };

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,
                                     ":gwy.GraphLabel.__init__",
                                     kwlist))
        return -1;

    pygobject_constructv(self, 0, NULL);
    if (!self->obj) {
        PyErr_SetString(
            PyExc_RuntimeError, 
            "could not create gwy.GraphLabel object");
        return -1;
    }
    return 0;
}

static PyObject *
_wrap_gwy_graph_label_set_model(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "gmodel", NULL };
    PyGObject *gmodel;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:GwyGraphLabel.set_model", kwlist, &PyGwyGraphModel_Type, &gmodel))
        return NULL;
    
    gwy_graph_label_set_model(GWY_GRAPH_LABEL(self->obj), GWY_GRAPH_MODEL(gmodel->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_graph_label_get_model(PyGObject *self)
{
    GwyGraphModel *ret;

    
    ret = gwy_graph_label_get_model(GWY_GRAPH_LABEL(self->obj));
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_graph_label_enable_user_input(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "enable", NULL };
    int enable;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:GwyGraphLabel.enable_user_input", kwlist, &enable))
        return NULL;
    
    gwy_graph_label_enable_user_input(GWY_GRAPH_LABEL(self->obj), enable);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static const PyMethodDef _PyGwyGraphLabel_methods[] = {
    { "set_model", (PyCFunction)_wrap_gwy_graph_label_set_model, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_model", (PyCFunction)_wrap_gwy_graph_label_get_model, METH_NOARGS,
      NULL },
    { "enable_user_input", (PyCFunction)_wrap_gwy_graph_label_enable_user_input, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

PyTypeObject G_GNUC_INTERNAL PyGwyGraphLabel_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "gwy.GraphLabel",                   /* tp_name */
    sizeof(PyGObject),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)0,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    offsetof(PyGObject, weakreflist),             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyGwyGraphLabel_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    offsetof(PyGObject, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_gwy_graph_label_new,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)0,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0              /* tp_is_gc */
};



/* ----------- GwyGraphModel ----------- */

static int
_wrap_gwy_graph_model_new(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char* kwlist[] = { NULL };

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,
                                     ":gwy.GraphModel.__init__",
                                     kwlist))
        return -1;

    pygobject_constructv(self, 0, NULL);
    if (!self->obj) {
        PyErr_SetString(
            PyExc_RuntimeError, 
            "could not create gwy.GraphModel object");
        return -1;
    }
    return 0;
}

static PyObject *
_wrap_gwy_graph_model_new_alike(PyGObject *self)
{
    GwyGraphModel *ret;

    
    ret = gwy_graph_model_new_alike(GWY_GRAPH_MODEL(self->obj));
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_graph_model_get_n_curves(PyGObject *self)
{
    int ret;

    
    ret = gwy_graph_model_get_n_curves(GWY_GRAPH_MODEL(self->obj));
    
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_gwy_graph_model_add_curve(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "curve", NULL };
    PyGObject *curve;
    int ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:GwyGraphModel.add_curve", kwlist, &PyGwyGraphCurveModel_Type, &curve))
        return NULL;
    
    ret = gwy_graph_model_add_curve(GWY_GRAPH_MODEL(self->obj), GWY_GRAPH_CURVE_MODEL(curve->obj));
    
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_gwy_graph_model_remove_curve_by_description(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "description", NULL };
    char *description;
    int ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:GwyGraphModel.remove_curve_by_description", kwlist, &description))
        return NULL;
    
    ret = gwy_graph_model_remove_curve_by_description(GWY_GRAPH_MODEL(self->obj), description);
    
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_gwy_graph_model_remove_curve(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "cindex", NULL };
    int cindex;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:GwyGraphModel.remove_curve", kwlist, &cindex))
        return NULL;
    
    gwy_graph_model_remove_curve(GWY_GRAPH_MODEL(self->obj), cindex);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_graph_model_get_curve_by_description(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "description", NULL };
    char *description;
    GwyGraphCurveModel *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:GwyGraphModel.get_curve_by_description", kwlist, &description))
        return NULL;
    
    ret = gwy_graph_model_get_curve_by_description(GWY_GRAPH_MODEL(self->obj), description);
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_graph_model_get_curve(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "cindex", NULL };
    int cindex;
    GwyGraphCurveModel *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:GwyGraphModel.get_curve", kwlist, &cindex))
        return NULL;
    
    ret = gwy_graph_model_get_curve(GWY_GRAPH_MODEL(self->obj), cindex);
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_graph_model_get_curve_index(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "curve", NULL };
    PyGObject *curve;
    int ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:GwyGraphModel.get_curve_index", kwlist, &PyGwyGraphCurveModel_Type, &curve))
        return NULL;
    
    ret = gwy_graph_model_get_curve_index(GWY_GRAPH_MODEL(self->obj), GWY_GRAPH_CURVE_MODEL(curve->obj));
    
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_gwy_graph_model_remove_all_curves(PyGObject *self)
{
    
    gwy_graph_model_remove_all_curves(GWY_GRAPH_MODEL(self->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_graph_model_set_units_from_data_line(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "data_line", NULL };
    PyGObject *data_line;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:GwyGraphModel.set_units_from_data_line", kwlist, &PyGwyDataLine_Type, &data_line))
        return NULL;
    
    gwy_graph_model_set_units_from_data_line(GWY_GRAPH_MODEL(self->obj), GWY_DATA_LINE(data_line->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_graph_model_x_data_can_be_logarithmed(PyGObject *self)
{
    int ret;

    
    ret = gwy_graph_model_x_data_can_be_logarithmed(GWY_GRAPH_MODEL(self->obj));
    
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_graph_model_y_data_can_be_logarithmed(PyGObject *self)
{
    int ret;

    
    ret = gwy_graph_model_y_data_can_be_logarithmed(GWY_GRAPH_MODEL(self->obj));
    
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_graph_model_set_axis_label(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "pos", "label", NULL };
    PyObject *py_pos = NULL;
    char *label;
    GtkPositionType pos;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"Os:GwyGraphModel.set_axis_label", kwlist, &py_pos, &label))
        return NULL;
    if (pyg_enum_get_value(GTK_TYPE_POSITION_TYPE, py_pos, (gpointer)&pos))
        return NULL;
    
    gwy_graph_model_set_axis_label(GWY_GRAPH_MODEL(self->obj), pos, label);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_graph_model_get_axis_label(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "pos", NULL };
    PyObject *py_pos = NULL;
    const gchar *ret;
    GtkPositionType pos;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O:GwyGraphModel.get_axis_label", kwlist, &py_pos))
        return NULL;
    if (pyg_enum_get_value(GTK_TYPE_POSITION_TYPE, py_pos, (gpointer)&pos))
        return NULL;
    
    ret = gwy_graph_model_get_axis_label(GWY_GRAPH_MODEL(self->obj), pos);
    
    if (ret)
        return PyString_FromString(ret);
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_graph_model_get_x_range(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "x_min", "x_max", NULL };
    PyObject *x_min_pyobj, *x_max_pyobj;
    int ret;
    GDoubleValue x_min, x_max;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"OO:GwyGraphModel.get_x_range", kwlist, &x_min_pyobj, &x_max_pyobj))
        return NULL;
    if (!PyFloat_Check(x_min_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'x_min' must be a float variable");
        return NULL;
    }
    x_min = PyFloat_AsDouble(x_min_pyobj);
    if (!PyFloat_Check(x_max_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'x_max' must be a float variable");
        return NULL;
    }
    x_max = PyFloat_AsDouble(x_max_pyobj);
    
    ret = gwy_graph_model_get_x_range(GWY_GRAPH_MODEL(self->obj), &x_min, &x_max);
    
    ((PyFloatObject *) x_min_pyobj)->ob_fval = x_min;
    ((PyFloatObject *) x_max_pyobj)->ob_fval = x_max;
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_graph_model_get_y_range(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "y_min", "y_max", NULL };
    PyObject *y_min_pyobj, *y_max_pyobj;
    int ret;
    GDoubleValue y_min, y_max;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"OO:GwyGraphModel.get_y_range", kwlist, &y_min_pyobj, &y_max_pyobj))
        return NULL;
    if (!PyFloat_Check(y_min_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'y_min' must be a float variable");
        return NULL;
    }
    y_min = PyFloat_AsDouble(y_min_pyobj);
    if (!PyFloat_Check(y_max_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'y_max' must be a float variable");
        return NULL;
    }
    y_max = PyFloat_AsDouble(y_max_pyobj);
    
    ret = gwy_graph_model_get_y_range(GWY_GRAPH_MODEL(self->obj), &y_min, &y_max);
    
    ((PyFloatObject *) y_min_pyobj)->ob_fval = y_min;
    ((PyFloatObject *) y_max_pyobj)->ob_fval = y_max;
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_graph_model_get_ranges(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "x_logscale", "y_logscale", "x_min", "x_max", "y_min", "y_max", NULL };
    int x_logscale, y_logscale, ret;
    PyObject *x_min_pyobj, *x_max_pyobj, *y_min_pyobj, *y_max_pyobj;
    GDoubleValue x_min, x_max, y_min, y_max;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iiOOOO:GwyGraphModel.get_ranges", kwlist, &x_logscale, &y_logscale, &x_min_pyobj, &x_max_pyobj, &y_min_pyobj, &y_max_pyobj))
        return NULL;
    if (!PyFloat_Check(x_min_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'x_min' must be a float variable");
        return NULL;
    }
    x_min = PyFloat_AsDouble(x_min_pyobj);
    if (!PyFloat_Check(x_max_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'x_max' must be a float variable");
        return NULL;
    }
    x_max = PyFloat_AsDouble(x_max_pyobj);
    if (!PyFloat_Check(y_min_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'y_min' must be a float variable");
        return NULL;
    }
    y_min = PyFloat_AsDouble(y_min_pyobj);
    if (!PyFloat_Check(y_max_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'y_max' must be a float variable");
        return NULL;
    }
    y_max = PyFloat_AsDouble(y_max_pyobj);
    
    ret = gwy_graph_model_get_ranges(GWY_GRAPH_MODEL(self->obj), x_logscale, y_logscale, &x_min, &x_max, &y_min, &y_max);
    
    ((PyFloatObject *) x_min_pyobj)->ob_fval = x_min;
    ((PyFloatObject *) x_max_pyobj)->ob_fval = x_max;
    ((PyFloatObject *) y_min_pyobj)->ob_fval = y_min;
    ((PyFloatObject *) y_max_pyobj)->ob_fval = y_max;
    return PyBool_FromLong(ret);

}

static const PyMethodDef _PyGwyGraphModel_methods[] = {
    { "new_alike", (PyCFunction)_wrap_gwy_graph_model_new_alike, METH_NOARGS,
      NULL },
    { "get_n_curves", (PyCFunction)_wrap_gwy_graph_model_get_n_curves, METH_NOARGS,
      NULL },
    { "add_curve", (PyCFunction)_wrap_gwy_graph_model_add_curve, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "remove_curve_by_description", (PyCFunction)_wrap_gwy_graph_model_remove_curve_by_description, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "remove_curve", (PyCFunction)_wrap_gwy_graph_model_remove_curve, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_curve_by_description", (PyCFunction)_wrap_gwy_graph_model_get_curve_by_description, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_curve", (PyCFunction)_wrap_gwy_graph_model_get_curve, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_curve_index", (PyCFunction)_wrap_gwy_graph_model_get_curve_index, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "remove_all_curves", (PyCFunction)_wrap_gwy_graph_model_remove_all_curves, METH_NOARGS,
      NULL },
    { "set_units_from_data_line", (PyCFunction)_wrap_gwy_graph_model_set_units_from_data_line, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "x_data_can_be_logarithmed", (PyCFunction)_wrap_gwy_graph_model_x_data_can_be_logarithmed, METH_NOARGS,
      NULL },
    { "y_data_can_be_logarithmed", (PyCFunction)_wrap_gwy_graph_model_y_data_can_be_logarithmed, METH_NOARGS,
      NULL },
    { "set_axis_label", (PyCFunction)_wrap_gwy_graph_model_set_axis_label, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_axis_label", (PyCFunction)_wrap_gwy_graph_model_get_axis_label, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_x_range", (PyCFunction)_wrap_gwy_graph_model_get_x_range, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_y_range", (PyCFunction)_wrap_gwy_graph_model_get_y_range, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_ranges", (PyCFunction)_wrap_gwy_graph_model_get_ranges, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

PyTypeObject G_GNUC_INTERNAL PyGwyGraphModel_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "gwy.GraphModel",                   /* tp_name */
    sizeof(PyGObject),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)0,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    offsetof(PyGObject, weakreflist),             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyGwyGraphModel_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    offsetof(PyGObject, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_gwy_graph_model_new,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)0,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0              /* tp_is_gc */
};



/* ----------- GwyGraphWindow ----------- */

static PyObject *
_wrap_gwy_graph_window_get_graph(PyGObject *self)
{
    GtkWidget *ret;

    
    ret = gwy_graph_window_get_graph(GWY_GRAPH_WINDOW(self->obj));
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_graph_window_get_graph_data(PyGObject *self)
{
    GtkWidget *ret;

    
    ret = gwy_graph_window_get_graph_data(GWY_GRAPH_WINDOW(self->obj));
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_graph_window_get_graph_curves(PyGObject *self)
{
    GtkWidget *ret;

    
    ret = gwy_graph_window_get_graph_curves(GWY_GRAPH_WINDOW(self->obj));
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static const PyMethodDef _PyGwyGraphWindow_methods[] = {
    { "get_graph", (PyCFunction)_wrap_gwy_graph_window_get_graph, METH_NOARGS,
      NULL },
    { "get_graph_data", (PyCFunction)_wrap_gwy_graph_window_get_graph_data, METH_NOARGS,
      NULL },
    { "get_graph_curves", (PyCFunction)_wrap_gwy_graph_window_get_graph_curves, METH_NOARGS,
      NULL },
    { NULL, NULL, 0, NULL }
};

PyTypeObject G_GNUC_INTERNAL PyGwyGraphWindow_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "gwy.GraphWindow",                   /* tp_name */
    sizeof(PyGObject),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)0,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    offsetof(PyGObject, weakreflist),             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyGwyGraphWindow_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    offsetof(PyGObject, inst_dict),                 /* tp_dictoffset */
    (initproc)0,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)0,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0              /* tp_is_gc */
};



/* ----------- GwyInventory ----------- */

static int
pygobject_no_constructor(PyObject *self, PyObject *args, PyObject *kwargs)
{
    gchar buf[512];

    g_snprintf(buf, sizeof(buf), "%s is an abstract widget", self->ob_type->tp_name);
    PyErr_SetString(PyExc_NotImplementedError, buf);
    return -1;
}

static PyObject *
_wrap_gwy_inventory_get_n_items(PyGObject *self)
{
    guint ret;

    
    ret = gwy_inventory_get_n_items(GWY_INVENTORY(self->obj));
    
    return PyLong_FromUnsignedLong(ret);
}

static PyObject *
_wrap_gwy_inventory_can_make_copies(PyGObject *self)
{
    int ret;

    
    ret = gwy_inventory_can_make_copies(GWY_INVENTORY(self->obj));
    
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_inventory_get_item_position(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "name", NULL };
    char *name;
    guint ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:GwyInventory.get_item_position", kwlist, &name))
        return NULL;
    
    ret = gwy_inventory_get_item_position(GWY_INVENTORY(self->obj), name);
    
    return PyLong_FromUnsignedLong(ret);
}

static PyObject *
_wrap_gwy_inventory_set_default_item_name(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "name", NULL };
    char *name;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:GwyInventory.set_default_item_name", kwlist, &name))
        return NULL;
    
    gwy_inventory_set_default_item_name(GWY_INVENTORY(self->obj), name);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_inventory_get_default_item_name(PyGObject *self)
{
    const gchar *ret;

    
    ret = gwy_inventory_get_default_item_name(GWY_INVENTORY(self->obj));
    
    if (ret)
        return PyString_FromString(ret);
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_inventory_item_updated(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "name", NULL };
    char *name;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:GwyInventory.item_updated", kwlist, &name))
        return NULL;
    
    gwy_inventory_item_updated(GWY_INVENTORY(self->obj), name);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_inventory_nth_item_updated(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "n", NULL };
    PyObject *py_n = NULL;
    guint n = 0;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O:GwyInventory.nth_item_updated", kwlist, &py_n))
        return NULL;
    if (py_n) {
        if (PyLong_Check(py_n))
            n = PyLong_AsUnsignedLong(py_n);
        else if (PyInt_Check(py_n))
            n = PyInt_AsLong(py_n);
        else
            PyErr_SetString(PyExc_TypeError, "Parameter 'n' must be an int or a long");
        if (PyErr_Occurred())
            return NULL;
    }
    
    gwy_inventory_nth_item_updated(GWY_INVENTORY(self->obj), n);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_inventory_restore_order(PyGObject *self)
{
    
    gwy_inventory_restore_order(GWY_INVENTORY(self->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_inventory_forget_order(PyGObject *self)
{
    
    gwy_inventory_forget_order(GWY_INVENTORY(self->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_inventory_delete_item(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "name", NULL };
    char *name;
    int ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:GwyInventory.delete_item", kwlist, &name))
        return NULL;
    
    ret = gwy_inventory_delete_item(GWY_INVENTORY(self->obj), name);
    
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_inventory_delete_nth_item(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "n", NULL };
    PyObject *py_n = NULL;
    int ret;
    guint n = 0;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O:GwyInventory.delete_nth_item", kwlist, &py_n))
        return NULL;
    if (py_n) {
        if (PyLong_Check(py_n))
            n = PyLong_AsUnsignedLong(py_n);
        else if (PyInt_Check(py_n))
            n = PyInt_AsLong(py_n);
        else
            PyErr_SetString(PyExc_TypeError, "Parameter 'n' must be an int or a long");
        if (PyErr_Occurred())
            return NULL;
    }
    
    ret = gwy_inventory_delete_nth_item(GWY_INVENTORY(self->obj), n);
    
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_inventory_store_new(PyGObject *self)
{
    GwyInventoryStore *ret;

    
    ret = gwy_inventory_store_new(GWY_INVENTORY(self->obj));
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static const PyMethodDef _PyGwyInventory_methods[] = {
    { "get_n_items", (PyCFunction)_wrap_gwy_inventory_get_n_items, METH_NOARGS,
      NULL },
    { "can_make_copies", (PyCFunction)_wrap_gwy_inventory_can_make_copies, METH_NOARGS,
      NULL },
    { "get_item_position", (PyCFunction)_wrap_gwy_inventory_get_item_position, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "set_default_item_name", (PyCFunction)_wrap_gwy_inventory_set_default_item_name, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_default_item_name", (PyCFunction)_wrap_gwy_inventory_get_default_item_name, METH_NOARGS,
      NULL },
    { "item_updated", (PyCFunction)_wrap_gwy_inventory_item_updated, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "nth_item_updated", (PyCFunction)_wrap_gwy_inventory_nth_item_updated, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "restore_order", (PyCFunction)_wrap_gwy_inventory_restore_order, METH_NOARGS,
      NULL },
    { "forget_order", (PyCFunction)_wrap_gwy_inventory_forget_order, METH_NOARGS,
      NULL },
    { "delete_item", (PyCFunction)_wrap_gwy_inventory_delete_item, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "delete_nth_item", (PyCFunction)_wrap_gwy_inventory_delete_nth_item, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "store_new", (PyCFunction)_wrap_gwy_inventory_store_new, METH_NOARGS,
      NULL },
    { NULL, NULL, 0, NULL }
};

PyTypeObject G_GNUC_INTERNAL PyGwyInventory_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "gwy.Inventory",                   /* tp_name */
    sizeof(PyGObject),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)0,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    offsetof(PyGObject, weakreflist),             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyGwyInventory_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    offsetof(PyGObject, inst_dict),                 /* tp_dictoffset */
    (initproc)pygobject_no_constructor,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)0,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0              /* tp_is_gc */
};



/* ----------- GwyInventoryStore ----------- */

static PyObject *
_wrap_gwy_inventory_store_get_inventory(PyGObject *self)
{
    GwyInventory *ret;

    
    ret = gwy_inventory_store_get_inventory(GWY_INVENTORY_STORE(self->obj));
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_inventory_store_get_column_by_name(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "name", NULL };
    char *name;
    int ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:GwyInventoryStore.get_column_by_name", kwlist, &name))
        return NULL;
    
    ret = gwy_inventory_store_get_column_by_name(GWY_INVENTORY_STORE(self->obj), name);
    
    return PyInt_FromLong(ret);
}

static const PyMethodDef _PyGwyInventoryStore_methods[] = {
    { "get_inventory", (PyCFunction)_wrap_gwy_inventory_store_get_inventory, METH_NOARGS,
      NULL },
    { "get_column_by_name", (PyCFunction)_wrap_gwy_inventory_store_get_column_by_name, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

PyTypeObject G_GNUC_INTERNAL PyGwyInventoryStore_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "gwy.InventoryStore",                   /* tp_name */
    sizeof(PyGObject),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)0,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    offsetof(PyGObject, weakreflist),             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyGwyInventoryStore_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    offsetof(PyGObject, inst_dict),                 /* tp_dictoffset */
    (initproc)0,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)0,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0              /* tp_is_gc */
};



/* ----------- GwyMarkerBox ----------- */

static PyObject *
_wrap_gwy_marker_box_get_selected_marker(PyGObject *self)
{
    int ret;

    
    ret = gwy_marker_box_get_selected_marker(GWY_MARKER_BOX(self->obj));
    
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_gwy_marker_box_set_selected_marker(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "i", NULL };
    int i;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:GwyMarkerBox.set_selected_marker", kwlist, &i))
        return NULL;
    
    gwy_marker_box_set_selected_marker(GWY_MARKER_BOX(self->obj), i);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_marker_box_get_marker_position(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "i", NULL };
    int i;
    double ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:GwyMarkerBox.get_marker_position", kwlist, &i))
        return NULL;
    
    ret = gwy_marker_box_get_marker_position(GWY_MARKER_BOX(self->obj), i);
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_marker_box_set_marker_position(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "i", "pos", NULL };
    int i, ret;
    double pos;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"id:GwyMarkerBox.set_marker_position", kwlist, &i, &pos))
        return NULL;
    
    ret = gwy_marker_box_set_marker_position(GWY_MARKER_BOX(self->obj), i, pos);
    
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_marker_box_add_marker(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "i", "pos", NULL };
    int i, ret;
    double pos;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"id:GwyMarkerBox.add_marker", kwlist, &i, &pos))
        return NULL;
    
    ret = gwy_marker_box_add_marker(GWY_MARKER_BOX(self->obj), i, pos);
    
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_gwy_marker_box_remove_marker(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "i", NULL };
    int i, ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:GwyMarkerBox.remove_marker", kwlist, &i))
        return NULL;
    
    ret = gwy_marker_box_remove_marker(GWY_MARKER_BOX(self->obj), i);
    
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_marker_box_get_nmarkers(PyGObject *self)
{
    int ret;

    
    ret = gwy_marker_box_get_nmarkers(GWY_MARKER_BOX(self->obj));
    
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_gwy_marker_box_get_markers(PyGObject *self)
{
    gdouble *ret;

    
    ret = gwy_marker_box_get_markers(GWY_MARKER_BOX(self->obj));
    
    PyErr_SetString(PyExc_NotImplementedError, "Return type 'const-gdouble*' not supported");
    return NULL;
}

static PyObject *
_wrap_gwy_marker_box_set_markers(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "n", "markers", NULL };
    int n, i_markers;
    PyObject *markers_pyobj;
    gdouble *markers;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iO:GwyMarkerBox.set_markers", kwlist, &n, &markers_pyobj))
        return NULL;
    if (!PyList_Check(markers_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'markers' must be a list of floats");
        return NULL;
    }
    markers =  g_malloc(sizeof(gdouble)*PyList_Size(markers_pyobj));
    if (markers == NULL) {
        return PyErr_NoMemory();
    }
    for (i_markers = 0; i_markers < PyList_Size(markers_pyobj); i_markers++) {
        if (!PyFloat_Check(PyList_GetItem(markers_pyobj, i_markers))) {
            g_free(markers);
            PyErr_SetString(PyExc_TypeError, "Parameter 'markers' must be a list of floats");
            return NULL;
        }
        markers[i_markers] = PyFloat_AsDouble(PyList_GetItem(markers_pyobj, i_markers));
    }
    
    gwy_marker_box_set_markers(GWY_MARKER_BOX(self->obj), n, markers);
    
    g_free(markers);
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_marker_box_set_flipped(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "flipped", NULL };
    int flipped;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:GwyMarkerBox.set_flipped", kwlist, &flipped))
        return NULL;
    
    gwy_marker_box_set_flipped(GWY_MARKER_BOX(self->obj), flipped);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_marker_box_get_flipped(PyGObject *self)
{
    int ret;

    
    ret = gwy_marker_box_get_flipped(GWY_MARKER_BOX(self->obj));
    
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_marker_box_set_highlight_selected(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "highlight", NULL };
    int highlight;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:GwyMarkerBox.set_highlight_selected", kwlist, &highlight))
        return NULL;
    
    gwy_marker_box_set_highlight_selected(GWY_MARKER_BOX(self->obj), highlight);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_marker_box_get_highlight_selected(PyGObject *self)
{
    int ret;

    
    ret = gwy_marker_box_get_highlight_selected(GWY_MARKER_BOX(self->obj));
    
    return PyBool_FromLong(ret);

}

static const PyMethodDef _PyGwyMarkerBox_methods[] = {
    { "get_selected_marker", (PyCFunction)_wrap_gwy_marker_box_get_selected_marker, METH_NOARGS,
      NULL },
    { "set_selected_marker", (PyCFunction)_wrap_gwy_marker_box_set_selected_marker, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_marker_position", (PyCFunction)_wrap_gwy_marker_box_get_marker_position, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "set_marker_position", (PyCFunction)_wrap_gwy_marker_box_set_marker_position, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "add_marker", (PyCFunction)_wrap_gwy_marker_box_add_marker, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "remove_marker", (PyCFunction)_wrap_gwy_marker_box_remove_marker, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_nmarkers", (PyCFunction)_wrap_gwy_marker_box_get_nmarkers, METH_NOARGS,
      NULL },
    { "get_markers", (PyCFunction)_wrap_gwy_marker_box_get_markers, METH_NOARGS,
      NULL },
    { "set_markers", (PyCFunction)_wrap_gwy_marker_box_set_markers, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "set_flipped", (PyCFunction)_wrap_gwy_marker_box_set_flipped, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_flipped", (PyCFunction)_wrap_gwy_marker_box_get_flipped, METH_NOARGS,
      NULL },
    { "set_highlight_selected", (PyCFunction)_wrap_gwy_marker_box_set_highlight_selected, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_highlight_selected", (PyCFunction)_wrap_gwy_marker_box_get_highlight_selected, METH_NOARGS,
      NULL },
    { NULL, NULL, 0, NULL }
};

PyTypeObject G_GNUC_INTERNAL PyGwyMarkerBox_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "gwy.MarkerBox",                   /* tp_name */
    sizeof(PyGObject),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)0,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    offsetof(PyGObject, weakreflist),             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyGwyMarkerBox_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    offsetof(PyGObject, inst_dict),                 /* tp_dictoffset */
    (initproc)0,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)0,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0              /* tp_is_gc */
};



/* ----------- GwyHMarkerBox ----------- */

PyTypeObject G_GNUC_INTERNAL PyGwyHMarkerBox_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "gwy.HMarkerBox",                   /* tp_name */
    sizeof(PyGObject),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)0,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    offsetof(PyGObject, weakreflist),             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    offsetof(PyGObject, inst_dict),                 /* tp_dictoffset */
    (initproc)0,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)0,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0              /* tp_is_gc */
};



/* ----------- GwyNullStore ----------- */

static int
_wrap_gwy_null_store_new(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "n", NULL };
    PyObject *py_n = NULL;
    guint n = 0;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O:GwyNullStore.__init__", kwlist, &py_n))
        return -1;
    if (py_n) {
        if (PyLong_Check(py_n))
            n = PyLong_AsUnsignedLong(py_n);
        else if (PyInt_Check(py_n))
            n = PyInt_AsLong(py_n);
        else
            PyErr_SetString(PyExc_TypeError, "Parameter 'n' must be an int or a long");
        if (PyErr_Occurred())
            return -1;
    }
    self->obj = (GObject *)gwy_null_store_new(n);

    if (!self->obj) {
        PyErr_SetString(PyExc_RuntimeError, "could not create GwyNullStore object");
        return -1;
    }
    pygobject_register_wrapper((PyObject *)self);
    return 0;
}

static PyObject *
_wrap_gwy_null_store_get_n_rows(PyGObject *self)
{
    guint ret;

    
    ret = gwy_null_store_get_n_rows(GWY_NULL_STORE(self->obj));
    
    return PyLong_FromUnsignedLong(ret);
}

static PyObject *
_wrap_gwy_null_store_set_n_rows(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "n", NULL };
    PyObject *py_n = NULL;
    guint n = 0;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O:GwyNullStore.set_n_rows", kwlist, &py_n))
        return NULL;
    if (py_n) {
        if (PyLong_Check(py_n))
            n = PyLong_AsUnsignedLong(py_n);
        else if (PyInt_Check(py_n))
            n = PyInt_AsLong(py_n);
        else
            PyErr_SetString(PyExc_TypeError, "Parameter 'n' must be an int or a long");
        if (PyErr_Occurred())
            return NULL;
    }
    
    gwy_null_store_set_n_rows(GWY_NULL_STORE(self->obj), n);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_null_store_row_changed(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "i", NULL };
    PyObject *py_i = NULL;
    guint i = 0;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O:GwyNullStore.row_changed", kwlist, &py_i))
        return NULL;
    if (py_i) {
        if (PyLong_Check(py_i))
            i = PyLong_AsUnsignedLong(py_i);
        else if (PyInt_Check(py_i))
            i = PyInt_AsLong(py_i);
        else
            PyErr_SetString(PyExc_TypeError, "Parameter 'i' must be an int or a long");
        if (PyErr_Occurred())
            return NULL;
    }
    
    gwy_null_store_row_changed(GWY_NULL_STORE(self->obj), i);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static const PyMethodDef _PyGwyNullStore_methods[] = {
    { "get_n_rows", (PyCFunction)_wrap_gwy_null_store_get_n_rows, METH_NOARGS,
      NULL },
    { "set_n_rows", (PyCFunction)_wrap_gwy_null_store_set_n_rows, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "row_changed", (PyCFunction)_wrap_gwy_null_store_row_changed, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

PyTypeObject G_GNUC_INTERNAL PyGwyNullStore_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "gwy.NullStore",                   /* tp_name */
    sizeof(PyGObject),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)0,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    offsetof(PyGObject, weakreflist),             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyGwyNullStore_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    offsetof(PyGObject, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_gwy_null_store_new,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)0,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0              /* tp_is_gc */
};



/* ----------- GwyPixmapLayer ----------- */

static PyObject *
_wrap_gwy_pixmap_layer_wants_repaint(PyGObject *self)
{
    int ret;

    
    ret = gwy_pixmap_layer_wants_repaint(GWY_PIXMAP_LAYER(self->obj));
    
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_pixmap_layer_paint(PyGObject *self)
{
    GdkPixbuf *ret;

    
    ret = gwy_pixmap_layer_paint(GWY_PIXMAP_LAYER(self->obj));
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_pixmap_layer_set_data_key(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "key", NULL };
    char *key;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:GwyPixmapLayer.set_data_key", kwlist, &key))
        return NULL;
    
    gwy_pixmap_layer_set_data_key(GWY_PIXMAP_LAYER(self->obj), key);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_pixmap_layer_get_data_key(PyGObject *self)
{
    const gchar *ret;

    
    ret = gwy_pixmap_layer_get_data_key(GWY_PIXMAP_LAYER(self->obj));
    
    if (ret)
        return PyString_FromString(ret);
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_pixmap_layer_make_pixbuf(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "has_alpha", NULL };
    int has_alpha;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:GwyPixmapLayer.make_pixbuf", kwlist, &has_alpha))
        return NULL;
    
    gwy_pixmap_layer_make_pixbuf(GWY_PIXMAP_LAYER(self->obj), has_alpha);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static const PyMethodDef _PyGwyPixmapLayer_methods[] = {
    { "wants_repaint", (PyCFunction)_wrap_gwy_pixmap_layer_wants_repaint, METH_NOARGS,
      NULL },
    { "paint", (PyCFunction)_wrap_gwy_pixmap_layer_paint, METH_NOARGS,
      NULL },
    { "set_data_key", (PyCFunction)_wrap_gwy_pixmap_layer_set_data_key, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_data_key", (PyCFunction)_wrap_gwy_pixmap_layer_get_data_key, METH_NOARGS,
      NULL },
    { "make_pixbuf", (PyCFunction)_wrap_gwy_pixmap_layer_make_pixbuf, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

PyTypeObject G_GNUC_INTERNAL PyGwyPixmapLayer_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "gwy.PixmapLayer",                   /* tp_name */
    sizeof(PyGObject),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)0,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    offsetof(PyGObject, weakreflist),             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyGwyPixmapLayer_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    offsetof(PyGObject, inst_dict),                 /* tp_dictoffset */
    (initproc)0,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)0,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0              /* tp_is_gc */
};



/* ----------- GwyLayerMask ----------- */

static int
_wrap_gwy_layer_mask_new(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char* kwlist[] = { NULL };

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,
                                     ":gwy.LayerMask.__init__",
                                     kwlist))
        return -1;

    pygobject_constructv(self, 0, NULL);
    if (!self->obj) {
        PyErr_SetString(
            PyExc_RuntimeError, 
            "could not create gwy.LayerMask object");
        return -1;
    }
    return 0;
}

static PyObject *
_wrap_gwy_layer_mask_set_color_key(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "prefix", NULL };
    char *prefix;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:GwyLayerMask.set_color_key", kwlist, &prefix))
        return NULL;
    
    gwy_layer_mask_set_color_key(GWY_LAYER_MASK(self->obj), prefix);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_layer_mask_get_color_key(PyGObject *self)
{
    const gchar *ret;

    
    ret = gwy_layer_mask_get_color_key(GWY_LAYER_MASK(self->obj));
    
    if (ret)
        return PyString_FromString(ret);
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_layer_mask_get_color(PyGObject *self)
{
    PyObject *color_tuple;
    GwyRGBA ret;

    
    ret = gwy_layer_mask_get_color(GWY_LAYER_MASK(self->obj));
    
    color_tuple = PyTuple_New(4);
    PyTuple_SetItem(color_tuple, 0, PyFloat_FromDouble(ret.r));
    PyTuple_SetItem(color_tuple, 1, PyFloat_FromDouble(ret.g));
    PyTuple_SetItem(color_tuple, 2, PyFloat_FromDouble(ret.b));
    PyTuple_SetItem(color_tuple, 3, PyFloat_FromDouble(ret.a));
    return color_tuple;
}

static const PyMethodDef _PyGwyLayerMask_methods[] = {
    { "set_color_key", (PyCFunction)_wrap_gwy_layer_mask_set_color_key, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_color_key", (PyCFunction)_wrap_gwy_layer_mask_get_color_key, METH_NOARGS,
      NULL },
    { "get_color", (PyCFunction)_wrap_gwy_layer_mask_get_color, METH_NOARGS,
      NULL },
    { NULL, NULL, 0, NULL }
};

PyTypeObject G_GNUC_INTERNAL PyGwyLayerMask_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "gwy.LayerMask",                   /* tp_name */
    sizeof(PyGObject),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)0,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    offsetof(PyGObject, weakreflist),             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyGwyLayerMask_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    offsetof(PyGObject, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_gwy_layer_mask_new,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)0,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0              /* tp_is_gc */
};



/* ----------- GwyLayerBasic ----------- */

static int
_wrap_gwy_layer_basic_new(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char* kwlist[] = { NULL };

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,
                                     ":gwy.LayerBasic.__init__",
                                     kwlist))
        return -1;

    pygobject_constructv(self, 0, NULL);
    if (!self->obj) {
        PyErr_SetString(
            PyExc_RuntimeError, 
            "could not create gwy.LayerBasic object");
        return -1;
    }
    return 0;
}

static PyObject *
_wrap_gwy_layer_basic_get_range(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "min", "max", NULL };
    PyObject *min_pyobj, *max_pyobj;
    GDoubleValue min, max;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"OO:GwyLayerBasic.get_range", kwlist, &min_pyobj, &max_pyobj))
        return NULL;
    if (!PyFloat_Check(min_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'min' must be a float variable");
        return NULL;
    }
    min = PyFloat_AsDouble(min_pyobj);
    if (!PyFloat_Check(max_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'max' must be a float variable");
        return NULL;
    }
    max = PyFloat_AsDouble(max_pyobj);
    
    gwy_layer_basic_get_range(GWY_LAYER_BASIC(self->obj), &min, &max);
    
    ((PyFloatObject *) min_pyobj)->ob_fval = min;
    ((PyFloatObject *) max_pyobj)->ob_fval = max;
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_layer_basic_get_range_type(PyGObject *self)
{
    gint ret;

    
    ret = gwy_layer_basic_get_range_type(GWY_LAYER_BASIC(self->obj));
    
    return pyg_enum_from_gtype(GWY_TYPE_LAYER_BASIC_RANGE_TYPE, ret);
}

static PyObject *
_wrap_gwy_layer_basic_set_gradient_key(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "key", NULL };
    char *key;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:GwyLayerBasic.set_gradient_key", kwlist, &key))
        return NULL;
    
    gwy_layer_basic_set_gradient_key(GWY_LAYER_BASIC(self->obj), key);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_layer_basic_get_gradient_key(PyGObject *self)
{
    const gchar *ret;

    
    ret = gwy_layer_basic_get_gradient_key(GWY_LAYER_BASIC(self->obj));
    
    if (ret)
        return PyString_FromString(ret);
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_layer_basic_set_presentation_key(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "key", NULL };
    char *key;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:GwyLayerBasic.set_presentation_key", kwlist, &key))
        return NULL;
    
    gwy_layer_basic_set_presentation_key(GWY_LAYER_BASIC(self->obj), key);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_layer_basic_get_presentation_key(PyGObject *self)
{
    const gchar *ret;

    
    ret = gwy_layer_basic_get_presentation_key(GWY_LAYER_BASIC(self->obj));
    
    if (ret)
        return PyString_FromString(ret);
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_layer_basic_get_has_presentation(PyGObject *self)
{
    int ret;

    
    ret = gwy_layer_basic_get_has_presentation(GWY_LAYER_BASIC(self->obj));
    
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_layer_basic_set_min_max_key(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "prefix", NULL };
    char *prefix;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:GwyLayerBasic.set_min_max_key", kwlist, &prefix))
        return NULL;
    
    gwy_layer_basic_set_min_max_key(GWY_LAYER_BASIC(self->obj), prefix);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_layer_basic_get_min_max_key(PyGObject *self)
{
    const gchar *ret;

    
    ret = gwy_layer_basic_get_min_max_key(GWY_LAYER_BASIC(self->obj));
    
    if (ret)
        return PyString_FromString(ret);
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_layer_basic_set_range_type_key(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "key", NULL };
    char *key;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:GwyLayerBasic.set_range_type_key", kwlist, &key))
        return NULL;
    
    gwy_layer_basic_set_range_type_key(GWY_LAYER_BASIC(self->obj), key);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_layer_basic_get_range_type_key(PyGObject *self)
{
    const gchar *ret;

    
    ret = gwy_layer_basic_get_range_type_key(GWY_LAYER_BASIC(self->obj));
    
    if (ret)
        return PyString_FromString(ret);
    Py_INCREF(Py_None);
    return Py_None;
}

static const PyMethodDef _PyGwyLayerBasic_methods[] = {
    { "get_range", (PyCFunction)_wrap_gwy_layer_basic_get_range, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_range_type", (PyCFunction)_wrap_gwy_layer_basic_get_range_type, METH_NOARGS,
      NULL },
    { "set_gradient_key", (PyCFunction)_wrap_gwy_layer_basic_set_gradient_key, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_gradient_key", (PyCFunction)_wrap_gwy_layer_basic_get_gradient_key, METH_NOARGS,
      NULL },
    { "set_presentation_key", (PyCFunction)_wrap_gwy_layer_basic_set_presentation_key, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_presentation_key", (PyCFunction)_wrap_gwy_layer_basic_get_presentation_key, METH_NOARGS,
      NULL },
    { "get_has_presentation", (PyCFunction)_wrap_gwy_layer_basic_get_has_presentation, METH_NOARGS,
      NULL },
    { "set_min_max_key", (PyCFunction)_wrap_gwy_layer_basic_set_min_max_key, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_min_max_key", (PyCFunction)_wrap_gwy_layer_basic_get_min_max_key, METH_NOARGS,
      NULL },
    { "set_range_type_key", (PyCFunction)_wrap_gwy_layer_basic_set_range_type_key, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_range_type_key", (PyCFunction)_wrap_gwy_layer_basic_get_range_type_key, METH_NOARGS,
      NULL },
    { NULL, NULL, 0, NULL }
};

PyTypeObject G_GNUC_INTERNAL PyGwyLayerBasic_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "gwy.LayerBasic",                   /* tp_name */
    sizeof(PyGObject),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)0,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    offsetof(PyGObject, weakreflist),             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyGwyLayerBasic_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    offsetof(PyGObject, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_gwy_layer_basic_new,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)0,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0              /* tp_is_gc */
};




/* ----------- GwyResource ----------- */

static PyObject *
_wrap_gwy_resource_get_name(PyGObject *self)
{
    const gchar *ret;

    
    ret = gwy_resource_get_name(GWY_RESOURCE(self->obj));
    
    if (ret)
        return PyString_FromString(ret);
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_resource_get_is_modifiable(PyGObject *self)
{
    int ret;

    
    ret = gwy_resource_get_is_modifiable(GWY_RESOURCE(self->obj));
    
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_resource_get_is_preferred(PyGObject *self)
{
    int ret;

    
    ret = gwy_resource_get_is_preferred(GWY_RESOURCE(self->obj));
    
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_resource_set_is_preferred(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "is_preferred", NULL };
    int is_preferred;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:GwyResource.set_is_preferred", kwlist, &is_preferred))
        return NULL;
    
    gwy_resource_set_is_preferred(GWY_RESOURCE(self->obj), is_preferred);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_resource_use(PyGObject *self)
{
    
    gwy_resource_use(GWY_RESOURCE(self->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_resource_release(PyGObject *self)
{
    
    gwy_resource_release(GWY_RESOURCE(self->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_resource_is_used(PyGObject *self)
{
    int ret;

    
    ret = gwy_resource_is_used(GWY_RESOURCE(self->obj));
    
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_resource_data_changed(PyGObject *self)
{
    
    gwy_resource_data_changed(GWY_RESOURCE(self->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_resource_data_saved(PyGObject *self)
{
    
    gwy_resource_data_saved(GWY_RESOURCE(self->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_resource_build_filename(PyGObject *self)
{
    gchar *ret;

    
    ret = gwy_resource_build_filename(GWY_RESOURCE(self->obj));
    
    if (ret) {
        PyObject *py_ret = PyString_FromString(ret);
        g_free(ret);
        return py_ret;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

static const PyMethodDef _PyGwyResource_methods[] = {
    { "get_name", (PyCFunction)_wrap_gwy_resource_get_name, METH_NOARGS,
      NULL },
    { "get_is_modifiable", (PyCFunction)_wrap_gwy_resource_get_is_modifiable, METH_NOARGS,
      NULL },
    { "get_is_preferred", (PyCFunction)_wrap_gwy_resource_get_is_preferred, METH_NOARGS,
      NULL },
    { "set_is_preferred", (PyCFunction)_wrap_gwy_resource_set_is_preferred, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "use", (PyCFunction)_wrap_gwy_resource_use, METH_NOARGS,
      NULL },
    { "release", (PyCFunction)_wrap_gwy_resource_release, METH_NOARGS,
      NULL },
    { "is_used", (PyCFunction)_wrap_gwy_resource_is_used, METH_NOARGS,
      NULL },
    { "data_changed", (PyCFunction)_wrap_gwy_resource_data_changed, METH_NOARGS,
      NULL },
    { "data_saved", (PyCFunction)_wrap_gwy_resource_data_saved, METH_NOARGS,
      NULL },
    { "build_filename", (PyCFunction)_wrap_gwy_resource_build_filename, METH_NOARGS,
      NULL },
    { NULL, NULL, 0, NULL }
};

PyTypeObject G_GNUC_INTERNAL PyGwyResource_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "gwy.Resource",                   /* tp_name */
    sizeof(PyGObject),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)0,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    offsetof(PyGObject, weakreflist),             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyGwyResource_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    offsetof(PyGObject, inst_dict),                 /* tp_dictoffset */
    (initproc)0,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)0,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0              /* tp_is_gc */
};



/* ----------- GwyNLFitPreset ----------- */

static PyObject *
_wrap_gwy_nlfit_preset_get_formula(PyGObject *self)
{
    const gchar *ret;

    
    ret = gwy_nlfit_preset_get_formula(GWY_NLFIT_PRESET(self->obj));
    
    if (ret)
        return PyString_FromString(ret);
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_nlfit_preset_get_nparams(PyGObject *self)
{
    int ret;

    
    ret = gwy_nlfit_preset_get_nparams(GWY_NLFIT_PRESET(self->obj));
    
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_gwy_nlfit_preset_get_param_name(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "param", NULL };
    int param;
    const gchar *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:GwyNLFitPreset.get_param_name", kwlist, &param))
        return NULL;
    
    ret = gwy_nlfit_preset_get_param_name(GWY_NLFIT_PRESET(self->obj), param);
    
    if (ret)
        return PyString_FromString(ret);
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_nlfit_preset_get_param_units(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "param", "siunit_x", "siunit_y", NULL };
    int param;
    PyGObject *siunit_x, *siunit_y;
    GwySIUnit *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iO!O!:GwyNLFitPreset.get_param_units", kwlist, &param, &PyGwySIUnit_Type, &siunit_x, &PyGwySIUnit_Type, &siunit_y))
        return NULL;
    
    ret = gwy_nlfit_preset_get_param_units(GWY_NLFIT_PRESET(self->obj), param, GWY_SI_UNIT(siunit_x->obj), GWY_SI_UNIT(siunit_y->obj));
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static const PyMethodDef _PyGwyNLFitPreset_methods[] = {
    { "get_formula", (PyCFunction)_wrap_gwy_nlfit_preset_get_formula, METH_NOARGS,
      NULL },
    { "get_nparams", (PyCFunction)_wrap_gwy_nlfit_preset_get_nparams, METH_NOARGS,
      NULL },
    { "get_param_name", (PyCFunction)_wrap_gwy_nlfit_preset_get_param_name, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_param_units", (PyCFunction)_wrap_gwy_nlfit_preset_get_param_units, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

PyTypeObject G_GNUC_INTERNAL PyGwyNLFitPreset_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "gwy.NLFitPreset",                   /* tp_name */
    sizeof(PyGObject),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)0,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    offsetof(PyGObject, weakreflist),             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyGwyNLFitPreset_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    offsetof(PyGObject, inst_dict),                 /* tp_dictoffset */
    (initproc)0,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)0,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0              /* tp_is_gc */
};



/* ----------- GwyFDCurvePreset ----------- */

PyTypeObject G_GNUC_INTERNAL PyGwyFDCurvePreset_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "gwy.FDCurvePreset",                   /* tp_name */
    sizeof(PyGObject),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)0,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    offsetof(PyGObject, weakreflist),             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    offsetof(PyGObject, inst_dict),                 /* tp_dictoffset */
    (initproc)0,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)0,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0              /* tp_is_gc */
};



/* ----------- GwyGradient ----------- */

static PyObject *
_wrap_gwy_gradient_get_color(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "red", "green", "blue", "color", NULL };
    double x;
    GwyRGBA s_color, *color = &s_color;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ddddd:GwyGradient.get_color", kwlist, &x, &color->r, &color->g, &color->b, &color->a))
        return NULL;
    gwy_debug("color: %f %f %f %f", color->r, color->g, color->b, color->a);    
    gwy_gradient_get_color(GWY_GRADIENT(self->obj), x, color);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_gradient_sample_to_pixbuf(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "pixbuf", NULL };
    PyGObject *pixbuf;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:GwyGradient.sample_to_pixbuf", kwlist, &PyGdkPixbuf_Type, &pixbuf))
        return NULL;
    
    gwy_gradient_sample_to_pixbuf(GWY_GRADIENT(self->obj), GDK_PIXBUF(pixbuf->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_gradient_get_npoints(PyGObject *self)
{
    int ret;

    
    ret = gwy_gradient_get_npoints(GWY_GRADIENT(self->obj));
    
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_gwy_gradient_set_point_color(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "red", "green", "blue", "color", NULL };
    int index_;
    GwyRGBA s_color, *color = &s_color;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"idddd:GwyGradient.set_point_color", kwlist, &index_, &color->r, &color->g, &color->b, &color->a))
        return NULL;
    gwy_debug("color: %f %f %f %f", color->r, color->g, color->b, color->a);    
    gwy_gradient_set_point_color(GWY_GRADIENT(self->obj), index_, color);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_gradient_delete_point(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "index_", NULL };
    int index_;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:GwyGradient.delete_point", kwlist, &index_))
        return NULL;
    
    gwy_gradient_delete_point(GWY_GRADIENT(self->obj), index_);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_gradient_reset(PyGObject *self)
{
    
    gwy_gradient_reset(GWY_GRADIENT(self->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_gradient_set_from_samples(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "nsamples", "samples", "threshold", NULL };
    int nsamples, samples_len;
    double threshold;
    guchar *samples;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"is#d:GwyGradient.set_from_samples", kwlist, &nsamples, &samples, &samples_len, &threshold))
        return NULL;
    
    gwy_gradient_set_from_samples(GWY_GRADIENT(self->obj), nsamples, samples, threshold);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static const PyMethodDef _PyGwyGradient_methods[] = {
    { "get_color", (PyCFunction)_wrap_gwy_gradient_get_color, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "sample_to_pixbuf", (PyCFunction)_wrap_gwy_gradient_sample_to_pixbuf, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_npoints", (PyCFunction)_wrap_gwy_gradient_get_npoints, METH_NOARGS,
      NULL },
    { "set_point_color", (PyCFunction)_wrap_gwy_gradient_set_point_color, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "delete_point", (PyCFunction)_wrap_gwy_gradient_delete_point, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "reset", (PyCFunction)_wrap_gwy_gradient_reset, METH_NOARGS,
      NULL },
    { "set_from_samples", (PyCFunction)_wrap_gwy_gradient_set_from_samples, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

PyTypeObject G_GNUC_INTERNAL PyGwyGradient_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "gwy.Gradient",                   /* tp_name */
    sizeof(PyGObject),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)0,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    offsetof(PyGObject, weakreflist),             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyGwyGradient_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    offsetof(PyGObject, inst_dict),                 /* tp_dictoffset */
    (initproc)0,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)0,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0              /* tp_is_gc */
};



/* ----------- GwyGLMaterial ----------- */

static PyObject *
_wrap_gwy_gl_material_get_ambient(PyGObject *self)
{
    PyObject *color_tuple;
    GwyRGBA *ret;

    
    ret = gwy_gl_material_get_ambient(GWY_GL_MATERIAL(self->obj));
    
    color_tuple = PyTuple_New(4);
    PyTuple_SetItem(color_tuple, 0, PyFloat_FromDouble(ret->r));
    PyTuple_SetItem(color_tuple, 1, PyFloat_FromDouble(ret->g));
    PyTuple_SetItem(color_tuple, 2, PyFloat_FromDouble(ret->b));
    PyTuple_SetItem(color_tuple, 3, PyFloat_FromDouble(ret->a));
    return color_tuple;
}

static PyObject *
_wrap_gwy_gl_material_set_ambient(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "red", "green", "blue", "ambient", NULL };
    GwyRGBA s_ambient, *ambient = &s_ambient;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"dddd:GwyGLMaterial.set_ambient", kwlist, &ambient->r, &ambient->g, &ambient->b, &ambient->a))
        return NULL;
    gwy_debug("color: %f %f %f %f", ambient->r, ambient->g, ambient->b, ambient->a);    
    gwy_gl_material_set_ambient(GWY_GL_MATERIAL(self->obj), ambient);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_gl_material_get_diffuse(PyGObject *self)
{
    PyObject *color_tuple;
    GwyRGBA *ret;

    
    ret = gwy_gl_material_get_diffuse(GWY_GL_MATERIAL(self->obj));
    
    color_tuple = PyTuple_New(4);
    PyTuple_SetItem(color_tuple, 0, PyFloat_FromDouble(ret->r));
    PyTuple_SetItem(color_tuple, 1, PyFloat_FromDouble(ret->g));
    PyTuple_SetItem(color_tuple, 2, PyFloat_FromDouble(ret->b));
    PyTuple_SetItem(color_tuple, 3, PyFloat_FromDouble(ret->a));
    return color_tuple;
}

static PyObject *
_wrap_gwy_gl_material_set_diffuse(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "red", "green", "blue", "diffuse", NULL };
    GwyRGBA s_diffuse, *diffuse = &s_diffuse;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"dddd:GwyGLMaterial.set_diffuse", kwlist, &diffuse->r, &diffuse->g, &diffuse->b, &diffuse->a))
        return NULL;
    gwy_debug("color: %f %f %f %f", diffuse->r, diffuse->g, diffuse->b, diffuse->a);    
    gwy_gl_material_set_diffuse(GWY_GL_MATERIAL(self->obj), diffuse);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_gl_material_get_specular(PyGObject *self)
{
    PyObject *color_tuple;
    GwyRGBA *ret;

    
    ret = gwy_gl_material_get_specular(GWY_GL_MATERIAL(self->obj));
    
    color_tuple = PyTuple_New(4);
    PyTuple_SetItem(color_tuple, 0, PyFloat_FromDouble(ret->r));
    PyTuple_SetItem(color_tuple, 1, PyFloat_FromDouble(ret->g));
    PyTuple_SetItem(color_tuple, 2, PyFloat_FromDouble(ret->b));
    PyTuple_SetItem(color_tuple, 3, PyFloat_FromDouble(ret->a));
    return color_tuple;
}

static PyObject *
_wrap_gwy_gl_material_set_specular(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "red", "green", "blue", "specular", NULL };
    GwyRGBA s_specular, *specular = &s_specular;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"dddd:GwyGLMaterial.set_specular", kwlist, &specular->r, &specular->g, &specular->b, &specular->a))
        return NULL;
    gwy_debug("color: %f %f %f %f", specular->r, specular->g, specular->b, specular->a);    
    gwy_gl_material_set_specular(GWY_GL_MATERIAL(self->obj), specular);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_gl_material_get_emission(PyGObject *self)
{
    PyObject *color_tuple;
    GwyRGBA *ret;

    
    ret = gwy_gl_material_get_emission(GWY_GL_MATERIAL(self->obj));
    
    color_tuple = PyTuple_New(4);
    PyTuple_SetItem(color_tuple, 0, PyFloat_FromDouble(ret->r));
    PyTuple_SetItem(color_tuple, 1, PyFloat_FromDouble(ret->g));
    PyTuple_SetItem(color_tuple, 2, PyFloat_FromDouble(ret->b));
    PyTuple_SetItem(color_tuple, 3, PyFloat_FromDouble(ret->a));
    return color_tuple;
}

static PyObject *
_wrap_gwy_gl_material_set_emission(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "red", "green", "blue", "emission", NULL };
    GwyRGBA s_emission, *emission = &s_emission;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"dddd:GwyGLMaterial.set_emission", kwlist, &emission->r, &emission->g, &emission->b, &emission->a))
        return NULL;
    gwy_debug("color: %f %f %f %f", emission->r, emission->g, emission->b, emission->a);    
    gwy_gl_material_set_emission(GWY_GL_MATERIAL(self->obj), emission);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_gl_material_get_shininess(PyGObject *self)
{
    double ret;

    
    ret = gwy_gl_material_get_shininess(GWY_GL_MATERIAL(self->obj));
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_gl_material_set_shininess(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "shininess", NULL };
    double shininess;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"d:GwyGLMaterial.set_shininess", kwlist, &shininess))
        return NULL;
    
    gwy_gl_material_set_shininess(GWY_GL_MATERIAL(self->obj), shininess);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_gl_material_sample_to_pixbuf(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "pixbuf", NULL };
    PyGObject *pixbuf;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:GwyGLMaterial.sample_to_pixbuf", kwlist, &PyGdkPixbuf_Type, &pixbuf))
        return NULL;
    
    gwy_gl_material_sample_to_pixbuf(GWY_GL_MATERIAL(self->obj), GDK_PIXBUF(pixbuf->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_gl_material_reset(PyGObject *self)
{
    
    gwy_gl_material_reset(GWY_GL_MATERIAL(self->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static const PyMethodDef _PyGwyGLMaterial_methods[] = {
    { "get_ambient", (PyCFunction)_wrap_gwy_gl_material_get_ambient, METH_NOARGS,
      NULL },
    { "set_ambient", (PyCFunction)_wrap_gwy_gl_material_set_ambient, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_diffuse", (PyCFunction)_wrap_gwy_gl_material_get_diffuse, METH_NOARGS,
      NULL },
    { "set_diffuse", (PyCFunction)_wrap_gwy_gl_material_set_diffuse, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_specular", (PyCFunction)_wrap_gwy_gl_material_get_specular, METH_NOARGS,
      NULL },
    { "set_specular", (PyCFunction)_wrap_gwy_gl_material_set_specular, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_emission", (PyCFunction)_wrap_gwy_gl_material_get_emission, METH_NOARGS,
      NULL },
    { "set_emission", (PyCFunction)_wrap_gwy_gl_material_set_emission, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_shininess", (PyCFunction)_wrap_gwy_gl_material_get_shininess, METH_NOARGS,
      NULL },
    { "set_shininess", (PyCFunction)_wrap_gwy_gl_material_set_shininess, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "sample_to_pixbuf", (PyCFunction)_wrap_gwy_gl_material_sample_to_pixbuf, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "reset", (PyCFunction)_wrap_gwy_gl_material_reset, METH_NOARGS,
      NULL },
    { NULL, NULL, 0, NULL }
};

PyTypeObject G_GNUC_INTERNAL PyGwyGLMaterial_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "gwy.GLMaterial",                   /* tp_name */
    sizeof(PyGObject),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)0,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    offsetof(PyGObject, weakreflist),             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyGwyGLMaterial_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    offsetof(PyGObject, inst_dict),                 /* tp_dictoffset */
    (initproc)0,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)0,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0              /* tp_is_gc */
};



/* ----------- GwyCDLine ----------- */

static PyObject *
_wrap_gwy_cdline_get_name(PyGObject *self)
{
    const gchar *ret;

    
    ret = gwy_cdline_get_name(GWY_CDLINE(self->obj));
    
    if (ret)
        return PyString_FromString(ret);
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_cdline_get_definition(PyGObject *self)
{
    const gchar *ret;

    
    ret = gwy_cdline_get_definition(GWY_CDLINE(self->obj));
    
    if (ret)
        return PyString_FromString(ret);
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_cdline_get_param_name(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "param", NULL };
    int param;
    const gchar *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:GwyCDLine.get_param_name", kwlist, &param))
        return NULL;
    
    ret = gwy_cdline_get_param_name(GWY_CDLINE(self->obj), param);
    
    if (ret)
        return PyString_FromString(ret);
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_cdline_get_param_default(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "param", NULL };
    int param;
    double ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:GwyCDLine.get_param_default", kwlist, &param))
        return NULL;
    
    ret = gwy_cdline_get_param_default(GWY_CDLINE(self->obj), param);
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_cdline_get_param_units(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "param", "siunit_x", "siunit_y", NULL };
    int param;
    PyGObject *siunit_x, *siunit_y;
    GwySIUnit *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iO!O!:GwyCDLine.get_param_units", kwlist, &param, &PyGwySIUnit_Type, &siunit_x, &PyGwySIUnit_Type, &siunit_y))
        return NULL;
    
    ret = gwy_cdline_get_param_units(GWY_CDLINE(self->obj), param, GWY_SI_UNIT(siunit_x->obj), GWY_SI_UNIT(siunit_y->obj));
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_cdline_get_nparams(PyGObject *self)
{
    int ret;

    
    ret = gwy_cdline_get_nparams(GWY_CDLINE(self->obj));
    
    return PyInt_FromLong(ret);
}

static const PyMethodDef _PyGwyCDLine_methods[] = {
    { "get_name", (PyCFunction)_wrap_gwy_cdline_get_name, METH_NOARGS,
      NULL },
    { "get_definition", (PyCFunction)_wrap_gwy_cdline_get_definition, METH_NOARGS,
      NULL },
    { "get_param_name", (PyCFunction)_wrap_gwy_cdline_get_param_name, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_param_default", (PyCFunction)_wrap_gwy_cdline_get_param_default, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_param_units", (PyCFunction)_wrap_gwy_cdline_get_param_units, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_nparams", (PyCFunction)_wrap_gwy_cdline_get_nparams, METH_NOARGS,
      NULL },
    { NULL, NULL, 0, NULL }
};

PyTypeObject G_GNUC_INTERNAL PyGwyCDLine_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "gwy.CDLine",                   /* tp_name */
    sizeof(PyGObject),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)0,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    offsetof(PyGObject, weakreflist),             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyGwyCDLine_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    offsetof(PyGObject, inst_dict),                 /* tp_dictoffset */
    (initproc)0,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)0,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0              /* tp_is_gc */
};



/* ----------- GwyResourceEditor ----------- */

static PyObject *
_wrap_gwy_resource_editor_get_edited(PyGObject *self)
{
    GwyResource *ret;

    
    ret = gwy_resource_editor_get_edited(GWY_RESOURCE_EDITOR(self->obj));
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_resource_editor_queue_commit(PyGObject *self)
{
    
    gwy_resource_editor_queue_commit(GWY_RESOURCE_EDITOR(self->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_resource_editor_commit(PyGObject *self)
{
    int ret;

    
    ret = gwy_resource_editor_commit(GWY_RESOURCE_EDITOR(self->obj));
    
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_resource_editor_setup(PyGObject *self)
{
    
    gwy_resource_editor_setup(GWY_RESOURCE_EDITOR(self->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static const PyMethodDef _PyGwyResourceEditor_methods[] = {
    { "get_edited", (PyCFunction)_wrap_gwy_resource_editor_get_edited, METH_NOARGS,
      NULL },
    { "queue_commit", (PyCFunction)_wrap_gwy_resource_editor_queue_commit, METH_NOARGS,
      NULL },
    { "commit", (PyCFunction)_wrap_gwy_resource_editor_commit, METH_NOARGS,
      NULL },
    { "setup", (PyCFunction)_wrap_gwy_resource_editor_setup, METH_NOARGS,
      NULL },
    { NULL, NULL, 0, NULL }
};

PyTypeObject G_GNUC_INTERNAL PyGwyResourceEditor_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "gwy.ResourceEditor",                   /* tp_name */
    sizeof(PyGObject),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)0,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    offsetof(PyGObject, weakreflist),             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyGwyResourceEditor_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    offsetof(PyGObject, inst_dict),                 /* tp_dictoffset */
    (initproc)0,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)0,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0              /* tp_is_gc */
};



/* ----------- GwyRuler ----------- */

static PyObject *
_wrap_gwy_ruler_set_range(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "lower", "upper", "position", "max_size", NULL };
    double lower, upper, position, max_size;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"dddd:GwyRuler.set_range", kwlist, &lower, &upper, &position, &max_size))
        return NULL;
    
    gwy_ruler_set_range(GWY_RULER(self->obj), lower, upper, position, max_size);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_ruler_draw_pos(PyGObject *self)
{
    
    gwy_ruler_draw_pos(GWY_RULER(self->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_ruler_get_range(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "lower", "upper", "position", "max_size", NULL };
    PyObject *lower_pyobj, *upper_pyobj, *position_pyobj, *max_size_pyobj;
    GDoubleValue lower, upper, position, max_size;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"OOOO:GwyRuler.get_range", kwlist, &lower_pyobj, &upper_pyobj, &position_pyobj, &max_size_pyobj))
        return NULL;
    if (!PyFloat_Check(lower_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'lower' must be a float variable");
        return NULL;
    }
    lower = PyFloat_AsDouble(lower_pyobj);
    if (!PyFloat_Check(upper_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'upper' must be a float variable");
        return NULL;
    }
    upper = PyFloat_AsDouble(upper_pyobj);
    if (!PyFloat_Check(position_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'position' must be a float variable");
        return NULL;
    }
    position = PyFloat_AsDouble(position_pyobj);
    if (!PyFloat_Check(max_size_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'max_size' must be a float variable");
        return NULL;
    }
    max_size = PyFloat_AsDouble(max_size_pyobj);
    
    gwy_ruler_get_range(GWY_RULER(self->obj), &lower, &upper, &position, &max_size);
    
    ((PyFloatObject *) lower_pyobj)->ob_fval = lower;
    ((PyFloatObject *) upper_pyobj)->ob_fval = upper;
    ((PyFloatObject *) position_pyobj)->ob_fval = position;
    ((PyFloatObject *) max_size_pyobj)->ob_fval = max_size;
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_ruler_set_si_unit(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "units", NULL };
    PyGObject *units;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:GwyRuler.set_si_unit", kwlist, &PyGwySIUnit_Type, &units))
        return NULL;
    
    gwy_ruler_set_si_unit(GWY_RULER(self->obj), GWY_SI_UNIT(units->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_ruler_get_si_unit(PyGObject *self)
{
    GwySIUnit *ret;

    
    ret = gwy_ruler_get_si_unit(GWY_RULER(self->obj));
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_ruler_get_units_placement(PyGObject *self)
{
    gint ret;

    
    ret = gwy_ruler_get_units_placement(GWY_RULER(self->obj));
    
    return pyg_enum_from_gtype(GWY_TYPE_UNITS_PLACEMENT, ret);
}

static PyObject *
_wrap_gwy_ruler_set_units_placement(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "placement", NULL };
    GwyUnitsPlacement placement;
    PyObject *py_placement = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O:GwyRuler.set_units_placement", kwlist, &py_placement))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_UNITS_PLACEMENT, py_placement, (gpointer)&placement))
        return NULL;
    
    gwy_ruler_set_units_placement(GWY_RULER(self->obj), placement);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static const PyMethodDef _PyGwyRuler_methods[] = {
    { "set_range", (PyCFunction)_wrap_gwy_ruler_set_range, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "draw_pos", (PyCFunction)_wrap_gwy_ruler_draw_pos, METH_NOARGS,
      NULL },
    { "get_range", (PyCFunction)_wrap_gwy_ruler_get_range, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "set_si_unit", (PyCFunction)_wrap_gwy_ruler_set_si_unit, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_si_unit", (PyCFunction)_wrap_gwy_ruler_get_si_unit, METH_NOARGS,
      NULL },
    { "get_units_placement", (PyCFunction)_wrap_gwy_ruler_get_units_placement, METH_NOARGS,
      NULL },
    { "set_units_placement", (PyCFunction)_wrap_gwy_ruler_set_units_placement, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

PyTypeObject G_GNUC_INTERNAL PyGwyRuler_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "gwy.Ruler",                   /* tp_name */
    sizeof(PyGObject),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)0,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    offsetof(PyGObject, weakreflist),             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyGwyRuler_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    offsetof(PyGObject, inst_dict),                 /* tp_dictoffset */
    (initproc)0,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)0,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0              /* tp_is_gc */
};



/* ----------- GwyHRuler ----------- */

PyTypeObject G_GNUC_INTERNAL PyGwyHRuler_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "gwy.HRuler",                   /* tp_name */
    sizeof(PyGObject),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)0,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    offsetof(PyGObject, weakreflist),             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    offsetof(PyGObject, inst_dict),                 /* tp_dictoffset */
    (initproc)0,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)0,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0              /* tp_is_gc */
};



/* ----------- GwySIUnit ----------- */

static PyObject *
_wrap_gwy_si_unit_set_from_string(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "unit_string", NULL };
    char *unit_string;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:GwySIUnit.set_from_string", kwlist, &unit_string))
        return NULL;
    
    gwy_si_unit_set_from_string(GWY_SI_UNIT(self->obj), unit_string);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_si_unit_set_from_string_parse(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "unit_string", "power10", NULL };
    char *unit_string;
    PyObject *power10_pyobj;
    GIntValue power10;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"sO:GwySIUnit.set_from_string_parse", kwlist, &unit_string, &power10_pyobj))
        return NULL;
    if (!PyInt_Check(power10_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'power10' must be an integer variable");
        return NULL;
    }
    power10 = (int) PyInt_AsLong(power10_pyobj);
    
    gwy_si_unit_set_from_string_parse(GWY_SI_UNIT(self->obj), unit_string, &power10);
    
    ((PyIntObject *) power10_pyobj)->ob_ival = power10;
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_si_unit_get_string(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "style", NULL };
    PyObject *py_style = NULL;
    gchar *ret;
    GwySIUnitFormatStyle style;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O:GwySIUnit.get_string", kwlist, &py_style))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_SI_UNIT_FORMAT_STYLE, py_style, (gpointer)&style))
        return NULL;
    
    ret = gwy_si_unit_get_string(GWY_SI_UNIT(self->obj), style);
    
    if (ret) {
        PyObject *py_ret = PyString_FromString(ret);
        g_free(ret);
        return py_ret;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_si_unit_multiply(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "siunit2", "result", NULL };
    PyGObject *siunit2, *result;
    GwySIUnit *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!:GwySIUnit.multiply", kwlist, &PyGwySIUnit_Type, &siunit2, &PyGwySIUnit_Type, &result))
        return NULL;
    
    ret = gwy_si_unit_multiply(GWY_SI_UNIT(self->obj), GWY_SI_UNIT(siunit2->obj), GWY_SI_UNIT(result->obj));
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_si_unit_divide(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "siunit2", "result", NULL };
    PyGObject *siunit2, *result;
    GwySIUnit *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!:GwySIUnit.divide", kwlist, &PyGwySIUnit_Type, &siunit2, &PyGwySIUnit_Type, &result))
        return NULL;
    
    ret = gwy_si_unit_divide(GWY_SI_UNIT(self->obj), GWY_SI_UNIT(siunit2->obj), GWY_SI_UNIT(result->obj));
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_si_unit_power(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "power", "result", NULL };
    int power;
    PyGObject *result;
    GwySIUnit *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iO!:GwySIUnit.power", kwlist, &power, &PyGwySIUnit_Type, &result))
        return NULL;
    
    ret = gwy_si_unit_power(GWY_SI_UNIT(self->obj), power, GWY_SI_UNIT(result->obj));
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_si_unit_nth_root(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "ipower", "result", NULL };
    int ipower;
    PyGObject *result;
    GwySIUnit *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iO!:GwySIUnit.nth_root", kwlist, &ipower, &PyGwySIUnit_Type, &result))
        return NULL;
    
    ret = gwy_si_unit_nth_root(GWY_SI_UNIT(self->obj), ipower, GWY_SI_UNIT(result->obj));
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_si_unit_power_multiply(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "power1", "siunit2", "power2", "result", NULL };
    int power1, power2;
    PyGObject *siunit2, *result;
    GwySIUnit *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iO!iO!:GwySIUnit.power_multiply", kwlist, &power1, &PyGwySIUnit_Type, &siunit2, &power2, &PyGwySIUnit_Type, &result))
        return NULL;
    
    ret = gwy_si_unit_power_multiply(GWY_SI_UNIT(self->obj), power1, GWY_SI_UNIT(siunit2->obj), power2, GWY_SI_UNIT(result->obj));
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_si_unit_equal(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "siunit2", NULL };
    PyGObject *siunit2;
    int ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:GwySIUnit.equal", kwlist, &PyGwySIUnit_Type, &siunit2))
        return NULL;
    
    ret = gwy_si_unit_equal(GWY_SI_UNIT(self->obj), GWY_SI_UNIT(siunit2->obj));
    
    return PyBool_FromLong(ret);

}

static const PyMethodDef _PyGwySIUnit_methods[] = {
    { "set_from_string", (PyCFunction)_wrap_gwy_si_unit_set_from_string, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "set_from_string_parse", (PyCFunction)_wrap_gwy_si_unit_set_from_string_parse, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_string", (PyCFunction)_wrap_gwy_si_unit_get_string, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "multiply", (PyCFunction)_wrap_gwy_si_unit_multiply, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "divide", (PyCFunction)_wrap_gwy_si_unit_divide, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "power", (PyCFunction)_wrap_gwy_si_unit_power, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "nth_root", (PyCFunction)_wrap_gwy_si_unit_nth_root, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "power_multiply", (PyCFunction)_wrap_gwy_si_unit_power_multiply, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "equal", (PyCFunction)_wrap_gwy_si_unit_equal, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

PyTypeObject G_GNUC_INTERNAL PyGwySIUnit_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "gwy.SIUnit",                   /* tp_name */
    sizeof(PyGObject),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)0,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    offsetof(PyGObject, weakreflist),             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyGwySIUnit_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    offsetof(PyGObject, inst_dict),                 /* tp_dictoffset */
    (initproc)0,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)0,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0              /* tp_is_gc */
};



/* ----------- GwySciText ----------- */

static int
_wrap_gwy_sci_text_new(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char* kwlist[] = { NULL };

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,
                                     ":gwy.SciText.__init__",
                                     kwlist))
        return -1;

    pygobject_constructv(self, 0, NULL);
    if (!self->obj) {
        PyErr_SetString(
            PyExc_RuntimeError, 
            "could not create gwy.SciText object");
        return -1;
    }
    return 0;
}

static PyObject *
_wrap_gwy_sci_text_get_text(PyGObject *self)
{
    gchar *ret;

    
    ret = gwy_sci_text_get_text(GWY_SCI_TEXT(self->obj));
    
    if (ret) {
        PyObject *py_ret = PyString_FromString(ret);
        g_free(ret);
        return py_ret;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_sci_text_set_text(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "new_text", NULL };
    char *new_text;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:GwySciText.set_text", kwlist, &new_text))
        return NULL;
    
    gwy_sci_text_set_text(GWY_SCI_TEXT(self->obj), new_text);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_sci_text_get_has_preview(PyGObject *self)
{
    int ret;

    
    ret = gwy_sci_text_get_has_preview(GWY_SCI_TEXT(self->obj));
    
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_sci_text_set_has_preview(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "has_preview", NULL };
    int has_preview;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:GwySciText.set_has_preview", kwlist, &has_preview))
        return NULL;
    
    gwy_sci_text_set_has_preview(GWY_SCI_TEXT(self->obj), has_preview);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_sci_text_get_entry(PyGObject *self)
{
    GtkWidget *ret;

    
    ret = gwy_sci_text_get_entry(GWY_SCI_TEXT(self->obj));
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static const PyMethodDef _PyGwySciText_methods[] = {
    { "get_text", (PyCFunction)_wrap_gwy_sci_text_get_text, METH_NOARGS,
      NULL },
    { "set_text", (PyCFunction)_wrap_gwy_sci_text_set_text, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_has_preview", (PyCFunction)_wrap_gwy_sci_text_get_has_preview, METH_NOARGS,
      NULL },
    { "set_has_preview", (PyCFunction)_wrap_gwy_sci_text_set_has_preview, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_entry", (PyCFunction)_wrap_gwy_sci_text_get_entry, METH_NOARGS,
      NULL },
    { NULL, NULL, 0, NULL }
};

PyTypeObject G_GNUC_INTERNAL PyGwySciText_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "gwy.SciText",                   /* tp_name */
    sizeof(PyGObject),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)0,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    offsetof(PyGObject, weakreflist),             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyGwySciText_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    offsetof(PyGObject, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_gwy_sci_text_new,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)0,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0              /* tp_is_gc */
};



/* ----------- GwySelection ----------- */

static PyObject *
_wrap_gwy_selection_get_object_size(PyGObject *self)
{
    guint ret;

    
    ret = gwy_selection_get_object_size(GWY_SELECTION(self->obj));
    
    return PyLong_FromUnsignedLong(ret);
}

static PyObject *
_wrap_gwy_selection_clear(PyGObject *self)
{
    
    gwy_selection_clear(GWY_SELECTION(self->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_selection_set_object(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "i", "data", NULL };
    int i, i_data, ret;
    PyObject *data_pyobj;
    gdouble *data;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iO:GwySelection.set_object", kwlist, &i, &data_pyobj))
        return NULL;
    if (!PyList_Check(data_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'data' must be a list of floats");
        return NULL;
    }
    data =  g_malloc(sizeof(gdouble)*PyList_Size(data_pyobj));
    if (data == NULL) {
        return PyErr_NoMemory();
    }
    for (i_data = 0; i_data < PyList_Size(data_pyobj); i_data++) {
        if (!PyFloat_Check(PyList_GetItem(data_pyobj, i_data))) {
            g_free(data);
            PyErr_SetString(PyExc_TypeError, "Parameter 'data' must be a list of floats");
            return NULL;
        }
        data[i_data] = PyFloat_AsDouble(PyList_GetItem(data_pyobj, i_data));
    }
    
    ret = gwy_selection_set_object(GWY_SELECTION(self->obj), i, data);
    
    g_free(data);
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_gwy_selection_delete_object(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "i", NULL };
    int i;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:GwySelection.delete_object", kwlist, &i))
        return NULL;
    
    gwy_selection_delete_object(GWY_SELECTION(self->obj), i);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_selection_set_data(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "nselected", "data", NULL };
    int nselected, i_data;
    PyObject *data_pyobj;
    gdouble *data;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iO:GwySelection.set_data", kwlist, &nselected, &data_pyobj))
        return NULL;
    if (!PyList_Check(data_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'data' must be a list of floats");
        return NULL;
    }
    data =  g_malloc(sizeof(gdouble)*PyList_Size(data_pyobj));
    if (data == NULL) {
        return PyErr_NoMemory();
    }
    for (i_data = 0; i_data < PyList_Size(data_pyobj); i_data++) {
        if (!PyFloat_Check(PyList_GetItem(data_pyobj, i_data))) {
            g_free(data);
            PyErr_SetString(PyExc_TypeError, "Parameter 'data' must be a list of floats");
            return NULL;
        }
        data[i_data] = PyFloat_AsDouble(PyList_GetItem(data_pyobj, i_data));
    }
    
    gwy_selection_set_data(GWY_SELECTION(self->obj), nselected, data);
    
    g_free(data);
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_selection_get_max_objects(PyGObject *self)
{
    guint ret;

    
    ret = gwy_selection_get_max_objects(GWY_SELECTION(self->obj));
    
    return PyLong_FromUnsignedLong(ret);
}

static PyObject *
_wrap_gwy_selection_set_max_objects(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "max_objects", NULL };
    PyObject *py_max_objects = NULL;
    guint max_objects = 0;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O:GwySelection.set_max_objects", kwlist, &py_max_objects))
        return NULL;
    if (py_max_objects) {
        if (PyLong_Check(py_max_objects))
            max_objects = PyLong_AsUnsignedLong(py_max_objects);
        else if (PyInt_Check(py_max_objects))
            max_objects = PyInt_AsLong(py_max_objects);
        else
            PyErr_SetString(PyExc_TypeError, "Parameter 'max_objects' must be an int or a long");
        if (PyErr_Occurred())
            return NULL;
    }
    
    gwy_selection_set_max_objects(GWY_SELECTION(self->obj), max_objects);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_selection_is_full(PyGObject *self)
{
    int ret;

    
    ret = gwy_selection_is_full(GWY_SELECTION(self->obj));
    
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_selection_changed(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "i", NULL };
    int i;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:GwySelection.changed", kwlist, &i))
        return NULL;
    
    gwy_selection_changed(GWY_SELECTION(self->obj), i);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_selection_finished(PyGObject *self)
{
    
    gwy_selection_finished(GWY_SELECTION(self->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_selection_get_data_wrap(PyGObject *self)
{
    PyObject *py_ret;
    GArray *ret;
    gint i_ret;

    
    ret = gwy_selection_get_data_wrap(GWY_SELECTION(self->obj));
    
    py_ret = PyList_New(ret->len);
    for (i_ret = 0; i_ret < ret->len; i_ret++) {
        PyList_SetItem(py_ret, i_ret, PyFloat_FromDouble(g_array_index(ret, gdouble, i_ret)));
    }
    g_array_free(ret, TRUE);
    return py_ret;

}

static const PyMethodDef _PyGwySelection_methods[] = {
    { "get_object_size", (PyCFunction)_wrap_gwy_selection_get_object_size, METH_NOARGS,
      NULL },
    { "clear", (PyCFunction)_wrap_gwy_selection_clear, METH_NOARGS,
      NULL },
    { "set_object", (PyCFunction)_wrap_gwy_selection_set_object, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "delete_object", (PyCFunction)_wrap_gwy_selection_delete_object, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "set_data", (PyCFunction)_wrap_gwy_selection_set_data, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_max_objects", (PyCFunction)_wrap_gwy_selection_get_max_objects, METH_NOARGS,
      NULL },
    { "set_max_objects", (PyCFunction)_wrap_gwy_selection_set_max_objects, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "is_full", (PyCFunction)_wrap_gwy_selection_is_full, METH_NOARGS,
      NULL },
    { "changed", (PyCFunction)_wrap_gwy_selection_changed, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "finished", (PyCFunction)_wrap_gwy_selection_finished, METH_NOARGS,
      NULL },
    { "get_data", (PyCFunction)_wrap_gwy_selection_get_data_wrap, METH_NOARGS,
      NULL },
    { NULL, NULL, 0, NULL }
};

PyTypeObject G_GNUC_INTERNAL PyGwySelection_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "gwy.Selection",                   /* tp_name */
    sizeof(PyGObject),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)0,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    offsetof(PyGObject, weakreflist),             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyGwySelection_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    offsetof(PyGObject, inst_dict),                 /* tp_dictoffset */
    (initproc)0,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)0,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0              /* tp_is_gc */
};



/* ----------- GwySelectionGraph1DArea ----------- */

PyTypeObject G_GNUC_INTERNAL PyGwySelectionGraph1DArea_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "gwy.SelectionGraph1DArea",                   /* tp_name */
    sizeof(PyGObject),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)0,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    offsetof(PyGObject, weakreflist),             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    offsetof(PyGObject, inst_dict),                 /* tp_dictoffset */
    (initproc)0,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)0,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0              /* tp_is_gc */
};



/* ----------- GwySelectionGraphArea ----------- */

static int
_wrap_gwy_selection_graph_area_new(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char* kwlist[] = { NULL };

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,
                                     ":gwy.SelectionGraphArea.__init__",
                                     kwlist))
        return -1;

    pygobject_constructv(self, 0, NULL);
    if (!self->obj) {
        PyErr_SetString(
            PyExc_RuntimeError, 
            "could not create gwy.SelectionGraphArea object");
        return -1;
    }
    return 0;
}

PyTypeObject G_GNUC_INTERNAL PyGwySelectionGraphArea_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "gwy.SelectionGraphArea",                   /* tp_name */
    sizeof(PyGObject),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)0,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    offsetof(PyGObject, weakreflist),             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    offsetof(PyGObject, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_gwy_selection_graph_area_new,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)0,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0              /* tp_is_gc */
};



/* ----------- GwySelectionGraphLine ----------- */

static int
_wrap_gwy_selection_graph_line_new(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char* kwlist[] = { NULL };

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,
                                     ":gwy.SelectionGraphLine.__init__",
                                     kwlist))
        return -1;

    pygobject_constructv(self, 0, NULL);
    if (!self->obj) {
        PyErr_SetString(
            PyExc_RuntimeError, 
            "could not create gwy.SelectionGraphLine object");
        return -1;
    }
    return 0;
}

PyTypeObject G_GNUC_INTERNAL PyGwySelectionGraphLine_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "gwy.SelectionGraphLine",                   /* tp_name */
    sizeof(PyGObject),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)0,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    offsetof(PyGObject, weakreflist),             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    offsetof(PyGObject, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_gwy_selection_graph_line_new,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)0,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0              /* tp_is_gc */
};



/* ----------- GwySelectionGraphPoint ----------- */

static int
_wrap_gwy_selection_graph_point_new(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char* kwlist[] = { NULL };

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,
                                     ":gwy.SelectionGraphPoint.__init__",
                                     kwlist))
        return -1;

    pygobject_constructv(self, 0, NULL);
    if (!self->obj) {
        PyErr_SetString(
            PyExc_RuntimeError, 
            "could not create gwy.SelectionGraphPoint object");
        return -1;
    }
    return 0;
}

PyTypeObject G_GNUC_INTERNAL PyGwySelectionGraphPoint_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "gwy.SelectionGraphPoint",                   /* tp_name */
    sizeof(PyGObject),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)0,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    offsetof(PyGObject, weakreflist),             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    offsetof(PyGObject, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_gwy_selection_graph_point_new,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)0,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0              /* tp_is_gc */
};



/* ----------- GwySelectionGraphZoom ----------- */

static int
_wrap_gwy_selection_graph_zoom_new(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char* kwlist[] = { NULL };

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,
                                     ":gwy.SelectionGraphZoom.__init__",
                                     kwlist))
        return -1;

    pygobject_constructv(self, 0, NULL);
    if (!self->obj) {
        PyErr_SetString(
            PyExc_RuntimeError, 
            "could not create gwy.SelectionGraphZoom object");
        return -1;
    }
    return 0;
}

PyTypeObject G_GNUC_INTERNAL PyGwySelectionGraphZoom_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "gwy.SelectionGraphZoom",                   /* tp_name */
    sizeof(PyGObject),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)0,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    offsetof(PyGObject, weakreflist),             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    offsetof(PyGObject, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_gwy_selection_graph_zoom_new,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)0,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0              /* tp_is_gc */
};



/* ----------- GwySensitivityGroup ----------- */

static int
_wrap_gwy_sensitivity_group_new(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char* kwlist[] = { NULL };

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,
                                     ":gwy.SensitivityGroup.__init__",
                                     kwlist))
        return -1;

    pygobject_constructv(self, 0, NULL);
    if (!self->obj) {
        PyErr_SetString(
            PyExc_RuntimeError, 
            "could not create gwy.SensitivityGroup object");
        return -1;
    }
    return 0;
}

static PyObject *
_wrap_gwy_sensitivity_group_add_widget(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "widget", "mask", NULL };
    PyGObject *widget;
    PyObject *py_mask = NULL;
    guint mask = 0;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O:GwySensitivityGroup.add_widget", kwlist, &PyGtkWidget_Type, &widget, &py_mask))
        return NULL;
    if (py_mask) {
        if (PyLong_Check(py_mask))
            mask = PyLong_AsUnsignedLong(py_mask);
        else if (PyInt_Check(py_mask))
            mask = PyInt_AsLong(py_mask);
        else
            PyErr_SetString(PyExc_TypeError, "Parameter 'mask' must be an int or a long");
        if (PyErr_Occurred())
            return NULL;
    }
    
    gwy_sensitivity_group_add_widget(GWY_SENSITIVITY_GROUP(self->obj), GTK_WIDGET(widget->obj), mask);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_sensitivity_group_set_state(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "affected_mask", "state", NULL };
    PyObject *py_affected_mask = NULL, *py_state = NULL;
    guint affected_mask = 0, state = 0;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"OO:GwySensitivityGroup.set_state", kwlist, &py_affected_mask, &py_state))
        return NULL;
    if (py_affected_mask) {
        if (PyLong_Check(py_affected_mask))
            affected_mask = PyLong_AsUnsignedLong(py_affected_mask);
        else if (PyInt_Check(py_affected_mask))
            affected_mask = PyInt_AsLong(py_affected_mask);
        else
            PyErr_SetString(PyExc_TypeError, "Parameter 'affected_mask' must be an int or a long");
        if (PyErr_Occurred())
            return NULL;
    }
    if (py_state) {
        if (PyLong_Check(py_state))
            state = PyLong_AsUnsignedLong(py_state);
        else if (PyInt_Check(py_state))
            state = PyInt_AsLong(py_state);
        else
            PyErr_SetString(PyExc_TypeError, "Parameter 'state' must be an int or a long");
        if (PyErr_Occurred())
            return NULL;
    }
    
    gwy_sensitivity_group_set_state(GWY_SENSITIVITY_GROUP(self->obj), affected_mask, state);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_sensitivity_group_get_state(PyGObject *self)
{
    guint ret;

    
    ret = gwy_sensitivity_group_get_state(GWY_SENSITIVITY_GROUP(self->obj));
    
    return PyLong_FromUnsignedLong(ret);
}

static PyObject *
_wrap_gwy_sensitivity_group_release_widget(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "widget", NULL };
    PyGObject *widget;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:GwySensitivityGroup.release_widget", kwlist, &PyGtkWidget_Type, &widget))
        return NULL;
    
    gwy_sensitivity_group_release_widget(GWY_SENSITIVITY_GROUP(self->obj), GTK_WIDGET(widget->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_sensitivity_group_get_widget_mask(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "widget", NULL };
    PyGObject *widget;
    guint ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:GwySensitivityGroup.get_widget_mask", kwlist, &PyGtkWidget_Type, &widget))
        return NULL;
    
    ret = gwy_sensitivity_group_get_widget_mask(GWY_SENSITIVITY_GROUP(self->obj), GTK_WIDGET(widget->obj));
    
    return PyLong_FromUnsignedLong(ret);
}

static PyObject *
_wrap_gwy_sensitivity_group_set_widget_mask(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "widget", "mask", NULL };
    PyGObject *widget;
    PyObject *py_mask = NULL;
    guint mask = 0;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O:GwySensitivityGroup.set_widget_mask", kwlist, &PyGtkWidget_Type, &widget, &py_mask))
        return NULL;
    if (py_mask) {
        if (PyLong_Check(py_mask))
            mask = PyLong_AsUnsignedLong(py_mask);
        else if (PyInt_Check(py_mask))
            mask = PyInt_AsLong(py_mask);
        else
            PyErr_SetString(PyExc_TypeError, "Parameter 'mask' must be an int or a long");
        if (PyErr_Occurred())
            return NULL;
    }
    
    gwy_sensitivity_group_set_widget_mask(GWY_SENSITIVITY_GROUP(self->obj), GTK_WIDGET(widget->obj), mask);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static const PyMethodDef _PyGwySensitivityGroup_methods[] = {
    { "add_widget", (PyCFunction)_wrap_gwy_sensitivity_group_add_widget, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "set_state", (PyCFunction)_wrap_gwy_sensitivity_group_set_state, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_state", (PyCFunction)_wrap_gwy_sensitivity_group_get_state, METH_NOARGS,
      NULL },
    { "release_widget", (PyCFunction)_wrap_gwy_sensitivity_group_release_widget, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_widget_mask", (PyCFunction)_wrap_gwy_sensitivity_group_get_widget_mask, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "set_widget_mask", (PyCFunction)_wrap_gwy_sensitivity_group_set_widget_mask, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

PyTypeObject G_GNUC_INTERNAL PyGwySensitivityGroup_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "gwy.SensitivityGroup",                   /* tp_name */
    sizeof(PyGObject),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)0,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    offsetof(PyGObject, weakreflist),             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyGwySensitivityGroup_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    offsetof(PyGObject, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_gwy_sensitivity_group_new,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)0,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0              /* tp_is_gc */
};



/* ----------- GwyShader ----------- */

static int
_wrap_gwy_shader_new(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "gradient", NULL };
    char *gradient;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:GwyShader.__init__", kwlist, &gradient))
        return -1;
    self->obj = (GObject *)gwy_shader_new(gradient);

    if (!self->obj) {
        PyErr_SetString(PyExc_RuntimeError, "could not create GwyShader object");
        return -1;
    }
    pygobject_register_wrapper((PyObject *)self);
    return 0;
}

static PyObject *
_wrap_gwy_shader_get_theta(PyGObject *self)
{
    double ret;

    
    ret = gwy_shader_get_theta(GWY_SHADER(self->obj));
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_shader_get_phi(PyGObject *self)
{
    double ret;

    
    ret = gwy_shader_get_phi(GWY_SHADER(self->obj));
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_shader_set_theta(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "theta", NULL };
    double theta;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"d:GwyShader.set_theta", kwlist, &theta))
        return NULL;
    
    gwy_shader_set_theta(GWY_SHADER(self->obj), theta);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_shader_set_phi(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "phi", NULL };
    double phi;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"d:GwyShader.set_phi", kwlist, &phi))
        return NULL;
    
    gwy_shader_set_phi(GWY_SHADER(self->obj), phi);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_shader_set_angle(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "theta", "phi", NULL };
    double theta, phi;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"dd:GwyShader.set_angle", kwlist, &theta, &phi))
        return NULL;
    
    gwy_shader_set_angle(GWY_SHADER(self->obj), theta, phi);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_shader_get_gradient(PyGObject *self)
{
    const gchar *ret;

    
    ret = gwy_shader_get_gradient(GWY_SHADER(self->obj));
    
    if (ret)
        return PyString_FromString(ret);
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_shader_set_gradient(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "gradient", NULL };
    char *gradient;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:GwyShader.set_gradient", kwlist, &gradient))
        return NULL;
    
    gwy_shader_set_gradient(GWY_SHADER(self->obj), gradient);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_shader_get_update_policy(PyGObject *self)
{
    gint ret;

    
    ret = gwy_shader_get_update_policy(GWY_SHADER(self->obj));
    
    return pyg_enum_from_gtype(GTK_TYPE_UPDATE_TYPE, ret);
}

static PyObject *
_wrap_gwy_shader_set_update_policy(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "update_policy", NULL };
    PyObject *py_update_policy = NULL;
    GtkUpdateType update_policy;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O:GwyShader.set_update_policy", kwlist, &py_update_policy))
        return NULL;
    if (pyg_enum_get_value(GTK_TYPE_UPDATE_TYPE, py_update_policy, (gpointer)&update_policy))
        return NULL;
    
    gwy_shader_set_update_policy(GWY_SHADER(self->obj), update_policy);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static const PyMethodDef _PyGwyShader_methods[] = {
    { "get_theta", (PyCFunction)_wrap_gwy_shader_get_theta, METH_NOARGS,
      NULL },
    { "get_phi", (PyCFunction)_wrap_gwy_shader_get_phi, METH_NOARGS,
      NULL },
    { "set_theta", (PyCFunction)_wrap_gwy_shader_set_theta, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "set_phi", (PyCFunction)_wrap_gwy_shader_set_phi, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "set_angle", (PyCFunction)_wrap_gwy_shader_set_angle, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_gradient", (PyCFunction)_wrap_gwy_shader_get_gradient, METH_NOARGS,
      NULL },
    { "set_gradient", (PyCFunction)_wrap_gwy_shader_set_gradient, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_update_policy", (PyCFunction)_wrap_gwy_shader_get_update_policy, METH_NOARGS,
      NULL },
    { "set_update_policy", (PyCFunction)_wrap_gwy_shader_set_update_policy, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

PyTypeObject G_GNUC_INTERNAL PyGwyShader_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "gwy.Shader",                   /* tp_name */
    sizeof(PyGObject),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)0,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    offsetof(PyGObject, weakreflist),             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyGwyShader_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    offsetof(PyGObject, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_gwy_shader_new,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)0,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0              /* tp_is_gc */
};



/* ----------- GwySpectra ----------- */

static int
_wrap_gwy_spectra_new(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char* kwlist[] = { NULL };

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,
                                     ":gwy.Spectra.__init__",
                                     kwlist))
        return -1;

    pygobject_constructv(self, 0, NULL);
    if (!self->obj) {
        PyErr_SetString(
            PyExc_RuntimeError, 
            "could not create gwy.Spectra object");
        return -1;
    }
    return 0;
}

static PyObject *
_wrap_gwy_spectra_new_alike(PyGObject *self)
{
    GwySpectra *ret;

    
    ret = gwy_spectra_new_alike(GWY_SPECTRA(self->obj));
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_spectra_data_changed(PyGObject *self)
{
    
    gwy_spectra_data_changed(GWY_SPECTRA(self->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_spectra_get_si_unit_xy(PyGObject *self)
{
    GwySIUnit *ret;

    
    ret = gwy_spectra_get_si_unit_xy(GWY_SPECTRA(self->obj));
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_spectra_set_si_unit_xy(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "si_unit", NULL };
    PyGObject *si_unit;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:GwySpectra.set_si_unit_xy", kwlist, &PyGwySIUnit_Type, &si_unit))
        return NULL;
    
    gwy_spectra_set_si_unit_xy(GWY_SPECTRA(self->obj), GWY_SI_UNIT(si_unit->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_spectra_xytoi(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "x", "y", NULL };
    int ret;
    double x, y;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"dd:GwySpectra.xytoi", kwlist, &x, &y))
        return NULL;
    
    ret = gwy_spectra_xytoi(GWY_SPECTRA(self->obj), x, y);
    
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_gwy_spectra_setpos(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "i", "x", "y", NULL };
    PyObject *py_i = NULL;
    double x, y;
    guint i = 0;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"Odd:GwySpectra.setpos", kwlist, &py_i, &x, &y))
        return NULL;
    if (py_i) {
        if (PyLong_Check(py_i))
            i = PyLong_AsUnsignedLong(py_i);
        else if (PyInt_Check(py_i))
            i = PyInt_AsLong(py_i);
        else
            PyErr_SetString(PyExc_TypeError, "Parameter 'i' must be an int or a long");
        if (PyErr_Occurred())
            return NULL;
    }
    
    gwy_spectra_setpos(GWY_SPECTRA(self->obj), i, x, y);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_spectra_get_n_spectra(PyGObject *self)
{
    guint ret;

    
    ret = gwy_spectra_get_n_spectra(GWY_SPECTRA(self->obj));
    
    return PyLong_FromUnsignedLong(ret);
}

static PyObject *
_wrap_gwy_spectra_get_spectrum(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "i", NULL };
    int i;
    GwyDataLine *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:GwySpectra.get_spectrum", kwlist, &i))
        return NULL;
    
    ret = gwy_spectra_get_spectrum(GWY_SPECTRA(self->obj), i);
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_spectra_set_spectrum(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "i", "new_spectrum", NULL };
    PyObject *py_i = NULL;
    PyGObject *new_spectrum;
    guint i = 0;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"OO!:GwySpectra.set_spectrum", kwlist, &py_i, &PyGwyDataLine_Type, &new_spectrum))
        return NULL;
    if (py_i) {
        if (PyLong_Check(py_i))
            i = PyLong_AsUnsignedLong(py_i);
        else if (PyInt_Check(py_i))
            i = PyInt_AsLong(py_i);
        else
            PyErr_SetString(PyExc_TypeError, "Parameter 'i' must be an int or a long");
        if (PyErr_Occurred())
            return NULL;
    }
    
    gwy_spectra_set_spectrum(GWY_SPECTRA(self->obj), i, GWY_DATA_LINE(new_spectrum->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_spectra_set_spectrum_selected(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "i", "selected", NULL };
    PyObject *py_i = NULL;
    int selected;
    guint i = 0;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"Oi:GwySpectra.set_spectrum_selected", kwlist, &py_i, &selected))
        return NULL;
    if (py_i) {
        if (PyLong_Check(py_i))
            i = PyLong_AsUnsignedLong(py_i);
        else if (PyInt_Check(py_i))
            i = PyInt_AsLong(py_i);
        else
            PyErr_SetString(PyExc_TypeError, "Parameter 'i' must be an int or a long");
        if (PyErr_Occurred())
            return NULL;
    }
    
    gwy_spectra_set_spectrum_selected(GWY_SPECTRA(self->obj), i, selected);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_spectra_get_spectrum_selected(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "i", NULL };
    PyObject *py_i = NULL;
    int ret;
    guint i = 0;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O:GwySpectra.get_spectrum_selected", kwlist, &py_i))
        return NULL;
    if (py_i) {
        if (PyLong_Check(py_i))
            i = PyLong_AsUnsignedLong(py_i);
        else if (PyInt_Check(py_i))
            i = PyInt_AsLong(py_i);
        else
            PyErr_SetString(PyExc_TypeError, "Parameter 'i' must be an int or a long");
        if (PyErr_Occurred())
            return NULL;
    }
    
    ret = gwy_spectra_get_spectrum_selected(GWY_SPECTRA(self->obj), i);
    
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_spectra_add_spectrum(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "new_spectrum", "x", "y", NULL };
    PyGObject *new_spectrum;
    double x, y;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!dd:GwySpectra.add_spectrum", kwlist, &PyGwyDataLine_Type, &new_spectrum, &x, &y))
        return NULL;
    
    gwy_spectra_add_spectrum(GWY_SPECTRA(self->obj), GWY_DATA_LINE(new_spectrum->obj), x, y);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_spectra_remove_spectrum(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "i", NULL };
    PyObject *py_i = NULL;
    guint i = 0;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O:GwySpectra.remove_spectrum", kwlist, &py_i))
        return NULL;
    if (py_i) {
        if (PyLong_Check(py_i))
            i = PyLong_AsUnsignedLong(py_i);
        else if (PyInt_Check(py_i))
            i = PyInt_AsLong(py_i);
        else
            PyErr_SetString(PyExc_TypeError, "Parameter 'i' must be an int or a long");
        if (PyErr_Occurred())
            return NULL;
    }
    
    gwy_spectra_remove_spectrum(GWY_SPECTRA(self->obj), i);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_spectra_get_title(PyGObject *self)
{
    const gchar *ret;

    
    ret = gwy_spectra_get_title(GWY_SPECTRA(self->obj));
    
    if (ret)
        return PyString_FromString(ret);
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_spectra_set_title(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "title", NULL };
    char *title;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:GwySpectra.set_title", kwlist, &title))
        return NULL;
    
    gwy_spectra_set_title(GWY_SPECTRA(self->obj), title);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_spectra_clear(PyGObject *self)
{
    
    gwy_spectra_clear(GWY_SPECTRA(self->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static const PyMethodDef _PyGwySpectra_methods[] = {
    { "new_alike", (PyCFunction)_wrap_gwy_spectra_new_alike, METH_NOARGS,
      NULL },
    { "data_changed", (PyCFunction)_wrap_gwy_spectra_data_changed, METH_NOARGS,
      NULL },
    { "get_si_unit_xy", (PyCFunction)_wrap_gwy_spectra_get_si_unit_xy, METH_NOARGS,
      NULL },
    { "set_si_unit_xy", (PyCFunction)_wrap_gwy_spectra_set_si_unit_xy, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "xytoi", (PyCFunction)_wrap_gwy_spectra_xytoi, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "setpos", (PyCFunction)_wrap_gwy_spectra_setpos, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_n_spectra", (PyCFunction)_wrap_gwy_spectra_get_n_spectra, METH_NOARGS,
      NULL },
    { "get_spectrum", (PyCFunction)_wrap_gwy_spectra_get_spectrum, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "set_spectrum", (PyCFunction)_wrap_gwy_spectra_set_spectrum, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "set_spectrum_selected", (PyCFunction)_wrap_gwy_spectra_set_spectrum_selected, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_spectrum_selected", (PyCFunction)_wrap_gwy_spectra_get_spectrum_selected, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "add_spectrum", (PyCFunction)_wrap_gwy_spectra_add_spectrum, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "remove_spectrum", (PyCFunction)_wrap_gwy_spectra_remove_spectrum, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_title", (PyCFunction)_wrap_gwy_spectra_get_title, METH_NOARGS,
      NULL },
    { "set_title", (PyCFunction)_wrap_gwy_spectra_set_title, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "clear", (PyCFunction)_wrap_gwy_spectra_clear, METH_NOARGS,
      NULL },
    { NULL, NULL, 0, NULL }
};

PyTypeObject G_GNUC_INTERNAL PyGwySpectra_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "gwy.Spectra",                   /* tp_name */
    sizeof(PyGObject),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)0,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    offsetof(PyGObject, weakreflist),             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyGwySpectra_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    offsetof(PyGObject, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_gwy_spectra_new,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)0,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0              /* tp_is_gc */
};



/* ----------- GwyStatusbar ----------- */

static int
_wrap_gwy_statusbar_new(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char* kwlist[] = { NULL };

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,
                                     ":gwy.Statusbar.__init__",
                                     kwlist))
        return -1;

    pygobject_constructv(self, 0, NULL);
    if (!self->obj) {
        PyErr_SetString(
            PyExc_RuntimeError, 
            "could not create gwy.Statusbar object");
        return -1;
    }
    return 0;
}

static PyObject *
_wrap_gwy_statusbar_set_markup(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "markup", NULL };
    char *markup;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:GwyStatusbar.set_markup", kwlist, &markup))
        return NULL;
    
    gwy_statusbar_set_markup(GWY_STATUSBAR(self->obj), markup);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static const PyMethodDef _PyGwyStatusbar_methods[] = {
    { "set_markup", (PyCFunction)_wrap_gwy_statusbar_set_markup, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

PyTypeObject G_GNUC_INTERNAL PyGwyStatusbar_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "gwy.Statusbar",                   /* tp_name */
    sizeof(PyGObject),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)0,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    offsetof(PyGObject, weakreflist),             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyGwyStatusbar_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    offsetof(PyGObject, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_gwy_statusbar_new,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)0,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0              /* tp_is_gc */
};



/* ----------- GwyStringList ----------- */

static int
_wrap_gwy_string_list_new(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char* kwlist[] = { NULL };

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,
                                     ":gwy.StringList.__init__",
                                     kwlist))
        return -1;

    pygobject_constructv(self, 0, NULL);
    if (!self->obj) {
        PyErr_SetString(
            PyExc_RuntimeError, 
            "could not create gwy.StringList object");
        return -1;
    }
    return 0;
}

static PyObject *
_wrap_gwy_string_list_append(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "string", NULL };
    char *string;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:GwyStringList.append", kwlist, &string))
        return NULL;
    
    gwy_string_list_append(GWY_STRING_LIST(self->obj), string);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_string_list_get_length(PyGObject *self)
{
    guint ret;

    
    ret = gwy_string_list_get_length(GWY_STRING_LIST(self->obj));
    
    return PyLong_FromUnsignedLong(ret);
}

static PyObject *
_wrap_gwy_string_list_get(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "i", NULL };
    PyObject *py_i = NULL;
    const gchar *ret;
    guint i = 0;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O:GwyStringList.get", kwlist, &py_i))
        return NULL;
    if (py_i) {
        if (PyLong_Check(py_i))
            i = PyLong_AsUnsignedLong(py_i);
        else if (PyInt_Check(py_i))
            i = PyInt_AsLong(py_i);
        else
            PyErr_SetString(PyExc_TypeError, "Parameter 'i' must be an int or a long");
        if (PyErr_Occurred())
            return NULL;
    }
    
    ret = gwy_string_list_get(GWY_STRING_LIST(self->obj), i);
    
    if (ret)
        return PyString_FromString(ret);
    Py_INCREF(Py_None);
    return Py_None;
}

static const PyMethodDef _PyGwyStringList_methods[] = {
    { "append", (PyCFunction)_wrap_gwy_string_list_append, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_length", (PyCFunction)_wrap_gwy_string_list_get_length, METH_NOARGS,
      NULL },
    { "get", (PyCFunction)_wrap_gwy_string_list_get, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

PyTypeObject G_GNUC_INTERNAL PyGwyStringList_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "gwy.StringList",                   /* tp_name */
    sizeof(PyGObject),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)0,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    offsetof(PyGObject, weakreflist),             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyGwyStringList_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    offsetof(PyGObject, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_gwy_string_list_new,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)0,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0              /* tp_is_gc */
};



/* ----------- GwyVRuler ----------- */

PyTypeObject G_GNUC_INTERNAL PyGwyVRuler_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "gwy.VRuler",                   /* tp_name */
    sizeof(PyGObject),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)0,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    offsetof(PyGObject, weakreflist),             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    offsetof(PyGObject, inst_dict),                 /* tp_dictoffset */
    (initproc)0,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)0,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0              /* tp_is_gc */
};



/* ----------- GwyVectorLayer ----------- */

static PyObject *
_wrap_gwy_vector_layer_set_selection_key(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "key", NULL };
    char *key;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:GwyVectorLayer.set_selection_key", kwlist, &key))
        return NULL;
    
    gwy_vector_layer_set_selection_key(GWY_VECTOR_LAYER(self->obj), key);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_vector_layer_get_selection_key(PyGObject *self)
{
    const gchar *ret;

    
    ret = gwy_vector_layer_get_selection_key(GWY_VECTOR_LAYER(self->obj));
    
    if (ret)
        return PyString_FromString(ret);
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_vector_layer_ensure_selection(PyGObject *self)
{
    GwySelection *ret;

    
    ret = gwy_vector_layer_ensure_selection(GWY_VECTOR_LAYER(self->obj));
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_vector_layer_get_focus(PyGObject *self)
{
    int ret;

    
    ret = gwy_vector_layer_get_focus(GWY_VECTOR_LAYER(self->obj));
    
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_gwy_vector_layer_set_focus(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "focus", NULL };
    int focus, ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:GwyVectorLayer.set_focus", kwlist, &focus))
        return NULL;
    
    ret = gwy_vector_layer_set_focus(GWY_VECTOR_LAYER(self->obj), focus);
    
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_vector_layer_get_editable(PyGObject *self)
{
    int ret;

    
    ret = gwy_vector_layer_get_editable(GWY_VECTOR_LAYER(self->obj));
    
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_vector_layer_set_editable(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "editable", NULL };
    int editable;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:GwyVectorLayer.set_editable", kwlist, &editable))
        return NULL;
    
    gwy_vector_layer_set_editable(GWY_VECTOR_LAYER(self->obj), editable);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_vector_layer_object_chosen(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "id", NULL };
    int id;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:GwyVectorLayer.object_chosen", kwlist, &id))
        return NULL;
    
    gwy_vector_layer_object_chosen(GWY_VECTOR_LAYER(self->obj), id);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static const PyMethodDef _PyGwyVectorLayer_methods[] = {
    { "set_selection_key", (PyCFunction)_wrap_gwy_vector_layer_set_selection_key, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_selection_key", (PyCFunction)_wrap_gwy_vector_layer_get_selection_key, METH_NOARGS,
      NULL },
    { "ensure_selection", (PyCFunction)_wrap_gwy_vector_layer_ensure_selection, METH_NOARGS,
      NULL },
    { "get_focus", (PyCFunction)_wrap_gwy_vector_layer_get_focus, METH_NOARGS,
      NULL },
    { "set_focus", (PyCFunction)_wrap_gwy_vector_layer_set_focus, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "get_editable", (PyCFunction)_wrap_gwy_vector_layer_get_editable, METH_NOARGS,
      NULL },
    { "set_editable", (PyCFunction)_wrap_gwy_vector_layer_set_editable, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "object_chosen", (PyCFunction)_wrap_gwy_vector_layer_object_chosen, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { NULL, NULL, 0, NULL }
};

PyTypeObject G_GNUC_INTERNAL PyGwyVectorLayer_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "gwy.VectorLayer",                   /* tp_name */
    sizeof(PyGObject),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)0,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    offsetof(PyGObject, weakreflist),             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyGwyVectorLayer_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)0,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    offsetof(PyGObject, inst_dict),                 /* tp_dictoffset */
    (initproc)0,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)0,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0              /* tp_is_gc */
};



/* ----------- functions ----------- */

static PyObject *
_wrap_gwy_cdlines(PyObject *self)
{
    GwyInventory *ret;

    
    ret = gwy_cdlines();
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_dwt_set_coefficients(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "dline", "type", NULL };
    PyGObject *dline;
    PyObject *py_type = NULL;
    GwyDWTType type;
    GwyDataLine *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O:gwy_dwt_set_coefficients", kwlist, &PyGwyDataLine_Type, &dline, &py_type))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_DWT_TYPE, py_type, (gpointer)&type))
        return NULL;
    
    ret = gwy_dwt_set_coefficients(GWY_DATA_LINE(dline->obj), type);
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_data_field_get_elliptic_area_size(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "width", "height", NULL };
    int width, height, ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ii:gwy_data_field_get_elliptic_area_size", kwlist, &width, &height))
        return NULL;
    
    ret = gwy_data_field_get_elliptic_area_size(width, height);
    
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_gwy_data_field_get_circular_area_size(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "radius", NULL };
    int ret;
    double radius;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"d:gwy_data_field_get_circular_area_size", kwlist, &radius))
        return NULL;
    
    ret = gwy_data_field_get_circular_area_size(radius);
    
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_gwy_data_field_fractal_cubecounting_dim(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "xresult", "yresult", "a", "b", NULL };
    PyGObject *xresult, *yresult;
    PyObject *a_pyobj, *b_pyobj;
    double ret;
    GDoubleValue a, b;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!OO:gwy_data_field_fractal_cubecounting_dim", kwlist, &PyGwyDataLine_Type, &xresult, &PyGwyDataLine_Type, &yresult, &a_pyobj, &b_pyobj))
        return NULL;
    if (!PyFloat_Check(a_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'a' must be a float variable");
        return NULL;
    }
    a = PyFloat_AsDouble(a_pyobj);
    if (!PyFloat_Check(b_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'b' must be a float variable");
        return NULL;
    }
    b = PyFloat_AsDouble(b_pyobj);
    
    ret = gwy_data_field_fractal_cubecounting_dim(GWY_DATA_LINE(xresult->obj), GWY_DATA_LINE(yresult->obj), &a, &b);
    
    ((PyFloatObject *) a_pyobj)->ob_fval = a;
    ((PyFloatObject *) b_pyobj)->ob_fval = b;
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_field_fractal_triangulation_dim(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "xresult", "yresult", "a", "b", NULL };
    PyGObject *xresult, *yresult;
    PyObject *a_pyobj, *b_pyobj;
    double ret;
    GDoubleValue a, b;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!OO:gwy_data_field_fractal_triangulation_dim", kwlist, &PyGwyDataLine_Type, &xresult, &PyGwyDataLine_Type, &yresult, &a_pyobj, &b_pyobj))
        return NULL;
    if (!PyFloat_Check(a_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'a' must be a float variable");
        return NULL;
    }
    a = PyFloat_AsDouble(a_pyobj);
    if (!PyFloat_Check(b_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'b' must be a float variable");
        return NULL;
    }
    b = PyFloat_AsDouble(b_pyobj);
    
    ret = gwy_data_field_fractal_triangulation_dim(GWY_DATA_LINE(xresult->obj), GWY_DATA_LINE(yresult->obj), &a, &b);
    
    ((PyFloatObject *) a_pyobj)->ob_fval = a;
    ((PyFloatObject *) b_pyobj)->ob_fval = b;
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_field_fractal_partitioning_dim(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "xresult", "yresult", "a", "b", NULL };
    PyGObject *xresult, *yresult;
    PyObject *a_pyobj, *b_pyobj;
    double ret;
    GDoubleValue a, b;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!OO:gwy_data_field_fractal_partitioning_dim", kwlist, &PyGwyDataLine_Type, &xresult, &PyGwyDataLine_Type, &yresult, &a_pyobj, &b_pyobj))
        return NULL;
    if (!PyFloat_Check(a_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'a' must be a float variable");
        return NULL;
    }
    a = PyFloat_AsDouble(a_pyobj);
    if (!PyFloat_Check(b_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'b' must be a float variable");
        return NULL;
    }
    b = PyFloat_AsDouble(b_pyobj);
    
    ret = gwy_data_field_fractal_partitioning_dim(GWY_DATA_LINE(xresult->obj), GWY_DATA_LINE(yresult->obj), &a, &b);
    
    ((PyFloatObject *) a_pyobj)->ob_fval = a;
    ((PyFloatObject *) b_pyobj)->ob_fval = b;
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_data_field_fractal_psdf_dim(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "xresult", "yresult", "a", "b", NULL };
    PyGObject *xresult, *yresult;
    PyObject *a_pyobj, *b_pyobj;
    double ret;
    GDoubleValue a, b;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!OO:gwy_data_field_fractal_psdf_dim", kwlist, &PyGwyDataLine_Type, &xresult, &PyGwyDataLine_Type, &yresult, &a_pyobj, &b_pyobj))
        return NULL;
    if (!PyFloat_Check(a_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'a' must be a float variable");
        return NULL;
    }
    a = PyFloat_AsDouble(a_pyobj);
    if (!PyFloat_Check(b_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'b' must be a float variable");
        return NULL;
    }
    b = PyFloat_AsDouble(b_pyobj);
    
    ret = gwy_data_field_fractal_psdf_dim(GWY_DATA_LINE(xresult->obj), GWY_DATA_LINE(yresult->obj), &a, &b);
    
    ((PyFloatObject *) a_pyobj)->ob_fval = a;
    ((PyFloatObject *) b_pyobj)->ob_fval = b;
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_process_type_init(PyObject *self)
{
    
    gwy_process_type_init();
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_interpolation_get_dval(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "x", "x1_", "y1_", "x2_", "y2_", "interpolation", NULL };
    PyObject *py_interpolation = NULL;
    double x, x1_, y1_, x2_, y2_, ret;
    GwyInterpolationType interpolation;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"dddddO:gwy_interpolation_get_dval", kwlist, &x, &x1_, &y1_, &x2_, &y2_, &py_interpolation))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_INTERPOLATION_TYPE, py_interpolation, (gpointer)&interpolation))
        return NULL;
    
    ret = gwy_interpolation_get_dval(x, x1_, y1_, x2_, y2_, interpolation);
    
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_interpolation_interpolate_1d(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "x", "coeff", "interpolation", NULL };
    int i_coeff;
    double x, ret;
    GwyInterpolationType interpolation;
    PyObject *coeff_pyobj, *py_interpolation = NULL;
    gdouble *coeff;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"dOO:gwy_interpolation_interpolate_1d", kwlist, &x, &coeff_pyobj, &py_interpolation))
        return NULL;
    if (!PyList_Check(coeff_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'coeff' must be a list of floats");
        return NULL;
    }
    coeff =  g_malloc(sizeof(gdouble)*PyList_Size(coeff_pyobj));
    if (coeff == NULL) {
        return PyErr_NoMemory();
    }
    for (i_coeff = 0; i_coeff < PyList_Size(coeff_pyobj); i_coeff++) {
        if (!PyFloat_Check(PyList_GetItem(coeff_pyobj, i_coeff))) {
            g_free(coeff);
            PyErr_SetString(PyExc_TypeError, "Parameter 'coeff' must be a list of floats");
            return NULL;
        }
        coeff[i_coeff] = PyFloat_AsDouble(PyList_GetItem(coeff_pyobj, i_coeff));
    }
    if (pyg_enum_get_value(GWY_TYPE_INTERPOLATION_TYPE, py_interpolation, (gpointer)&interpolation))
        return NULL;
    
    ret = gwy_interpolation_interpolate_1d(x, coeff, interpolation);
    
    g_free(coeff);
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_interpolation_interpolate_2d(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "x", "y", "rowstride", "coeff", "interpolation", NULL };
    int rowstride, i_coeff;
    double x, y, ret;
    GwyInterpolationType interpolation;
    PyObject *coeff_pyobj, *py_interpolation = NULL;
    gdouble *coeff;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ddiOO:gwy_interpolation_interpolate_2d", kwlist, &x, &y, &rowstride, &coeff_pyobj, &py_interpolation))
        return NULL;
    if (!PyList_Check(coeff_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'coeff' must be a list of floats");
        return NULL;
    }
    coeff =  g_malloc(sizeof(gdouble)*PyList_Size(coeff_pyobj));
    if (coeff == NULL) {
        return PyErr_NoMemory();
    }
    for (i_coeff = 0; i_coeff < PyList_Size(coeff_pyobj); i_coeff++) {
        if (!PyFloat_Check(PyList_GetItem(coeff_pyobj, i_coeff))) {
            g_free(coeff);
            PyErr_SetString(PyExc_TypeError, "Parameter 'coeff' must be a list of floats");
            return NULL;
        }
        coeff[i_coeff] = PyFloat_AsDouble(PyList_GetItem(coeff_pyobj, i_coeff));
    }
    if (pyg_enum_get_value(GWY_TYPE_INTERPOLATION_TYPE, py_interpolation, (gpointer)&interpolation))
        return NULL;
    
    ret = gwy_interpolation_interpolate_2d(x, y, rowstride, coeff, interpolation);
    
    g_free(coeff);
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_interpolation_has_interpolating_basis(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "interpolation", NULL };
    PyObject *py_interpolation = NULL;
    int ret;
    GwyInterpolationType interpolation;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O:gwy_interpolation_has_interpolating_basis", kwlist, &py_interpolation))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_INTERPOLATION_TYPE, py_interpolation, (gpointer)&interpolation))
        return NULL;
    
    ret = gwy_interpolation_has_interpolating_basis(interpolation);
    
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_interpolation_get_support_size(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "interpolation", NULL };
    PyObject *py_interpolation = NULL;
    int ret;
    GwyInterpolationType interpolation;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O:gwy_interpolation_get_support_size", kwlist, &py_interpolation))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_INTERPOLATION_TYPE, py_interpolation, (gpointer)&interpolation))
        return NULL;
    
    ret = gwy_interpolation_get_support_size(interpolation);
    
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_gwy_fft_find_nice_size(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "size", NULL };
    int size, ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:gwy_fft_find_nice_size", kwlist, &size))
        return NULL;
    
    ret = gwy_fft_find_nice_size(size);
    
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_gwy_fft_window_data_field(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "dfield", "orientation", "windowing", NULL };
    PyGObject *dfield;
    PyObject *py_orientation = NULL, *py_windowing = NULL;
    GwyOrientation orientation;
    GwyWindowingType windowing;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!OO:gwy_fft_window_data_field", kwlist, &PyGwyDataField_Type, &dfield, &py_orientation, &py_windowing))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_ORIENTATION, py_orientation, (gpointer)&orientation))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_WINDOWING_TYPE, py_windowing, (gpointer)&windowing))
        return NULL;
    
    gwy_fft_window_data_field(GWY_DATA_FIELD(dfield->obj), orientation, windowing);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_tip_model_get_npresets(PyObject *self)
{
    int ret;

    
    ret = gwy_tip_model_get_npresets();
    
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_gwy_container_deserialize_from_text(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "text", NULL };
    char *text;
    GwyContainer *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:gwy_container_deserialize_from_text", kwlist, &text))
        return NULL;
    
    ret = gwy_container_deserialize_from_text(text);
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_type_init(PyObject *self)
{
    
    gwy_type_init();
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_entities(PyObject *self)
{
    GwyInventory *ret;

    
    ret = gwy_entities();
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_entities_entity_to_utf8(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "entity", NULL };
    char *entity;
    const gchar *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:gwy_entities_entity_to_utf8", kwlist, &entity))
        return NULL;
    
    ret = gwy_entities_entity_to_utf8(entity);
    
    if (ret)
        return PyString_FromString(ret);
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_entities_text_to_utf8(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "text", NULL };
    char *text;
    gchar *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:gwy_entities_text_to_utf8", kwlist, &text))
        return NULL;
    
    ret = gwy_entities_text_to_utf8(text);
    
    if (ret) {
        PyObject *py_ret = PyString_FromString(ret);
        g_free(ret);
        return py_ret;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_enum_sanitize_value(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "enumval", "enum_type", NULL };
    int enumval, ret;
    PyObject *py_enum_type = NULL;
    GType enum_type;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"iO:gwy_enum_sanitize_value", kwlist, &enumval, &py_enum_type))
        return NULL;
    if ((enum_type = pyg_type_from_object(py_enum_type)) == 0)
        return NULL;
    
    ret = gwy_enum_sanitize_value(enumval, enum_type);
    
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_gwy_expr_error_quark(PyObject *self)
{
    int ret;

    
    ret = gwy_expr_error_quark();
    
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_gwy_fd_curve_presets(PyObject *self)
{
    GwyInventory *ret;

    
    ret = gwy_fd_curve_presets();
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_math_is_in_polygon(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "x", "y", "poly", "n", NULL };
    int i_poly, ret;
    double x, y;
    guint n = 0;
    PyObject *poly_pyobj, *py_n = NULL;
    gdouble *poly;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ddOO:gwy_math_is_in_polygon", kwlist, &x, &y, &poly_pyobj, &py_n))
        return NULL;
    if (!PyList_Check(poly_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'poly' must be a list of floats");
        return NULL;
    }
    poly =  g_malloc(sizeof(gdouble)*PyList_Size(poly_pyobj));
    if (poly == NULL) {
        return PyErr_NoMemory();
    }
    for (i_poly = 0; i_poly < PyList_Size(poly_pyobj); i_poly++) {
        if (!PyFloat_Check(PyList_GetItem(poly_pyobj, i_poly))) {
            g_free(poly);
            PyErr_SetString(PyExc_TypeError, "Parameter 'poly' must be a list of floats");
            return NULL;
        }
        poly[i_poly] = PyFloat_AsDouble(PyList_GetItem(poly_pyobj, i_poly));
    }
    if (py_n) {
        if (PyLong_Check(py_n))
            n = PyLong_AsUnsignedLong(py_n);
        else if (PyInt_Check(py_n))
            n = PyInt_AsLong(py_n);
        else
            PyErr_SetString(PyExc_TypeError, "Parameter 'n' must be an int or a long");
        if (PyErr_Occurred())
            return NULL;
    }
    
    ret = gwy_math_is_in_polygon(x, y, poly, n);
    
    g_free(poly);
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_nlfit_presets(PyObject *self)
{
    GwyInventory *ret;

    
    ret = gwy_nlfit_presets();
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_resource_parse(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "text", "expected_type", NULL };
    char *text;
    PyObject *py_expected_type = NULL;
    GType expected_type;
    GwyResource *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"sO:gwy_resource_parse", kwlist, &text, &py_expected_type))
        return NULL;
    if ((expected_type = pyg_type_from_object(py_expected_type)) == 0)
        return NULL;
    
    ret = gwy_resource_parse(text, expected_type);
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_resource_classes_finalize(PyObject *self)
{
    
    gwy_resource_classes_finalize();
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_serializable_duplicate(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "object", NULL };
    PyGObject *object;
    GObject *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:gwy_serializable_duplicate", kwlist, &PyGObject_Type, &object))
        return NULL;
    
    ret = gwy_serializable_duplicate(G_OBJECT(object->obj));
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_serializable_clone(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "source", "copy", NULL };
    PyGObject *source, *copy;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!:gwy_serializable_clone", kwlist, &PyGObject_Type, &source, &PyGObject_Type, &copy))
        return NULL;
    
    gwy_serializable_clone(G_OBJECT(source->obj), G_OBJECT(copy->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_serializable_get_size(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "serializable", NULL };
    PyGObject *serializable;
    gsize ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:gwy_serializable_get_size", kwlist, &PyGObject_Type, &serializable))
        return NULL;
    
    ret = gwy_serializable_get_size(G_OBJECT(serializable->obj));
    
    return PyLong_FromUnsignedLongLong(ret);

}

static PyObject *
_wrap_gwy_serialize_check_string(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "buffer", "size", "position", "compare_to", NULL };
    int buffer_len, compare_to_len;
    gsize size, position, ret;
    guchar *buffer, *compare_to;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s#kks#:gwy_serialize_check_string", kwlist, &buffer, &buffer_len, &size, &position, &compare_to, &compare_to_len))
        return NULL;
    
    ret = gwy_serialize_check_string(buffer, size, position, compare_to);
    
    return PyLong_FromUnsignedLongLong(ret);

}

static PyObject *
_wrap_gwy_si_unit_new_parse(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "unit_string", "power10", NULL };
    char *unit_string;
    PyObject *power10_pyobj;
    GwySIUnit *ret;
    GIntValue power10;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"sO:gwy_si_unit_new_parse", kwlist, &unit_string, &power10_pyobj))
        return NULL;
    if (!PyInt_Check(power10_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'power10' must be an integer variable");
        return NULL;
    }
    power10 = (int) PyInt_AsLong(power10_pyobj);
    
    ret = gwy_si_unit_new_parse(unit_string, &power10);
    
    ((PyIntObject *) power10_pyobj)->ob_ival = power10;
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_strkill(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "s", "killchars", NULL };
    char *s, *killchars;
    gchar *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ss:gwy_strkill", kwlist, &s, &killchars))
        return NULL;
    
    ret = gwy_strkill(s, killchars);
    
    if (ret) {
        PyObject *py_ret = PyString_FromString(ret);
        g_free(ret);
        return py_ret;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_strreplace(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "haystack", "needle", "replacement", "maxrepl", NULL };
    char *haystack, *needle, *replacement;
    gsize maxrepl;
    gchar *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"sssk:gwy_strreplace", kwlist, &haystack, &needle, &replacement, &maxrepl))
        return NULL;
    
    ret = gwy_strreplace(haystack, needle, replacement, maxrepl);
    
    if (ret) {
        PyObject *py_ret = PyString_FromString(ret);
        g_free(ret);
        return py_ret;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_strdiffpos(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "s1", "s2", NULL };
    char *s1, *s2;
    int ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ss:gwy_strdiffpos", kwlist, &s1, &s2))
        return NULL;
    
    ret = gwy_strdiffpos(s1, s2);
    
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_gwy_strisident(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "s", "more", "startmore", NULL };
    char *s, *more, *startmore;
    int ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"sss:gwy_strisident", kwlist, &s, &more, &startmore))
        return NULL;
    
    ret = gwy_strisident(s, more, startmore);
    
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_file_abandon_contents(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "buffer", "size", NULL };
    int buffer_len, ret;
    gsize size;
    guchar *buffer;
    GError *error = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s#k:gwy_file_abandon_contents", kwlist, &buffer, &buffer_len, &size))
        return NULL;
    
    ret = gwy_file_abandon_contents(buffer, size, &error);
    
    if (pyg_error_check(&error))
        return NULL;
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_find_self_dir(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "dirname", NULL };
    char *dirname;
    gchar *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:gwy_find_self_dir", kwlist, &dirname))
        return NULL;
    
    ret = gwy_find_self_dir(dirname);
    
    if (ret) {
        PyObject *py_ret = PyString_FromString(ret);
        g_free(ret);
        return py_ret;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_get_user_dir(PyObject *self)
{
    const gchar *ret;

    
    ret = gwy_get_user_dir();
    
    if (ret)
        return PyString_FromString(ret);
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_get_home_dir(PyObject *self)
{
    const gchar *ret;

    
    ret = gwy_get_home_dir();
    
    if (ret)
        return PyString_FromString(ret);
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_canonicalize_path(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "path", NULL };
    char *path;
    gchar *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:gwy_canonicalize_path", kwlist, &path))
        return NULL;
    
    ret = gwy_canonicalize_path(path);
    
    if (ret) {
        PyObject *py_ret = PyString_FromString(ret);
        g_free(ret);
        return py_ret;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_filename_ignore(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "filename_sys", NULL };
    char *filename_sys;
    int ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:gwy_filename_ignore", kwlist, &filename_sys))
        return NULL;
    
    ret = gwy_filename_ignore(filename_sys);
    
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_sgettext(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "msgid", NULL };
    char *msgid;
    gchar *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:gwy_sgettext", kwlist, &msgid))
        return NULL;
    
    ret = gwy_sgettext(msgid);
    
    if (ret) {
        PyObject *py_ret = PyString_FromString(ret);
        g_free(ret);
        return py_ret;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_version_major(PyObject *self)
{
    int ret;

    
    ret = gwy_version_major();
    
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_gwy_version_minor(PyObject *self)
{
    int ret;

    
    ret = gwy_version_minor();
    
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_gwy_version_string(PyObject *self)
{
    const gchar *ret;

    
    ret = gwy_version_string();
    
    if (ret)
        return PyString_FromString(ret);
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_app_switch_tool(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "toolname", NULL };
    char *toolname;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:gwy_app_switch_tool", kwlist, &toolname))
        return NULL;
    
    gwy_app_switch_tool(toolname);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_app_add_main_accel_group(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "window", NULL };
    PyGObject *window;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:gwy_app_add_main_accel_group", kwlist, &PyGtkWindow_Type, &window))
        return NULL;
    
    gwy_app_add_main_accel_group(GTK_WINDOW(window->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_app_save_window_position(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "window", "prefix", "position", "size", NULL };
    PyGObject *window;
    char *prefix;
    int position, size;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!sii:gwy_app_save_window_position", kwlist, &PyGtkWindow_Type, &window, &prefix, &position, &size))
        return NULL;
    
    gwy_app_save_window_position(GTK_WINDOW(window->obj), prefix, position, size);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_app_restore_window_position(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "window", "prefix", "grow_only", NULL };
    PyGObject *window;
    char *prefix;
    int grow_only;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!si:gwy_app_restore_window_position", kwlist, &PyGtkWindow_Type, &window, &prefix, &grow_only))
        return NULL;
    
    gwy_app_restore_window_position(GTK_WINDOW(window->obj), prefix, grow_only);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_app_main_window_get(PyObject *self)
{
    GtkWidget *ret;

    
    ret = gwy_app_main_window_get();
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_app_data_view_change_mask_color(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "data_view", NULL };
    PyGObject *data_view;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:gwy_app_data_view_change_mask_color", kwlist, &PyGwyDataView_Type, &data_view))
        return NULL;
    
    gwy_app_data_view_change_mask_color(GWY_DATA_VIEW(data_view->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_app_quit(PyObject *self)
{
    int ret;

    
    ret = gwy_app_quit();
    
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_app_init_widget_styles(PyObject *self)
{
    
    gwy_app_init_widget_styles();
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_app_init_i18n(PyObject *self)
{
    
    gwy_app_init_i18n();
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_app_data_browser_add(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "data", NULL };
    PyGObject *data;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:gwy_app_data_browser_add", kwlist, &PyGwyContainer_Type, &data))
        return NULL;
    
    gwy_app_data_browser_add(GWY_CONTAINER(data->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_app_data_browser_remove(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "data", NULL };
    PyGObject *data;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:gwy_app_data_browser_remove", kwlist, &PyGwyContainer_Type, &data))
        return NULL;
    
    gwy_app_data_browser_remove(GWY_CONTAINER(data->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_app_data_browser_merge(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "data", NULL };
    PyGObject *data;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:gwy_app_data_browser_merge", kwlist, &PyGwyContainer_Type, &data))
        return NULL;
    
    gwy_app_data_browser_merge(GWY_CONTAINER(data->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_app_data_browser_reset_visibility(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "data", "reset_type", NULL };
    PyGObject *data;
    PyObject *py_reset_type = NULL;
    int ret;
    GwyVisibilityResetType reset_type;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O:gwy_app_data_browser_reset_visibility", kwlist, &PyGwyContainer_Type, &data, &py_reset_type))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_VISIBILITY_RESET_TYPE, py_reset_type, (gpointer)&reset_type))
        return NULL;
    
    ret = gwy_app_data_browser_reset_visibility(GWY_CONTAINER(data->obj), reset_type);
    
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_app_data_browser_set_keep_invisible(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "data", "keep_invisible", NULL };
    PyGObject *data;
    int keep_invisible;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!i:gwy_app_data_browser_set_keep_invisible", kwlist, &PyGwyContainer_Type, &data, &keep_invisible))
        return NULL;
    
    gwy_app_data_browser_set_keep_invisible(GWY_CONTAINER(data->obj), keep_invisible);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_app_data_browser_get_keep_invisible(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "data", NULL };
    PyGObject *data;
    int ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:gwy_app_data_browser_get_keep_invisible", kwlist, &PyGwyContainer_Type, &data))
        return NULL;
    
    ret = gwy_app_data_browser_get_keep_invisible(GWY_CONTAINER(data->obj));
    
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_app_data_browser_select_data_view(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "data_view", NULL };
    PyGObject *data_view;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:gwy_app_data_browser_select_data_view", kwlist, &PyGwyDataView_Type, &data_view))
        return NULL;
    
    gwy_app_data_browser_select_data_view(GWY_DATA_VIEW(data_view->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_app_data_browser_select_graph(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "graph", NULL };
    PyGObject *graph;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:gwy_app_data_browser_select_graph", kwlist, &PyGwyGraph_Type, &graph))
        return NULL;
    
    gwy_app_data_browser_select_graph(GWY_GRAPH(graph->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_app_data_browser_select_spectra(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "spectra", NULL };
    PyGObject *spectra;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:gwy_app_data_browser_select_spectra", kwlist, &PyGwySpectra_Type, &spectra))
        return NULL;
    
    gwy_app_data_browser_select_spectra(GWY_SPECTRA(spectra->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_app_data_browser_add_data_field(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "dfield", "data", "showit", NULL };
    PyGObject *dfield, *data;
    int showit, ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!i:gwy_app_data_browser_add_data_field", kwlist, &PyGwyDataField_Type, &dfield, &PyGwyContainer_Type, &data, &showit))
        return NULL;
    
    ret = gwy_app_data_browser_add_data_field(GWY_DATA_FIELD(dfield->obj), GWY_CONTAINER(data->obj), showit);
    
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_gwy_app_data_browser_add_graph_model(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "gmodel", "data", "showit", NULL };
    PyGObject *gmodel, *data;
    int showit, ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!i:gwy_app_data_browser_add_graph_model", kwlist, &PyGwyGraphModel_Type, &gmodel, &PyGwyContainer_Type, &data, &showit))
        return NULL;
    
    ret = gwy_app_data_browser_add_graph_model(GWY_GRAPH_MODEL(gmodel->obj), GWY_CONTAINER(data->obj), showit);
    
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_gwy_app_data_browser_add_spectra(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "spectra", "data", "showit", NULL };
    PyGObject *spectra, *data;
    int showit, ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!i:gwy_app_data_browser_add_spectra", kwlist, &PyGwySpectra_Type, &spectra, &PyGwyContainer_Type, &data, &showit))
        return NULL;
    
    ret = gwy_app_data_browser_add_spectra(GWY_SPECTRA(spectra->obj), GWY_CONTAINER(data->obj), showit);
    
    return PyInt_FromLong(ret);
}

#line 329 "./pygwy.override"
/**
 *  gwy_app_data_browser_get_data_ids:
 *  @container: A data container.
 *
 *  Gets the list of all channels in a data container.
 *  The container must be known to the data browser.
 *
 *  Returns: A tuple with ids
**/
static PyObject *
_wrap_gwy_app_data_browser_get_data_ids(PyObject *self, PyObject *args, PyObject *kwargs) 
{
   static char *kwlist[] = {"container", NULL};
   PyGObject *cont;
   gint *id_it; // id array iterator
   gint members = 0; // members of array of ids
   gint i, *ids;
   PyObject *tuple;
   
   if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:gwy_app_data_browser_get_data_ids", kwlist, &PyGwyContainer_Type, &cont))
      return NULL;

   ids = gwy_app_data_browser_get_data_ids(GWY_CONTAINER(cont->obj));
   id_it = ids;
   // Get number of members in array
   while (*id_it != -1) {
      members++;
      id_it++;
   }
   // Create tuple by size ids array
   tuple = PyTuple_New(members);
   if (!tuple)
      return NULL;
   // fill tuple with ids
   for (i = 0 ; i < members; i++) { 
      PyTuple_SetItem(tuple, i, PyInt_FromLong(ids[i]));
   }
   g_free(ids);
   return tuple;
}

#line 16609 "pygwywrap.c"


static PyObject *
_wrap_gwy_app_data_clear_selections(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "data", "id", NULL };
    PyGObject *data;
    int id;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!i:gwy_app_data_clear_selections", kwlist, &PyGwyContainer_Type, &data, &id))
        return NULL;
    
    gwy_app_data_clear_selections(GWY_CONTAINER(data->obj), id);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_app_data_browser_copy_channel(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "source", "id", "dest", NULL };
    PyGObject *source, *dest;
    int id, ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!iO!:gwy_app_data_browser_copy_channel", kwlist, &PyGwyContainer_Type, &source, &id, &PyGwyContainer_Type, &dest))
        return NULL;
    
    ret = gwy_app_data_browser_copy_channel(GWY_CONTAINER(source->obj), id, GWY_CONTAINER(dest->obj));
    
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_gwy_app_get_data_key_for_id(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "id", NULL };
    int id, ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:gwy_app_get_data_key_for_id", kwlist, &id))
        return NULL;
    
    ret = gwy_app_get_data_key_for_id(id);
    
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_gwy_app_get_mask_key_for_id(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "id", NULL };
    int id, ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:gwy_app_get_mask_key_for_id", kwlist, &id))
        return NULL;
    
    ret = gwy_app_get_mask_key_for_id(id);
    
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_gwy_app_get_show_key_for_id(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "id", NULL };
    int id, ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:gwy_app_get_show_key_for_id", kwlist, &id))
        return NULL;
    
    ret = gwy_app_get_show_key_for_id(id);
    
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_gwy_app_get_graph_key_for_id(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "id", NULL };
    int id, ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:gwy_app_get_graph_key_for_id", kwlist, &id))
        return NULL;
    
    ret = gwy_app_get_graph_key_for_id(id);
    
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_gwy_app_get_spectra_key_for_id(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "id", NULL };
    int id, ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"i:gwy_app_get_spectra_key_for_id", kwlist, &id))
        return NULL;
    
    ret = gwy_app_get_spectra_key_for_id(id);
    
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_gwy_app_set_data_field_title(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "data", "id", "name", NULL };
    PyGObject *data;
    int id;
    char *name;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!is:gwy_app_set_data_field_title", kwlist, &PyGwyContainer_Type, &data, &id, &name))
        return NULL;
    
    gwy_app_set_data_field_title(GWY_CONTAINER(data->obj), id, name);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_app_get_data_field_title(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "data", "id", NULL };
    PyGObject *data;
    int id;
    gchar *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!i:gwy_app_get_data_field_title", kwlist, &PyGwyContainer_Type, &data, &id))
        return NULL;
    
    ret = gwy_app_get_data_field_title(GWY_CONTAINER(data->obj), id);
    
    if (ret) {
        PyObject *py_ret = PyString_FromString(ret);
        g_free(ret);
        return py_ret;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_app_data_browser_show(PyObject *self)
{
    
    gwy_app_data_browser_show();
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_app_data_browser_restore(PyObject *self)
{
    
    gwy_app_data_browser_restore();
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_app_data_browser_shut_down(PyObject *self)
{
    
    gwy_app_data_browser_shut_down();
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_app_get_channel_thumbnail(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "data", "id", "max_width", "max_height", NULL };
    PyGObject *data;
    int id, max_width, max_height;
    GdkPixbuf *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!iii:gwy_app_get_channel_thumbnail", kwlist, &PyGwyContainer_Type, &data, &id, &max_width, &max_height))
        return NULL;
    
    ret = gwy_app_get_channel_thumbnail(GWY_CONTAINER(data->obj), id, max_width, max_height);
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_app_data_browser_select_data_field(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "data", "id", NULL };
    PyGObject *data;
    int id;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!i:gwy_app_data_browser_select_data_field", kwlist, &PyGwyContainer_Type, &data, &id))
        return NULL;
    
    gwy_app_data_browser_select_data_field(GWY_CONTAINER(data->obj), id);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_app_data_browser_select_graph_model(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "data", "id", NULL };
    PyGObject *data;
    int id;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!i:gwy_app_data_browser_select_graph_model", kwlist, &PyGwyContainer_Type, &data, &id))
        return NULL;
    
    gwy_app_data_browser_select_graph_model(GWY_CONTAINER(data->obj), id);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_app_data_browser_show_3d(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "data", "id", NULL };
    PyGObject *data;
    int id;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!i:gwy_app_data_browser_show_3d", kwlist, &PyGwyContainer_Type, &data, &id))
        return NULL;
    
    gwy_app_data_browser_show_3d(GWY_CONTAINER(data->obj), id);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_app_find_window_for_channel(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "data", "id", NULL };
    PyGObject *data;
    int id;
    GtkWindow *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!i:gwy_app_find_window_for_channel", kwlist, &PyGwyContainer_Type, &data, &id))
        return NULL;
    
    ret = gwy_app_find_window_for_channel(GWY_CONTAINER(data->obj), id);
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_data_chooser_new_channels(PyObject *self)
{
    GtkWidget *ret;

    
    ret = gwy_data_chooser_new_channels();
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_app_get_current_directory(PyObject *self)
{
    const gchar *ret;

    
    ret = gwy_app_get_current_directory();
    
    if (ret)
        return PyString_FromString(ret);
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_app_set_current_directory(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "directory", NULL };
    char *directory;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:gwy_app_set_current_directory", kwlist, &directory))
        return NULL;
    
    gwy_app_set_current_directory(directory);
    
    Py_INCREF(Py_None);
    return Py_None;
}

#line 489 "./pygwy.override"
/**
 * gwy_app_file_load:
 * @filename: Filename of file to open
 *
 * Load specified file
 *  
 * Returns: A main GwyContainer of opened file
**/
static PyObject *
_wrap_gwy_app_file_load(PyObject *self, PyObject *args, PyObject *kwargs) 
{
   static char *kwlist[] = {"filename", NULL};

   gchar *filename;
   GwyContainer *c;

   if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:gwy_app_file_load", kwlist, &filename))
        return NULL;
   c = gwy_app_file_load(filename, NULL, NULL);
   return pygobject_new((GObject *)c);
}

#line 16928 "pygwywrap.c"


static PyObject *
_wrap_gwy_app_file_open(PyObject *self)
{
    
    gwy_app_file_open();
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_app_file_merge(PyObject *self)
{
    
    gwy_app_file_merge();
    
    Py_INCREF(Py_None);
    return Py_None;
}

#line 513 "./pygwy.override"
static PyObject *
_wrap_gwy_app_file_write(PyObject *self, PyObject *args, PyObject *kwargs)
{
   static char *kwlist[] = {"container", "filename", NULL};
   gchar *filename;
   PyGObject* container;
   
   if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!s:gwy_app_file_write", 
               kwlist, &PyGwyContainer_Type, &container, &filename))
       return NULL;
   if (gwy_app_file_write(GWY_CONTAINER(container->obj), filename, NULL, NULL)) {
       Py_RETURN_TRUE;
   }
   else {
       Py_RETURN_FALSE;
   }
   

}
#line 16971 "pygwywrap.c"


static PyObject *
_wrap_gwy_app_file_save(PyObject *self)
{
    
    gwy_app_file_save();
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_app_file_save_as(PyObject *self)
{
    
    gwy_app_file_save_as();
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_app_file_confirm_overwrite(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "chooser", NULL };
    PyGObject *chooser;
    int ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:gwy_app_file_confirm_overwrite", kwlist, &PyGtkWidget_Type, &chooser))
        return NULL;
    
    ret = gwy_app_file_confirm_overwrite(GTK_WIDGET(chooser->obj));
    
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_app_recent_file_list_update(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "data", "filename_utf8", "filename_sys", "hint", NULL };
    PyGObject *data;
    char *filename_utf8, *filename_sys;
    int hint;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!ssi:gwy_app_recent_file_list_update", kwlist, &PyGwyContainer_Type, &data, &filename_utf8, &filename_sys, &hint))
        return NULL;
    
    gwy_app_recent_file_list_update(GWY_CONTAINER(data->obj), filename_utf8, filename_sys, hint);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_app_recent_file_list_load(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "filename", NULL };
    char *filename;
    int ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:gwy_app_recent_file_list_load", kwlist, &filename))
        return NULL;
    
    ret = gwy_app_recent_file_list_load(filename);
    
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_app_recent_file_list_save(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "filename", NULL };
    char *filename;
    int ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:gwy_app_recent_file_list_save", kwlist, &filename))
        return NULL;
    
    ret = gwy_app_recent_file_list_save(filename);
    
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_app_recent_file_list_free(PyObject *self)
{
    
    gwy_app_recent_file_list_free();
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_app_recent_file_get_thumbnail(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "filename_utf8", NULL };
    char *filename_utf8;
    GdkPixbuf *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:gwy_app_recent_file_get_thumbnail", kwlist, &filename_utf8))
        return NULL;
    
    ret = gwy_app_recent_file_get_thumbnail(filename_utf8);
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_func_use_get_filename(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "type", NULL };
    char *type;
    gchar *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:gwy_func_use_get_filename", kwlist, &type))
        return NULL;
    
    ret = gwy_func_use_get_filename(type);
    
    if (ret) {
        PyObject *py_ret = PyString_FromString(ret);
        g_free(ret);
        return py_ret;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_app_process_func_save_use(PyObject *self)
{
    
    gwy_app_process_func_save_use();
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_app_gl_material_editor(PyObject *self)
{
    
    gwy_app_gl_material_editor();
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_app_gradient_editor(PyObject *self)
{
    
    gwy_app_gradient_editor();
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_app_channel_title_fall_back(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "data", "id", NULL };
    PyGObject *data;
    int id, ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!i:gwy_app_channel_title_fall_back", kwlist, &PyGwyContainer_Type, &data, &id))
        return NULL;
    
    ret = gwy_app_channel_title_fall_back(GWY_CONTAINER(data->obj), id);
    
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_save_auxiliary_data(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "title", "parent", "data_len", "data", NULL };
    char *title, *data;
    PyGObject *parent;
    int ret;
    gssize data_len;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"sO!ls:gwy_save_auxiliary_data", kwlist, &title, &PyGtkWindow_Type, &parent, &data_len, &data))
        return NULL;
    
    ret = gwy_save_auxiliary_data(title, GTK_WINDOW(parent->obj), data_len, data);
    
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_set_data_preview_size(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "data_view", "max_size", NULL };
    PyGObject *data_view;
    int max_size;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!i:gwy_set_data_preview_size", kwlist, &PyGwyDataView_Type, &data_view, &max_size))
        return NULL;
    
    gwy_set_data_preview_size(GWY_DATA_VIEW(data_view->obj), max_size);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_plain_tool_get_z_average(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "data_field", "point", "radius", NULL };
    PyGObject *data_field;
    int i_point, radius;
    double ret;
    PyObject *point_pyobj;
    gdouble *point;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!Oi:gwy_plain_tool_get_z_average", kwlist, &PyGwyDataField_Type, &data_field, &point_pyobj, &radius))
        return NULL;
    if (!PyList_Check(point_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'point' must be a list of floats");
        return NULL;
    }
    point =  g_malloc(sizeof(gdouble)*PyList_Size(point_pyobj));
    if (point == NULL) {
        return PyErr_NoMemory();
    }
    for (i_point = 0; i_point < PyList_Size(point_pyobj); i_point++) {
        if (!PyFloat_Check(PyList_GetItem(point_pyobj, i_point))) {
            g_free(point);
            PyErr_SetString(PyExc_TypeError, "Parameter 'point' must be a list of floats");
            return NULL;
        }
        point[i_point] = PyFloat_AsDouble(PyList_GetItem(point_pyobj, i_point));
    }
    
    ret = gwy_plain_tool_get_z_average(GWY_DATA_FIELD(data_field->obj), point, radius);
    
    g_free(point);
    return PyFloat_FromDouble(ret);
}

static PyObject *
_wrap_gwy_app_process_menu_add_run_last(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "menu", NULL };
    PyGObject *menu;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:gwy_app_process_menu_add_run_last", kwlist, &PyGtkWidget_Type, &menu))
        return NULL;
    
    gwy_app_process_menu_add_run_last(GTK_WIDGET(menu->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_app_run_process_func(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "name", NULL };
    char *name;
    guint ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:gwy_app_run_process_func", kwlist, &name))
        return NULL;
    
    ret = gwy_app_run_process_func(name);
    
    return pyg_flags_from_gtype(GWY_TYPE_RUN_TYPE, ret);
}

static PyObject *
_wrap_gwy_app_run_process_func_in_mode(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "name", "run", NULL };
    char *name;
    PyObject *py_run = NULL;
    GwyRunType run;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"sO:gwy_app_run_process_func_in_mode", kwlist, &name, &py_run))
        return NULL;
    if (pyg_flags_get_value(GWY_TYPE_RUN_TYPE, py_run, (gpointer)&run))
        return NULL;
    
    gwy_app_run_process_func_in_mode(name, run);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_app_run_graph_func(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "name", NULL };
    char *name;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:gwy_app_run_graph_func", kwlist, &name))
        return NULL;
    
    gwy_app_run_graph_func(name);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_app_menu_recent_files_get(PyObject *self)
{
    GtkWidget *ret;

    
    ret = gwy_app_menu_recent_files_get();
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_app_get_tooltips(PyObject *self)
{
    GtkTooltips *ret;

    
    ret = gwy_app_get_tooltips();
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_app_sensitivity_get_group(PyObject *self)
{
    GwySensitivityGroup *ret;

    
    ret = gwy_app_sensitivity_get_group();
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_app_sensitivity_add_widget(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "widget", "mask", NULL };
    PyGObject *widget;
    PyObject *py_mask = NULL;
    GwyMenuSensFlags mask;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O:gwy_app_sensitivity_add_widget", kwlist, &PyGtkWidget_Type, &widget, &py_mask))
        return NULL;
    if (pyg_flags_get_value(GWY_TYPE_MENU_SENS_FLAGS, py_mask, (gpointer)&mask))
        return NULL;
    
    gwy_app_sensitivity_add_widget(GTK_WIDGET(widget->obj), mask);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_app_sensitivity_set_state(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "affected_mask", "state", NULL };
    PyObject *py_affected_mask = NULL, *py_state = NULL;
    GwyMenuSensFlags affected_mask, state;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"OO:gwy_app_sensitivity_set_state", kwlist, &py_affected_mask, &py_state))
        return NULL;
    if (pyg_flags_get_value(GWY_TYPE_MENU_SENS_FLAGS, py_affected_mask, (gpointer)&affected_mask))
        return NULL;
    if (pyg_flags_get_value(GWY_TYPE_MENU_SENS_FLAGS, py_state, (gpointer)&state))
        return NULL;
    
    gwy_app_sensitivity_set_state(affected_mask, state);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_app_settings_error_quark(PyObject *self)
{
    int ret;

    
    ret = gwy_app_settings_error_quark();
    
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_gwy_app_settings_get(PyObject *self)
{
    GwyContainer *ret;

    
    ret = gwy_app_settings_get();
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_app_settings_free(PyObject *self)
{
    
    gwy_app_settings_free();
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_app_settings_save(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "filename", NULL };
    char *filename;
    int ret;
    GError *error = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:gwy_app_settings_save", kwlist, &filename))
        return NULL;
    
    ret = gwy_app_settings_save(filename, &error);
    
    if (pyg_error_check(&error))
        return NULL;
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_app_settings_load(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "filename", NULL };
    char *filename;
    int ret;
    GError *error = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:gwy_app_settings_load", kwlist, &filename))
        return NULL;
    
    ret = gwy_app_settings_load(filename, &error);
    
    if (pyg_error_check(&error))
        return NULL;
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_app_settings_create_config_dir(PyObject *self)
{
    int ret;
    GError *error = NULL;

    
    ret = gwy_app_settings_create_config_dir(&error);
    
    if (pyg_error_check(&error))
        return NULL;
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_app_settings_get_settings_filename(PyObject *self)
{
    gchar *ret;

    
    ret = gwy_app_settings_get_settings_filename();
    
    if (ret) {
        PyObject *py_ret = PyString_FromString(ret);
        g_free(ret);
        return py_ret;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_app_settings_get_log_filename(PyObject *self)
{
    gchar *ret;

    
    ret = gwy_app_settings_get_log_filename();
    
    if (ret) {
        PyObject *py_ret = PyString_FromString(ret);
        g_free(ret);
        return py_ret;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_app_settings_get_recent_file_list_filename(PyObject *self)
{
    gchar *ret;

    
    ret = gwy_app_settings_get_recent_file_list_filename();
    
    if (ret) {
        PyObject *py_ret = PyString_FromString(ret);
        g_free(ret);
        return py_ret;
    }
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_app_gl_is_ok(PyObject *self)
{
    int ret;

    
    ret = gwy_app_gl_is_ok();
    
    return PyBool_FromLong(ret);

}

#line 254 "./pygwy.override"
static PyObject *
_wrap_gwy_app_undo_qcheckpointv(PyObject *self, PyObject *args, PyObject *kwargs) 
{
   static char *kwlist[] = {"container", "key", NULL};

   PyGObject *cont;
   GQuark key;

   if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!i:gwy_app_undo_qcheckpointv", kwlist, &PyGwyContainer_Type, &cont, &key))
        return NULL;
   gwy_app_undo_qcheckpointv(GWY_CONTAINER(cont->obj), 1, &key);
   Py_INCREF(Py_None);
   return Py_None;
}

#line 17525 "pygwywrap.c"


static PyObject *
_wrap_gwy_app_undo_undo_container(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "data", NULL };
    PyGObject *data;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:gwy_app_undo_undo_container", kwlist, &PyGwyContainer_Type, &data))
        return NULL;
    
    gwy_app_undo_undo_container(GWY_CONTAINER(data->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_app_undo_redo_container(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "data", NULL };
    PyGObject *data;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:gwy_app_undo_redo_container", kwlist, &PyGwyContainer_Type, &data))
        return NULL;
    
    gwy_app_undo_redo_container(GWY_CONTAINER(data->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_undo_undo_container(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "data", NULL };
    PyGObject *data;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:gwy_undo_undo_container", kwlist, &PyGwyContainer_Type, &data))
        return NULL;
    
    gwy_undo_undo_container(GWY_CONTAINER(data->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_undo_redo_container(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "data", NULL };
    PyGObject *data;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:gwy_undo_redo_container", kwlist, &PyGwyContainer_Type, &data))
        return NULL;
    
    gwy_undo_redo_container(GWY_CONTAINER(data->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_undo_container_has_undo(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "data", NULL };
    PyGObject *data;
    int ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:gwy_undo_container_has_undo", kwlist, &PyGwyContainer_Type, &data))
        return NULL;
    
    ret = gwy_undo_container_has_undo(GWY_CONTAINER(data->obj));
    
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_undo_container_has_redo(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "data", NULL };
    PyGObject *data;
    int ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:gwy_undo_container_has_redo", kwlist, &PyGwyContainer_Type, &data))
        return NULL;
    
    ret = gwy_undo_container_has_redo(GWY_CONTAINER(data->obj));
    
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_undo_container_get_modified(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "data", NULL };
    PyGObject *data;
    int ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:gwy_undo_container_get_modified", kwlist, &PyGwyContainer_Type, &data))
        return NULL;
    
    ret = gwy_undo_container_get_modified(GWY_CONTAINER(data->obj));
    
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_gwy_undo_container_set_unmodified(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "data", NULL };
    PyGObject *data;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:gwy_undo_container_set_unmodified", kwlist, &PyGwyContainer_Type, &data))
        return NULL;
    
    gwy_undo_container_set_unmodified(GWY_CONTAINER(data->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_undo_container_remove(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "data", "prefix", NULL };
    PyGObject *data;
    char *prefix;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!s:gwy_undo_container_remove", kwlist, &PyGwyContainer_Type, &data, &prefix))
        return NULL;
    
    gwy_undo_container_remove(GWY_CONTAINER(data->obj), prefix);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_app_wait_start(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "window", "message", NULL };
    PyGObject *window;
    char *message;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!s:gwy_app_wait_start", kwlist, &PyGtkWindow_Type, &window, &message))
        return NULL;
    
    gwy_app_wait_start(GTK_WINDOW(window->obj), message);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_app_wait_finish(PyObject *self)
{
    
    gwy_app_wait_finish();
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_app_wait_set_fraction(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "fraction", NULL };
    int ret;
    double fraction;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"d:gwy_app_wait_set_fraction", kwlist, &fraction))
        return NULL;
    
    ret = gwy_app_wait_set_fraction(fraction);
    
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_app_wait_set_message(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "message", NULL };
    char *message;
    int ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:gwy_app_wait_set_message", kwlist, &message))
        return NULL;
    
    ret = gwy_app_wait_set_message(message);
    
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_app_wait_set_message_prefix(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "prefix", NULL };
    char *prefix;
    int ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:gwy_app_wait_set_message_prefix", kwlist, &prefix))
        return NULL;
    
    ret = gwy_app_wait_set_message_prefix(prefix);
    
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_app_wait_cursor_start(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "window", NULL };
    PyGObject *window;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:gwy_app_wait_cursor_start", kwlist, &PyGtkWindow_Type, &window))
        return NULL;
    
    gwy_app_wait_cursor_start(GTK_WINDOW(window->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_app_wait_cursor_finish(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "window", NULL };
    PyGObject *window;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:gwy_app_wait_cursor_finish", kwlist, &PyGtkWindow_Type, &window))
        return NULL;
    
    gwy_app_wait_cursor_finish(GTK_WINDOW(window->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_draw_type_init(PyObject *self)
{
    
    gwy_draw_type_init();
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_gl_materials(PyObject *self)
{
    GwyInventory *ret;

    
    ret = gwy_gl_materials();
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_gl_materials_get_gl_material(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "name", NULL };
    char *name;
    GwyGLMaterial *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:gwy_gl_materials_get_gl_material", kwlist, &name))
        return NULL;
    
    ret = gwy_gl_materials_get_gl_material(name);
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_gradients(PyObject *self)
{
    GwyInventory *ret;

    
    ret = gwy_gradients();
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_gradients_get_gradient(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "name", NULL };
    char *name;
    GwyGradient *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:gwy_gradients_get_gradient", kwlist, &name))
        return NULL;
    
    ret = gwy_gradients_get_gradient(name);
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_pixbuf_draw_data_field(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "pixbuf", "data_field", "gradient", NULL };
    PyGObject *pixbuf, *data_field, *gradient;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!O!:gwy_pixbuf_draw_data_field", kwlist, &PyGdkPixbuf_Type, &pixbuf, &PyGwyDataField_Type, &data_field, &PyGwyGradient_Type, &gradient))
        return NULL;
    
    gwy_pixbuf_draw_data_field(GDK_PIXBUF(pixbuf->obj), GWY_DATA_FIELD(data_field->obj), GWY_GRADIENT(gradient->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_pixbuf_draw_data_field_with_range(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "pixbuf", "data_field", "gradient", "minimum", "maximum", NULL };
    PyGObject *pixbuf, *data_field, *gradient;
    double minimum, maximum;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!O!dd:gwy_pixbuf_draw_data_field_with_range", kwlist, &PyGdkPixbuf_Type, &pixbuf, &PyGwyDataField_Type, &data_field, &PyGwyGradient_Type, &gradient, &minimum, &maximum))
        return NULL;
    
    gwy_pixbuf_draw_data_field_with_range(GDK_PIXBUF(pixbuf->obj), GWY_DATA_FIELD(data_field->obj), GWY_GRADIENT(gradient->obj), minimum, maximum);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_pixbuf_draw_data_field_adaptive(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "pixbuf", "data_field", "gradient", NULL };
    PyGObject *pixbuf, *data_field, *gradient;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!O!:gwy_pixbuf_draw_data_field_adaptive", kwlist, &PyGdkPixbuf_Type, &pixbuf, &PyGwyDataField_Type, &data_field, &PyGwyGradient_Type, &gradient))
        return NULL;
    
    gwy_pixbuf_draw_data_field_adaptive(GDK_PIXBUF(pixbuf->obj), GWY_DATA_FIELD(data_field->obj), GWY_GRADIENT(gradient->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_pixbuf_draw_data_field_as_mask(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "red", "green", "blue", "color", NULL };
    PyGObject *pixbuf, *data_field;
    GwyRGBA s_color, *color = &s_color;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!dddd:gwy_pixbuf_draw_data_field_as_mask", kwlist, &PyGdkPixbuf_Type, &pixbuf, &PyGwyDataField_Type, &data_field, &color->r, &color->g, &color->b, &color->a))
        return NULL;
    gwy_debug("color: %f %f %f %f", color->r, color->g, color->b, color->a);    
    gwy_pixbuf_draw_data_field_as_mask(GDK_PIXBUF(pixbuf->obj), GWY_DATA_FIELD(data_field->obj), color);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_rgba_remove_from_container(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "container", "prefix", NULL };
    PyGObject *container;
    char *prefix;
    int ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!s:gwy_rgba_remove_from_container", kwlist, &PyGwyContainer_Type, &container, &prefix))
        return NULL;
    
    ret = gwy_rgba_remove_from_container(GWY_CONTAINER(container->obj), prefix);
    
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_module_browser(PyObject *self)
{
    
    gwy_module_browser();
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_file_func_run_detect(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "name", "filename", "only_name", NULL };
    char *name, *filename;
    int only_name, ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ssi:gwy_file_func_run_detect", kwlist, &name, &filename, &only_name))
        return NULL;
    
    ret = gwy_file_func_run_detect(name, filename, only_name);
    
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_gwy_file_func_run_load(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "name", "filename", "mode", NULL };
    char *name, *filename;
    PyObject *py_mode = NULL;
    GwyContainer *ret;
    GwyRunType mode;
    GError *error = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"ssO:gwy_file_func_run_load", kwlist, &name, &filename, &py_mode))
        return NULL;
    if (pyg_flags_get_value(GWY_TYPE_RUN_TYPE, py_mode, (gpointer)&mode))
        return NULL;
    
    ret = gwy_file_func_run_load(name, filename, mode, &error);
    
    if (pyg_error_check(&error))
        return NULL;
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_file_func_run_save(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "name", "data", "filename", "mode", NULL };
    int ret;
    GError *error = NULL;
    char *name, *filename;
    PyObject *py_mode = NULL;
    PyGObject *data;
    GwyRunType mode;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"sO!sO:gwy_file_func_run_save", kwlist, &name, &PyGwyContainer_Type, &data, &filename, &py_mode))
        return NULL;
    if (pyg_flags_get_value(GWY_TYPE_RUN_TYPE, py_mode, (gpointer)&mode))
        return NULL;
    
    ret = gwy_file_func_run_save(name, GWY_CONTAINER(data->obj), filename, mode, &error);
    
    if (pyg_error_check(&error))
        return NULL;
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_file_func_run_export(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "name", "data", "filename", "mode", NULL };
    int ret;
    GError *error = NULL;
    char *name, *filename;
    PyObject *py_mode = NULL;
    PyGObject *data;
    GwyRunType mode;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"sO!sO:gwy_file_func_run_export", kwlist, &name, &PyGwyContainer_Type, &data, &filename, &py_mode))
        return NULL;
    if (pyg_flags_get_value(GWY_TYPE_RUN_TYPE, py_mode, (gpointer)&mode))
        return NULL;
    
    ret = gwy_file_func_run_export(name, GWY_CONTAINER(data->obj), filename, mode, &error);
    
    if (pyg_error_check(&error))
        return NULL;
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_file_func_exists(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "name", NULL };
    char *name;
    int ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:gwy_file_func_exists", kwlist, &name))
        return NULL;
    
    ret = gwy_file_func_exists(name);
    
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_file_func_get_operations(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "name", NULL };
    char *name;
    guint ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:gwy_file_func_get_operations", kwlist, &name))
        return NULL;
    
    ret = gwy_file_func_get_operations(name);
    
    return pyg_flags_from_gtype(GWY_TYPE_FILE_OPERATION_TYPE, ret);
}

static PyObject *
_wrap_gwy_file_func_get_description(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "name", NULL };
    char *name;
    const gchar *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:gwy_file_func_get_description", kwlist, &name))
        return NULL;
    
    ret = gwy_file_func_get_description(name);
    
    if (ret)
        return PyString_FromString(ret);
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_file_detect(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "filename", "only_name", "operations", NULL };
    char *filename;
    int only_name;
    GwyFileOperationType operations;
    PyObject *py_operations = NULL;
    const gchar *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"siO:gwy_file_detect", kwlist, &filename, &only_name, &py_operations))
        return NULL;
    if (pyg_flags_get_value(GWY_TYPE_FILE_OPERATION_TYPE, py_operations, (gpointer)&operations))
        return NULL;
    
    ret = gwy_file_detect(filename, only_name, operations);
    
    if (ret)
        return PyString_FromString(ret);
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_file_detect_with_score(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "filename", "only_name", "operations", "score", NULL };
    GwyFileOperationType operations;
    const gchar *ret;
    int only_name;
    char *filename;
    PyObject *py_operations = NULL, *score_pyobj;
    GIntValue score;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"siOO:gwy_file_detect_with_score", kwlist, &filename, &only_name, &py_operations, &score_pyobj))
        return NULL;
    if (pyg_flags_get_value(GWY_TYPE_FILE_OPERATION_TYPE, py_operations, (gpointer)&operations))
        return NULL;
    if (!PyInt_Check(score_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'score' must be an integer variable");
        return NULL;
    }
    score = (int) PyInt_AsLong(score_pyobj);
    
    ret = gwy_file_detect_with_score(filename, only_name, operations, &score);
    
    ((PyIntObject *) score_pyobj)->ob_ival = score;
    if (ret)
        return PyString_FromString(ret);
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_file_load(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "filename", "mode", NULL };
    char *filename;
    PyObject *py_mode = NULL;
    GwyContainer *ret;
    GwyRunType mode;
    GError *error = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"sO:gwy_file_load", kwlist, &filename, &py_mode))
        return NULL;
    if (pyg_flags_get_value(GWY_TYPE_RUN_TYPE, py_mode, (gpointer)&mode))
        return NULL;
    
    ret = gwy_file_load(filename, mode, &error);
    
    if (pyg_error_check(&error))
        return NULL;
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_file_save(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "data", "filename", "mode", NULL };
    PyObject *py_mode = NULL;
    GError *error = NULL;
    guint ret;
    char *filename;
    PyGObject *data;
    GwyRunType mode;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!sO:gwy_file_save", kwlist, &PyGwyContainer_Type, &data, &filename, &py_mode))
        return NULL;
    if (pyg_flags_get_value(GWY_TYPE_RUN_TYPE, py_mode, (gpointer)&mode))
        return NULL;
    
    ret = gwy_file_save(GWY_CONTAINER(data->obj), filename, mode, &error);
    
    if (pyg_error_check(&error))
        return NULL;
    return pyg_flags_from_gtype(GWY_TYPE_FILE_OPERATION_TYPE, ret);
}

static PyObject *
_wrap_gwy_module_file_error_quark(PyObject *self)
{
    int ret;

    
    ret = gwy_module_file_error_quark();
    
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_gwy_graph_func_run(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "name", "graph", NULL };
    char *name;
    PyGObject *graph;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"sO!:gwy_graph_func_run", kwlist, &name, &PyGwyGraph_Type, &graph))
        return NULL;
    
    gwy_graph_func_run(name, GWY_GRAPH(graph->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_graph_func_exists(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "name", NULL };
    char *name;
    int ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:gwy_graph_func_exists", kwlist, &name))
        return NULL;
    
    ret = gwy_graph_func_exists(name);
    
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_graph_func_get_menu_path(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "name", NULL };
    char *name;
    const gchar *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:gwy_graph_func_get_menu_path", kwlist, &name))
        return NULL;
    
    ret = gwy_graph_func_get_menu_path(name);
    
    if (ret)
        return PyString_FromString(ret);
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_graph_func_get_stock_id(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "name", NULL };
    char *name;
    const gchar *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:gwy_graph_func_get_stock_id", kwlist, &name))
        return NULL;
    
    ret = gwy_graph_func_get_stock_id(name);
    
    if (ret)
        return PyString_FromString(ret);
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_graph_func_get_tooltip(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "name", NULL };
    char *name;
    const gchar *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:gwy_graph_func_get_tooltip", kwlist, &name))
        return NULL;
    
    ret = gwy_graph_func_get_tooltip(name);
    
    if (ret)
        return PyString_FromString(ret);
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_graph_func_get_sensitivity_mask(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "name", NULL };
    char *name;
    guint ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:gwy_graph_func_get_sensitivity_mask", kwlist, &name))
        return NULL;
    
    ret = gwy_graph_func_get_sensitivity_mask(name);
    
    return PyLong_FromUnsignedLong(ret);
}

static PyObject *
_wrap_gwy_layer_func_register(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "type", NULL };
    PyObject *py_type = NULL;
    int ret;
    GType type;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O:gwy_layer_func_register", kwlist, &py_type))
        return NULL;
    if ((type = pyg_type_from_object(py_type)) == 0)
        return NULL;
    
    ret = gwy_layer_func_register(type);
    
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_module_error_quark(PyObject *self)
{
    int ret;

    
    ret = gwy_module_error_quark();
    
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_gwy_module_get_filename(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "name", NULL };
    char *name;
    const gchar *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:gwy_module_get_filename", kwlist, &name))
        return NULL;
    
    ret = gwy_module_get_filename(name);
    
    if (ret)
        return PyString_FromString(ret);
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_process_func_run(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "name", "data", "run", NULL };
    char *name;
    PyGObject *data;
    GwyRunType run;
    PyObject *py_run = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"sO!O:gwy_process_func_run", kwlist, &name, &PyGwyContainer_Type, &data, &py_run))
        return NULL;
    if (pyg_flags_get_value(GWY_TYPE_RUN_TYPE, py_run, (gpointer)&run))
        return NULL;
    
    gwy_process_func_run(name, GWY_CONTAINER(data->obj), run);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_process_func_exists(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "name", NULL };
    char *name;
    int ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:gwy_process_func_exists", kwlist, &name))
        return NULL;
    
    ret = gwy_process_func_exists(name);
    
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_process_func_get_run_types(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "name", NULL };
    char *name;
    guint ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:gwy_process_func_get_run_types", kwlist, &name))
        return NULL;
    
    ret = gwy_process_func_get_run_types(name);
    
    return pyg_flags_from_gtype(GWY_TYPE_RUN_TYPE, ret);
}

static PyObject *
_wrap_gwy_process_func_get_menu_path(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "name", NULL };
    char *name;
    const gchar *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:gwy_process_func_get_menu_path", kwlist, &name))
        return NULL;
    
    ret = gwy_process_func_get_menu_path(name);
    
    if (ret)
        return PyString_FromString(ret);
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_process_func_get_stock_id(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "name", NULL };
    char *name;
    const gchar *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:gwy_process_func_get_stock_id", kwlist, &name))
        return NULL;
    
    ret = gwy_process_func_get_stock_id(name);
    
    if (ret)
        return PyString_FromString(ret);
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_process_func_get_tooltip(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "name", NULL };
    char *name;
    const gchar *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:gwy_process_func_get_tooltip", kwlist, &name))
        return NULL;
    
    ret = gwy_process_func_get_tooltip(name);
    
    if (ret)
        return PyString_FromString(ret);
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_process_func_get_sensitivity_mask(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "name", NULL };
    char *name;
    guint ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:gwy_process_func_get_sensitivity_mask", kwlist, &name))
        return NULL;
    
    ret = gwy_process_func_get_sensitivity_mask(name);
    
    return PyLong_FromUnsignedLong(ret);
}

static PyObject *
_wrap_gwy_tool_func_register(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "type", NULL };
    PyObject *py_type = NULL;
    int ret;
    GType type;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O:gwy_tool_func_register", kwlist, &py_type))
        return NULL;
    if ((type = pyg_type_from_object(py_type)) == 0)
        return NULL;
    
    ret = gwy_tool_func_register(type);
    
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_3d_window_class_set_tooltips(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "tips", NULL };
    PyGObject *tips;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:gwy_3d_window_class_set_tooltips", kwlist, &PyGtkTooltips_Type, &tips))
        return NULL;
    
    gwy_3d_window_class_set_tooltips(GTK_TOOLTIPS(tips->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_3d_window_class_get_tooltips(PyObject *self)
{
    GtkTooltips *ret;

    
    ret = gwy_3d_window_class_get_tooltips();
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_color_axis_new_with_range(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "orientation", "min", "max", NULL };
    GtkOrientation orientation;
    PyObject *py_orientation = NULL;
    GtkWidget *ret;
    double min, max;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"Odd:gwy_color_axis_new_with_range", kwlist, &py_orientation, &min, &max))
        return NULL;
    if (pyg_enum_get_value(GTK_TYPE_ORIENTATION, py_orientation, (gpointer)&orientation))
        return NULL;
    
    ret = gwy_color_axis_new_with_range(orientation, min, max);
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_color_button_new_with_color(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "red", "green", "blue", "color", NULL };
    GwyRGBA s_color, *color = &s_color;
    GtkWidget *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"dddd:gwy_color_button_new_with_color", kwlist, &color->r, &color->g, &color->b, &color->a))
        return NULL;
    gwy_debug("color: %f %f %f %f", color->r, color->g, color->b, color->a);    
    ret = gwy_color_button_new_with_color(color);
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_combo_box_metric_unit_set_unit(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "combo", "from_", "to", "unit", NULL };
    PyGObject *combo, *unit;
    int from, to;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!iiO!:gwy_combo_box_metric_unit_set_unit", kwlist, &PyGtkComboBox_Type, &combo, &from, &to, &PyGwySIUnit_Type, &unit))
        return NULL;
    
    gwy_combo_box_metric_unit_set_unit(GTK_COMBO_BOX(combo->obj), from, to, GWY_SI_UNIT(unit->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_enum_combo_box_set_active(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "combo", "active", NULL };
    PyGObject *combo;
    int active;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!i:gwy_enum_combo_box_set_active", kwlist, &PyGtkComboBox_Type, &combo, &active))
        return NULL;
    
    gwy_enum_combo_box_set_active(GTK_COMBO_BOX(combo->obj), active);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_enum_combo_box_get_active(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "combo", NULL };
    PyGObject *combo;
    int ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:gwy_enum_combo_box_get_active", kwlist, &PyGtkComboBox_Type, &combo))
        return NULL;
    
    ret = gwy_enum_combo_box_get_active(GTK_COMBO_BOX(combo->obj));
    
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_gwy_enum_combo_box_update_int(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "combo", "integer", NULL };
    PyGObject *combo;
    PyObject *integer_pyobj;
    GIntValue integer;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O:gwy_enum_combo_box_update_int", kwlist, &PyGtkComboBox_Type, &combo, &integer_pyobj))
        return NULL;
    if (!PyInt_Check(integer_pyobj)) {
        PyErr_SetString(PyExc_TypeError, "Parameter 'integer' must be an integer variable");
        return NULL;
    }
    integer = (int) PyInt_AsLong(integer_pyobj);
    
    gwy_enum_combo_box_update_int(GTK_COMBO_BOX(combo->obj), &integer);
    
    ((PyIntObject *) integer_pyobj)->ob_ival = integer;
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_window_class_set_tooltips(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "tips", NULL };
    PyGObject *tips;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:gwy_data_window_class_set_tooltips", kwlist, &PyGtkTooltips_Type, &tips))
        return NULL;
    
    gwy_data_window_class_set_tooltips(GTK_TOOLTIPS(tips->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_data_window_class_get_tooltips(PyObject *self)
{
    GtkTooltips *ret;

    
    ret = gwy_data_window_class_get_tooltips();
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_widgets_type_init(PyObject *self)
{
    
    gwy_widgets_type_init();
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_widgets_gl_init(PyObject *self)
{
    int ret;

    
    ret = gwy_widgets_gl_init();
    
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_widgets_get_gl_config(PyObject *self)
{
    GdkGLConfig *ret;

    
    ret = gwy_widgets_get_gl_config();
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_table_attach_spinbutton(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "table", "row", "name", "units", "adj", NULL };
    PyGObject *table, *adj;
    int row;
    char *name, *units;
    GtkWidget *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!issO!:gwy_table_attach_spinbutton", kwlist, &PyGtkWidget_Type, &table, &row, &name, &units, &PyGtkObject_Type, &adj))
        return NULL;
    
    ret = gwy_table_attach_spinbutton(GTK_WIDGET(table->obj), row, name, units, GTK_OBJECT(adj->obj));
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_table_attach_row(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "table", "row", "name", "units", "middle_widget", NULL };
    PyGObject *table, *middle_widget;
    int row;
    char *name, *units;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!issO!:gwy_table_attach_row", kwlist, &PyGtkWidget_Type, &table, &row, &name, &units, &PyGtkWidget_Type, &middle_widget))
        return NULL;
    
    gwy_table_attach_row(GTK_WIDGET(table->obj), row, name, units, GTK_WIDGET(middle_widget->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_table_attach_hscale(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "table", "row", "name", "units", "pivot", "style", NULL };
    int row;
    GwyHScaleStyle style;
    char *name, *units;
    PyObject *py_style = NULL;
    GtkWidget *ret;
    PyGObject *table, *pivot;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!issO!O:gwy_table_attach_hscale", kwlist, &PyGtkWidget_Type, &table, &row, &name, &units, &PyGtkObject_Type, &pivot, &py_style))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_HSCALE_STYLE, py_style, (gpointer)&style))
        return NULL;
    
    ret = gwy_table_attach_hscale(GTK_WIDGET(table->obj), row, name, units, GTK_OBJECT(pivot->obj), style);
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_table_hscale_set_sensitive(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "pivot", "sensitive", NULL };
    PyGObject *pivot;
    int sensitive;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!i:gwy_table_hscale_set_sensitive", kwlist, &PyGtkObject_Type, &pivot, &sensitive))
        return NULL;
    
    gwy_table_hscale_set_sensitive(GTK_OBJECT(pivot->obj), sensitive);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_table_get_child_widget(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "table", "row", "col", NULL };
    PyGObject *table;
    int row, col;
    GtkWidget *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!ii:gwy_table_get_child_widget", kwlist, &PyGtkWidget_Type, &table, &row, &col))
        return NULL;
    
    ret = gwy_table_get_child_widget(GTK_WIDGET(table->obj), row, col);
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_color_selector_for_mask(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "dialog_title", "color_button", "container", "prefix", NULL };
    char *dialog_title, *prefix;
    PyGObject *color_button, *container;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"sO!O!s:gwy_color_selector_for_mask", kwlist, &dialog_title, &PyGwyColorButton_Type, &color_button, &PyGwyContainer_Type, &container, &prefix))
        return NULL;
    
    gwy_color_selector_for_mask(dialog_title, GWY_COLOR_BUTTON(color_button->obj), GWY_CONTAINER(container->obj), prefix);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_mask_color_selector_run(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "dialog_title", "parent", "color_button", "container", "prefix", NULL };
    char *dialog_title, *prefix;
    PyGObject *parent, *color_button, *container;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"sO!O!O!s:gwy_mask_color_selector_run", kwlist, &dialog_title, &PyGtkWindow_Type, &parent, &PyGwyColorButton_Type, &color_button, &PyGwyContainer_Type, &container, &prefix))
        return NULL;
    
    gwy_mask_color_selector_run(dialog_title, GTK_WINDOW(parent->obj), GWY_COLOR_BUTTON(color_button->obj), GWY_CONTAINER(container->obj), prefix);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_dialog_prevent_delete_cb(PyObject *self)
{
    int ret;

    
    ret = gwy_dialog_prevent_delete_cb();
    
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_label_new_header(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "text", NULL };
    char *text;
    GtkWidget *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:gwy_label_new_header", kwlist, &text))
        return NULL;
    
    ret = gwy_label_new_header(text);
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_widget_get_activate_on_unfocus(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "widget", NULL };
    PyGObject *widget;
    int ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:gwy_widget_get_activate_on_unfocus", kwlist, &PyGtkWidget_Type, &widget))
        return NULL;
    
    ret = gwy_widget_get_activate_on_unfocus(GTK_WIDGET(widget->obj));
    
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_widget_set_activate_on_unfocus(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "widget", "activate", NULL };
    PyGObject *widget;
    int activate;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!i:gwy_widget_set_activate_on_unfocus", kwlist, &PyGtkWidget_Type, &widget, &activate))
        return NULL;
    
    gwy_widget_set_activate_on_unfocus(GTK_WIDGET(widget->obj), activate);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_widget_sync_sensitivity(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "master", "slave", NULL };
    PyGObject *master, *slave;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!:gwy_widget_sync_sensitivity", kwlist, &PyGtkWidget_Type, &master, &PyGtkWidget_Type, &slave))
        return NULL;
    
    gwy_widget_sync_sensitivity(GTK_WIDGET(master->obj), GTK_WIDGET(slave->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_graph_draw_point(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "red", "green", "blue", "color", NULL };
    PyGObject *drawable, *gc;
    int x, y, size;
    GwyRGBA s_color, *color = &s_color;
    GwyGraphPointType type;
    PyObject *py_type = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!iiOidddd:gwy_graph_draw_point", kwlist, &PyGdkDrawable_Type, &drawable, &PyGdkGC_Type, &gc, &x, &y, &py_type, &size, &color->r, &color->g, &color->b, &color->a))
        return NULL;
    if (pyg_enum_get_value(GWY_TYPE_GRAPH_POINT_TYPE, py_type, (gpointer)&type))
        return NULL;
    gwy_debug("color: %f %f %f %f", color->r, color->g, color->b, color->a);    
    gwy_graph_draw_point(GDK_DRAWABLE(drawable->obj), GDK_GC(gc->obj), x, y, type, size, color);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_graph_get_preset_color(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "i", NULL };
    PyObject *py_i = NULL, *color_tuple;
    GwyRGBA *ret;
    guint i = 0;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O:gwy_graph_get_preset_color", kwlist, &py_i))
        return NULL;
    if (py_i) {
        if (PyLong_Check(py_i))
            i = PyLong_AsUnsignedLong(py_i);
        else if (PyInt_Check(py_i))
            i = PyInt_AsLong(py_i);
        else
            PyErr_SetString(PyExc_TypeError, "Parameter 'i' must be an int or a long");
        if (PyErr_Occurred())
            return NULL;
    }
    
    ret = gwy_graph_get_preset_color(i);
    
    color_tuple = PyTuple_New(4);
    PyTuple_SetItem(color_tuple, 0, PyFloat_FromDouble(ret->r));
    PyTuple_SetItem(color_tuple, 1, PyFloat_FromDouble(ret->g));
    PyTuple_SetItem(color_tuple, 2, PyFloat_FromDouble(ret->b));
    PyTuple_SetItem(color_tuple, 3, PyFloat_FromDouble(ret->a));
    return color_tuple;
}

static PyObject *
_wrap_gwy_graph_get_n_preset_colors(PyObject *self)
{
    guint ret;

    
    ret = gwy_graph_get_n_preset_colors();
    
    return PyLong_FromUnsignedLong(ret);
}

static PyObject *
_wrap_gwy_graph_window_class_set_tooltips(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "tips", NULL };
    PyGObject *tips;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:gwy_graph_window_class_set_tooltips", kwlist, &PyGtkTooltips_Type, &tips))
        return NULL;
    
    gwy_graph_window_class_set_tooltips(GTK_TOOLTIPS(tips->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_graph_window_class_get_tooltips(PyObject *self)
{
    GtkTooltips *ret;

    
    ret = gwy_graph_window_class_get_tooltips();
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_gradient_tree_view_set_active(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "treeview", "active", NULL };
    PyGObject *treeview;
    char *active;
    int ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!s:gwy_gradient_tree_view_set_active", kwlist, &PyGtkWidget_Type, &treeview, &active))
        return NULL;
    
    ret = gwy_gradient_tree_view_set_active(GTK_WIDGET(treeview->obj), active);
    
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_gradient_selection_get_active(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "selection", NULL };
    PyGObject *selection;
    const gchar *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:gwy_gradient_selection_get_active", kwlist, &PyGtkWidget_Type, &selection))
        return NULL;
    
    ret = gwy_gradient_selection_get_active(GTK_WIDGET(selection->obj));
    
    if (ret)
        return PyString_FromString(ret);
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_gradient_selection_set_active(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "selection", "active", NULL };
    PyGObject *selection;
    char *active;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!s:gwy_gradient_selection_set_active", kwlist, &PyGtkWidget_Type, &selection, &active))
        return NULL;
    
    gwy_gradient_selection_set_active(GTK_WIDGET(selection->obj), active);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_gl_material_tree_view_set_active(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "treeview", "active", NULL };
    PyGObject *treeview;
    char *active;
    int ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!s:gwy_gl_material_tree_view_set_active", kwlist, &PyGtkWidget_Type, &treeview, &active))
        return NULL;
    
    ret = gwy_gl_material_tree_view_set_active(GTK_WIDGET(treeview->obj), active);
    
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_gl_material_selection_get_active(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "selection", NULL };
    PyGObject *selection;
    const gchar *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:gwy_gl_material_selection_get_active", kwlist, &PyGtkWidget_Type, &selection))
        return NULL;
    
    ret = gwy_gl_material_selection_get_active(GTK_WIDGET(selection->obj));
    
    if (ret)
        return PyString_FromString(ret);
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_gl_material_selection_set_active(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "selection", "active", NULL };
    PyGObject *selection;
    char *active;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!s:gwy_gl_material_selection_set_active", kwlist, &PyGtkWidget_Type, &selection, &active))
        return NULL;
    
    gwy_gl_material_selection_set_active(GTK_WIDGET(selection->obj), active);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_resource_tree_view_set_active(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "treeview", "active", NULL };
    PyGObject *treeview;
    char *active;
    int ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!s:gwy_resource_tree_view_set_active", kwlist, &PyGtkWidget_Type, &treeview, &active))
        return NULL;
    
    ret = gwy_resource_tree_view_set_active(GTK_WIDGET(treeview->obj), active);
    
    return PyBool_FromLong(ret);

}

static PyObject *
_wrap_gwy_radio_button_get_value(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "button", NULL };
    PyGObject *button;
    int ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:gwy_radio_button_get_value", kwlist, &PyGtkWidget_Type, &button))
        return NULL;
    
    ret = gwy_radio_button_get_value(GTK_WIDGET(button->obj));
    
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_gwy_radio_button_set_value(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "button", "value", NULL };
    PyGObject *button;
    int value;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!i:gwy_radio_button_set_value", kwlist, &PyGtkWidget_Type, &button, &value))
        return NULL;
    
    gwy_radio_button_set_value(GTK_WIDGET(button->obj), value);
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_stock_register_stock_items(PyObject *self)
{
    
    gwy_stock_register_stock_items();
    
    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gwy_app_data_browser_get_data_ids_wrap(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "data", NULL };
    PyGObject *data;
    PyObject *py_ret;
    GArrayInt *ret;
    gint i_ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:gwy_app_data_browser_get_data_ids", kwlist, &PyGwyContainer_Type, &data))
        return NULL;
    
    ret = gwy_app_data_browser_get_data_ids_wrap(GWY_CONTAINER(data->obj));
    
    py_ret = PyList_New(ret->len);
    for (i_ret = 0; i_ret < ret->len; i_ret++) {
        PyList_SetItem(py_ret, i_ret, PyInt_FromLong(g_array_index(ret, gint, i_ret)));
    }
    g_array_free(ret, TRUE);
    return py_ret;

}

static PyObject *
_wrap_gwy_get_key_from_name(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "name", NULL };
    char *name;
    int ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:gwy_get_key_from_name", kwlist, &name))
        return NULL;
    
    ret = gwy_get_key_from_name(name);
    
    return PyInt_FromLong(ret);
}

static PyObject *
_wrap_gwy_tip_dilation_wrap(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "tip", "surface", NULL };
    PyGObject *tip, *surface;
    GwyDataField *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!:gwy_tip_dilation", kwlist, &PyGwyDataField_Type, &tip, &PyGwyDataField_Type, &surface))
        return NULL;
    
    ret = gwy_tip_dilation_wrap(GWY_DATA_FIELD(tip->obj), GWY_DATA_FIELD(surface->obj));
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_tip_erosion_wrap(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "tip", "surface", NULL };
    PyGObject *tip, *surface;
    GwyDataField *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!:gwy_tip_erosion", kwlist, &PyGwyDataField_Type, &tip, &PyGwyDataField_Type, &surface))
        return NULL;
    
    ret = gwy_tip_erosion_wrap(GWY_DATA_FIELD(tip->obj), GWY_DATA_FIELD(surface->obj));
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_tip_cmap_wrap(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "tip", "surface", NULL };
    PyGObject *tip, *surface;
    GwyDataField *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!:gwy_tip_cmap", kwlist, &PyGwyDataField_Type, &tip, &PyGwyDataField_Type, &surface))
        return NULL;
    
    ret = gwy_tip_cmap_wrap(GWY_DATA_FIELD(tip->obj), GWY_DATA_FIELD(surface->obj));
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_tip_estimate_partial_wrap(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "tip", "surface", "threshold", "use_edges", NULL };
    PyGObject *tip, *surface;
    double threshold;
    int use_edges;
    GwyDataField *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!di:gwy_tip_estimate_partial", kwlist, &PyGwyDataField_Type, &tip, &PyGwyDataField_Type, &surface, &threshold, &use_edges))
        return NULL;
    
    ret = gwy_tip_estimate_partial_wrap(GWY_DATA_FIELD(tip->obj), GWY_DATA_FIELD(surface->obj), threshold, use_edges);
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

static PyObject *
_wrap_gwy_tip_estimate_full_wrap(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "tip", "surface", "threshold", "use_edges", NULL };
    PyGObject *tip, *surface;
    double threshold;
    int use_edges;
    GwyDataField *ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!O!di:gwy_tip_estimate_full", kwlist, &PyGwyDataField_Type, &tip, &PyGwyDataField_Type, &surface, &threshold, &use_edges))
        return NULL;
    
    ret = gwy_tip_estimate_full_wrap(GWY_DATA_FIELD(tip->obj), GWY_DATA_FIELD(surface->obj), threshold, use_edges);
    
    /* pygobject_new handles NULL checking */
    return pygobject_new((GObject *)ret);
}

#line 153 "./pygwy.override"
/**
 *  gwy_app_data_browser_get_current:
 *  @obj_type: object type, expected values: C{B{APP_DATA_FIELD_ID, APP_GRAPH_MODEL_ID, 
 *  APP_SPECTRA_ID, APP_DATA_FIELD_KEY, APP_MASK_FIELD_KEY, APP_SHOW_FIELD_KEY, 
 *  APP_GRAPH_MODEL_KEY, APP_SPECTRA_KEY, APP_CONTAINER, APP_DATA_VIEW, APP_GRAPH, 
 *  APP_DATA_FIELD, APP_MASK_FIELD, APP_SHOW_FIELD, APP_GRAPH_MODEL, APP_SPECTRA}}
 *
 *  Get current object of given type.
 *
 *  Returns: reference to current object or None.
**/
static PyObject *
_wrap_gwy_app_data_browser_get_current(PyObject *self, PyObject *args, PyObject *kwargs) 
{
   static char *kwlist[] = {"obj_type", NULL};
   GObject *gobj;
   PyObject *py_obj_type = NULL;
   GwyAppWhat obj_type;
   gint iobj;
   GQuark qobj;

   if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O:gwy_app_data_browser_get_current", kwlist, &py_obj_type))
       return NULL;
   if (pyg_enum_get_value(GWY_TYPE_APP_WHAT, py_obj_type, (gpointer)&obj_type))
       return NULL;
   switch (obj_type) {
      case GWY_APP_DATA_FIELD_ID:
      case GWY_APP_GRAPH_MODEL_ID:
      case GWY_APP_SPECTRA_ID:
         // integer
         gwy_app_data_browser_get_current(obj_type, &iobj, NULL);
         return PyInt_FromLong(iobj);
         break;
      case GWY_APP_DATA_FIELD_KEY:
      case GWY_APP_MASK_FIELD_KEY:
      case GWY_APP_SHOW_FIELD_KEY:
      case GWY_APP_GRAPH_MODEL_KEY:
      case GWY_APP_SPECTRA_KEY:
         // quark
         gwy_app_data_browser_get_current(obj_type, &qobj, NULL);
         return PyLong_FromLong(qobj);
         break;
      case GWY_APP_CONTAINER:
      case GWY_APP_DATA_VIEW:
      case GWY_APP_GRAPH:
      case GWY_APP_DATA_FIELD:
      case GWY_APP_MASK_FIELD:
      case GWY_APP_SHOW_FIELD:
      case GWY_APP_GRAPH_MODEL:
      case GWY_APP_SPECTRA:
         // gobject
         gwy_app_data_browser_get_current(obj_type, &gobj, NULL);
         return pygobject_new(gobj);
         break;
      default:
         PyErr_SetString(PyExc_NotImplementedError, "Cannot recognize object type for conversion.");
         return NULL;
         break;
   }
}

#line 19283 "pygwywrap.c"


#line 216 "./pygwy.override"
/**
 *  gwy_app_data_browser_get_containers:
 *
 *  Get list of containers of current data browser.
 *
 *  Returns: list of containers L{Container} object
**/   
static PyObject *
_wrap_gwy_app_data_browser_get_containers(PyGObject *self)
{
   PyObject *list = NULL;

   list = PyList_New(0);
   gwy_app_data_browser_foreach(pygwy_create_py_list_of_containers, (gpointer) list);
   return list;
}

#line 19304 "pygwywrap.c"


const PyMethodDef pygwy_functions[] = {
    { "gwy_cdlines", (PyCFunction)_wrap_gwy_cdlines, METH_NOARGS,
      NULL },
    { "gwy_dwt_set_coefficients", (PyCFunction)_wrap_gwy_dwt_set_coefficients, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_data_field_get_elliptic_area_size", (PyCFunction)_wrap_gwy_data_field_get_elliptic_area_size, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_data_field_get_circular_area_size", (PyCFunction)_wrap_gwy_data_field_get_circular_area_size, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_data_field_fractal_cubecounting_dim", (PyCFunction)_wrap_gwy_data_field_fractal_cubecounting_dim, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_data_field_fractal_triangulation_dim", (PyCFunction)_wrap_gwy_data_field_fractal_triangulation_dim, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_data_field_fractal_partitioning_dim", (PyCFunction)_wrap_gwy_data_field_fractal_partitioning_dim, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_data_field_fractal_psdf_dim", (PyCFunction)_wrap_gwy_data_field_fractal_psdf_dim, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_process_type_init", (PyCFunction)_wrap_gwy_process_type_init, METH_NOARGS,
      NULL },
    { "gwy_interpolation_get_dval", (PyCFunction)_wrap_gwy_interpolation_get_dval, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_interpolation_interpolate_1d", (PyCFunction)_wrap_gwy_interpolation_interpolate_1d, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_interpolation_interpolate_2d", (PyCFunction)_wrap_gwy_interpolation_interpolate_2d, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_interpolation_has_interpolating_basis", (PyCFunction)_wrap_gwy_interpolation_has_interpolating_basis, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_interpolation_get_support_size", (PyCFunction)_wrap_gwy_interpolation_get_support_size, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_fft_find_nice_size", (PyCFunction)_wrap_gwy_fft_find_nice_size, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_fft_window_data_field", (PyCFunction)_wrap_gwy_fft_window_data_field, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_tip_model_get_npresets", (PyCFunction)_wrap_gwy_tip_model_get_npresets, METH_NOARGS,
      NULL },
    { "gwy_container_deserialize_from_text", (PyCFunction)_wrap_gwy_container_deserialize_from_text, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_type_init", (PyCFunction)_wrap_gwy_type_init, METH_NOARGS,
      NULL },
    { "gwy_entities", (PyCFunction)_wrap_gwy_entities, METH_NOARGS,
      NULL },
    { "gwy_entities_entity_to_utf8", (PyCFunction)_wrap_gwy_entities_entity_to_utf8, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_entities_text_to_utf8", (PyCFunction)_wrap_gwy_entities_text_to_utf8, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_enum_sanitize_value", (PyCFunction)_wrap_gwy_enum_sanitize_value, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_expr_error_quark", (PyCFunction)_wrap_gwy_expr_error_quark, METH_NOARGS,
      NULL },
    { "gwy_fd_curve_presets", (PyCFunction)_wrap_gwy_fd_curve_presets, METH_NOARGS,
      NULL },
    { "gwy_math_is_in_polygon", (PyCFunction)_wrap_gwy_math_is_in_polygon, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_nlfit_presets", (PyCFunction)_wrap_gwy_nlfit_presets, METH_NOARGS,
      NULL },
    { "gwy_resource_parse", (PyCFunction)_wrap_gwy_resource_parse, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_resource_classes_finalize", (PyCFunction)_wrap_gwy_resource_classes_finalize, METH_NOARGS,
      NULL },
    { "gwy_serializable_duplicate", (PyCFunction)_wrap_gwy_serializable_duplicate, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_serializable_clone", (PyCFunction)_wrap_gwy_serializable_clone, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_serializable_get_size", (PyCFunction)_wrap_gwy_serializable_get_size, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_serialize_check_string", (PyCFunction)_wrap_gwy_serialize_check_string, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_si_unit_new_parse", (PyCFunction)_wrap_gwy_si_unit_new_parse, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_strkill", (PyCFunction)_wrap_gwy_strkill, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_strreplace", (PyCFunction)_wrap_gwy_strreplace, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_strdiffpos", (PyCFunction)_wrap_gwy_strdiffpos, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_strisident", (PyCFunction)_wrap_gwy_strisident, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_file_abandon_contents", (PyCFunction)_wrap_gwy_file_abandon_contents, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_find_self_dir", (PyCFunction)_wrap_gwy_find_self_dir, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_get_user_dir", (PyCFunction)_wrap_gwy_get_user_dir, METH_NOARGS,
      NULL },
    { "gwy_get_home_dir", (PyCFunction)_wrap_gwy_get_home_dir, METH_NOARGS,
      NULL },
    { "gwy_canonicalize_path", (PyCFunction)_wrap_gwy_canonicalize_path, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_filename_ignore", (PyCFunction)_wrap_gwy_filename_ignore, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_sgettext", (PyCFunction)_wrap_gwy_sgettext, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_version_major", (PyCFunction)_wrap_gwy_version_major, METH_NOARGS,
      NULL },
    { "gwy_version_minor", (PyCFunction)_wrap_gwy_version_minor, METH_NOARGS,
      NULL },
    { "gwy_version_string", (PyCFunction)_wrap_gwy_version_string, METH_NOARGS,
      NULL },
    { "gwy_app_switch_tool", (PyCFunction)_wrap_gwy_app_switch_tool, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_app_add_main_accel_group", (PyCFunction)_wrap_gwy_app_add_main_accel_group, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_app_save_window_position", (PyCFunction)_wrap_gwy_app_save_window_position, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_app_restore_window_position", (PyCFunction)_wrap_gwy_app_restore_window_position, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_app_main_window_get", (PyCFunction)_wrap_gwy_app_main_window_get, METH_NOARGS,
      NULL },
    { "gwy_app_data_view_change_mask_color", (PyCFunction)_wrap_gwy_app_data_view_change_mask_color, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_app_quit", (PyCFunction)_wrap_gwy_app_quit, METH_NOARGS,
      NULL },
    { "gwy_app_init_widget_styles", (PyCFunction)_wrap_gwy_app_init_widget_styles, METH_NOARGS,
      NULL },
    { "gwy_app_init_i18n", (PyCFunction)_wrap_gwy_app_init_i18n, METH_NOARGS,
      NULL },
    { "gwy_app_data_browser_add", (PyCFunction)_wrap_gwy_app_data_browser_add, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_app_data_browser_remove", (PyCFunction)_wrap_gwy_app_data_browser_remove, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_app_data_browser_merge", (PyCFunction)_wrap_gwy_app_data_browser_merge, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_app_data_browser_reset_visibility", (PyCFunction)_wrap_gwy_app_data_browser_reset_visibility, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_app_data_browser_set_keep_invisible", (PyCFunction)_wrap_gwy_app_data_browser_set_keep_invisible, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_app_data_browser_get_keep_invisible", (PyCFunction)_wrap_gwy_app_data_browser_get_keep_invisible, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_app_data_browser_select_data_view", (PyCFunction)_wrap_gwy_app_data_browser_select_data_view, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_app_data_browser_select_graph", (PyCFunction)_wrap_gwy_app_data_browser_select_graph, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_app_data_browser_select_spectra", (PyCFunction)_wrap_gwy_app_data_browser_select_spectra, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_app_data_browser_add_data_field", (PyCFunction)_wrap_gwy_app_data_browser_add_data_field, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_app_data_browser_add_graph_model", (PyCFunction)_wrap_gwy_app_data_browser_add_graph_model, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_app_data_browser_add_spectra", (PyCFunction)_wrap_gwy_app_data_browser_add_spectra, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_app_data_browser_get_data_ids", (PyCFunction)_wrap_gwy_app_data_browser_get_data_ids, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_app_data_clear_selections", (PyCFunction)_wrap_gwy_app_data_clear_selections, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_app_data_browser_copy_channel", (PyCFunction)_wrap_gwy_app_data_browser_copy_channel, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_app_get_data_key_for_id", (PyCFunction)_wrap_gwy_app_get_data_key_for_id, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_app_get_mask_key_for_id", (PyCFunction)_wrap_gwy_app_get_mask_key_for_id, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_app_get_show_key_for_id", (PyCFunction)_wrap_gwy_app_get_show_key_for_id, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_app_get_graph_key_for_id", (PyCFunction)_wrap_gwy_app_get_graph_key_for_id, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_app_get_spectra_key_for_id", (PyCFunction)_wrap_gwy_app_get_spectra_key_for_id, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_app_set_data_field_title", (PyCFunction)_wrap_gwy_app_set_data_field_title, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_app_get_data_field_title", (PyCFunction)_wrap_gwy_app_get_data_field_title, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_app_data_browser_show", (PyCFunction)_wrap_gwy_app_data_browser_show, METH_NOARGS,
      NULL },
    { "gwy_app_data_browser_restore", (PyCFunction)_wrap_gwy_app_data_browser_restore, METH_NOARGS,
      NULL },
    { "gwy_app_data_browser_shut_down", (PyCFunction)_wrap_gwy_app_data_browser_shut_down, METH_NOARGS,
      NULL },
    { "gwy_app_get_channel_thumbnail", (PyCFunction)_wrap_gwy_app_get_channel_thumbnail, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_app_data_browser_select_data_field", (PyCFunction)_wrap_gwy_app_data_browser_select_data_field, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_app_data_browser_select_graph_model", (PyCFunction)_wrap_gwy_app_data_browser_select_graph_model, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_app_data_browser_show_3d", (PyCFunction)_wrap_gwy_app_data_browser_show_3d, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_app_find_window_for_channel", (PyCFunction)_wrap_gwy_app_find_window_for_channel, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_data_chooser_new_channels", (PyCFunction)_wrap_gwy_data_chooser_new_channels, METH_NOARGS,
      NULL },
    { "gwy_app_get_current_directory", (PyCFunction)_wrap_gwy_app_get_current_directory, METH_NOARGS,
      NULL },
    { "gwy_app_set_current_directory", (PyCFunction)_wrap_gwy_app_set_current_directory, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_app_file_load", (PyCFunction)_wrap_gwy_app_file_load, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_app_file_open", (PyCFunction)_wrap_gwy_app_file_open, METH_NOARGS,
      NULL },
    { "gwy_app_file_merge", (PyCFunction)_wrap_gwy_app_file_merge, METH_NOARGS,
      NULL },
    { "gwy_app_file_write", (PyCFunction)_wrap_gwy_app_file_write, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_app_file_save", (PyCFunction)_wrap_gwy_app_file_save, METH_NOARGS,
      NULL },
    { "gwy_app_file_save_as", (PyCFunction)_wrap_gwy_app_file_save_as, METH_NOARGS,
      NULL },
    { "gwy_app_file_confirm_overwrite", (PyCFunction)_wrap_gwy_app_file_confirm_overwrite, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_app_recent_file_list_update", (PyCFunction)_wrap_gwy_app_recent_file_list_update, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_app_recent_file_list_load", (PyCFunction)_wrap_gwy_app_recent_file_list_load, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_app_recent_file_list_save", (PyCFunction)_wrap_gwy_app_recent_file_list_save, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_app_recent_file_list_free", (PyCFunction)_wrap_gwy_app_recent_file_list_free, METH_NOARGS,
      NULL },
    { "gwy_app_recent_file_get_thumbnail", (PyCFunction)_wrap_gwy_app_recent_file_get_thumbnail, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_func_use_get_filename", (PyCFunction)_wrap_gwy_func_use_get_filename, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_app_process_func_save_use", (PyCFunction)_wrap_gwy_app_process_func_save_use, METH_NOARGS,
      NULL },
    { "gwy_app_gl_material_editor", (PyCFunction)_wrap_gwy_app_gl_material_editor, METH_NOARGS,
      NULL },
    { "gwy_app_gradient_editor", (PyCFunction)_wrap_gwy_app_gradient_editor, METH_NOARGS,
      NULL },
    { "gwy_app_channel_title_fall_back", (PyCFunction)_wrap_gwy_app_channel_title_fall_back, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_save_auxiliary_data", (PyCFunction)_wrap_gwy_save_auxiliary_data, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_set_data_preview_size", (PyCFunction)_wrap_gwy_set_data_preview_size, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_plain_tool_get_z_average", (PyCFunction)_wrap_gwy_plain_tool_get_z_average, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_app_process_menu_add_run_last", (PyCFunction)_wrap_gwy_app_process_menu_add_run_last, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_app_run_process_func", (PyCFunction)_wrap_gwy_app_run_process_func, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_app_run_process_func_in_mode", (PyCFunction)_wrap_gwy_app_run_process_func_in_mode, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_app_run_graph_func", (PyCFunction)_wrap_gwy_app_run_graph_func, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_app_menu_recent_files_get", (PyCFunction)_wrap_gwy_app_menu_recent_files_get, METH_NOARGS,
      NULL },
    { "gwy_app_get_tooltips", (PyCFunction)_wrap_gwy_app_get_tooltips, METH_NOARGS,
      NULL },
    { "gwy_app_sensitivity_get_group", (PyCFunction)_wrap_gwy_app_sensitivity_get_group, METH_NOARGS,
      NULL },
    { "gwy_app_sensitivity_add_widget", (PyCFunction)_wrap_gwy_app_sensitivity_add_widget, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_app_sensitivity_set_state", (PyCFunction)_wrap_gwy_app_sensitivity_set_state, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_app_settings_error_quark", (PyCFunction)_wrap_gwy_app_settings_error_quark, METH_NOARGS,
      NULL },
    { "gwy_app_settings_get", (PyCFunction)_wrap_gwy_app_settings_get, METH_NOARGS,
      NULL },
    { "gwy_app_settings_free", (PyCFunction)_wrap_gwy_app_settings_free, METH_NOARGS,
      NULL },
    { "gwy_app_settings_save", (PyCFunction)_wrap_gwy_app_settings_save, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_app_settings_load", (PyCFunction)_wrap_gwy_app_settings_load, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_app_settings_create_config_dir", (PyCFunction)_wrap_gwy_app_settings_create_config_dir, METH_NOARGS,
      NULL },
    { "gwy_app_settings_get_settings_filename", (PyCFunction)_wrap_gwy_app_settings_get_settings_filename, METH_NOARGS,
      NULL },
    { "gwy_app_settings_get_log_filename", (PyCFunction)_wrap_gwy_app_settings_get_log_filename, METH_NOARGS,
      NULL },
    { "gwy_app_settings_get_recent_file_list_filename", (PyCFunction)_wrap_gwy_app_settings_get_recent_file_list_filename, METH_NOARGS,
      NULL },
    { "gwy_app_gl_is_ok", (PyCFunction)_wrap_gwy_app_gl_is_ok, METH_NOARGS,
      NULL },
    { "gwy_app_undo_qcheckpointv", (PyCFunction)_wrap_gwy_app_undo_qcheckpointv, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_app_undo_undo_container", (PyCFunction)_wrap_gwy_app_undo_undo_container, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_app_undo_redo_container", (PyCFunction)_wrap_gwy_app_undo_redo_container, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_undo_undo_container", (PyCFunction)_wrap_gwy_undo_undo_container, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_undo_redo_container", (PyCFunction)_wrap_gwy_undo_redo_container, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_undo_container_has_undo", (PyCFunction)_wrap_gwy_undo_container_has_undo, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_undo_container_has_redo", (PyCFunction)_wrap_gwy_undo_container_has_redo, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_undo_container_get_modified", (PyCFunction)_wrap_gwy_undo_container_get_modified, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_undo_container_set_unmodified", (PyCFunction)_wrap_gwy_undo_container_set_unmodified, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_undo_container_remove", (PyCFunction)_wrap_gwy_undo_container_remove, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_app_wait_start", (PyCFunction)_wrap_gwy_app_wait_start, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_app_wait_finish", (PyCFunction)_wrap_gwy_app_wait_finish, METH_NOARGS,
      NULL },
    { "gwy_app_wait_set_fraction", (PyCFunction)_wrap_gwy_app_wait_set_fraction, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_app_wait_set_message", (PyCFunction)_wrap_gwy_app_wait_set_message, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_app_wait_set_message_prefix", (PyCFunction)_wrap_gwy_app_wait_set_message_prefix, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_app_wait_cursor_start", (PyCFunction)_wrap_gwy_app_wait_cursor_start, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_app_wait_cursor_finish", (PyCFunction)_wrap_gwy_app_wait_cursor_finish, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_draw_type_init", (PyCFunction)_wrap_gwy_draw_type_init, METH_NOARGS,
      NULL },
    { "gwy_gl_materials", (PyCFunction)_wrap_gwy_gl_materials, METH_NOARGS,
      NULL },
    { "gwy_gl_materials_get_gl_material", (PyCFunction)_wrap_gwy_gl_materials_get_gl_material, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_gradients", (PyCFunction)_wrap_gwy_gradients, METH_NOARGS,
      NULL },
    { "gwy_gradients_get_gradient", (PyCFunction)_wrap_gwy_gradients_get_gradient, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_pixbuf_draw_data_field", (PyCFunction)_wrap_gwy_pixbuf_draw_data_field, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_pixbuf_draw_data_field_with_range", (PyCFunction)_wrap_gwy_pixbuf_draw_data_field_with_range, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_pixbuf_draw_data_field_adaptive", (PyCFunction)_wrap_gwy_pixbuf_draw_data_field_adaptive, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_pixbuf_draw_data_field_as_mask", (PyCFunction)_wrap_gwy_pixbuf_draw_data_field_as_mask, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_rgba_remove_from_container", (PyCFunction)_wrap_gwy_rgba_remove_from_container, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_module_browser", (PyCFunction)_wrap_gwy_module_browser, METH_NOARGS,
      NULL },
    { "gwy_file_func_run_detect", (PyCFunction)_wrap_gwy_file_func_run_detect, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_file_func_run_load", (PyCFunction)_wrap_gwy_file_func_run_load, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_file_func_run_save", (PyCFunction)_wrap_gwy_file_func_run_save, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_file_func_run_export", (PyCFunction)_wrap_gwy_file_func_run_export, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_file_func_exists", (PyCFunction)_wrap_gwy_file_func_exists, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_file_func_get_operations", (PyCFunction)_wrap_gwy_file_func_get_operations, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_file_func_get_description", (PyCFunction)_wrap_gwy_file_func_get_description, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_file_detect", (PyCFunction)_wrap_gwy_file_detect, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_file_detect_with_score", (PyCFunction)_wrap_gwy_file_detect_with_score, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_file_load", (PyCFunction)_wrap_gwy_file_load, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_file_save", (PyCFunction)_wrap_gwy_file_save, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_module_file_error_quark", (PyCFunction)_wrap_gwy_module_file_error_quark, METH_NOARGS,
      NULL },
    { "gwy_graph_func_run", (PyCFunction)_wrap_gwy_graph_func_run, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_graph_func_exists", (PyCFunction)_wrap_gwy_graph_func_exists, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_graph_func_get_menu_path", (PyCFunction)_wrap_gwy_graph_func_get_menu_path, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_graph_func_get_stock_id", (PyCFunction)_wrap_gwy_graph_func_get_stock_id, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_graph_func_get_tooltip", (PyCFunction)_wrap_gwy_graph_func_get_tooltip, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_graph_func_get_sensitivity_mask", (PyCFunction)_wrap_gwy_graph_func_get_sensitivity_mask, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_layer_func_register", (PyCFunction)_wrap_gwy_layer_func_register, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_module_error_quark", (PyCFunction)_wrap_gwy_module_error_quark, METH_NOARGS,
      NULL },
    { "gwy_module_get_filename", (PyCFunction)_wrap_gwy_module_get_filename, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_process_func_run", (PyCFunction)_wrap_gwy_process_func_run, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_process_func_exists", (PyCFunction)_wrap_gwy_process_func_exists, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_process_func_get_run_types", (PyCFunction)_wrap_gwy_process_func_get_run_types, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_process_func_get_menu_path", (PyCFunction)_wrap_gwy_process_func_get_menu_path, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_process_func_get_stock_id", (PyCFunction)_wrap_gwy_process_func_get_stock_id, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_process_func_get_tooltip", (PyCFunction)_wrap_gwy_process_func_get_tooltip, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_process_func_get_sensitivity_mask", (PyCFunction)_wrap_gwy_process_func_get_sensitivity_mask, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_tool_func_register", (PyCFunction)_wrap_gwy_tool_func_register, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_3d_window_class_set_tooltips", (PyCFunction)_wrap_gwy_3d_window_class_set_tooltips, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_3d_window_class_get_tooltips", (PyCFunction)_wrap_gwy_3d_window_class_get_tooltips, METH_NOARGS,
      NULL },
    { "gwy_color_axis_new_with_range", (PyCFunction)_wrap_gwy_color_axis_new_with_range, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_color_button_new_with_color", (PyCFunction)_wrap_gwy_color_button_new_with_color, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_combo_box_metric_unit_set_unit", (PyCFunction)_wrap_gwy_combo_box_metric_unit_set_unit, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_enum_combo_box_set_active", (PyCFunction)_wrap_gwy_enum_combo_box_set_active, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_enum_combo_box_get_active", (PyCFunction)_wrap_gwy_enum_combo_box_get_active, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_enum_combo_box_update_int", (PyCFunction)_wrap_gwy_enum_combo_box_update_int, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_data_window_class_set_tooltips", (PyCFunction)_wrap_gwy_data_window_class_set_tooltips, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_data_window_class_get_tooltips", (PyCFunction)_wrap_gwy_data_window_class_get_tooltips, METH_NOARGS,
      NULL },
    { "gwy_widgets_type_init", (PyCFunction)_wrap_gwy_widgets_type_init, METH_NOARGS,
      NULL },
    { "gwy_widgets_gl_init", (PyCFunction)_wrap_gwy_widgets_gl_init, METH_NOARGS,
      NULL },
    { "gwy_widgets_get_gl_config", (PyCFunction)_wrap_gwy_widgets_get_gl_config, METH_NOARGS,
      NULL },
    { "gwy_table_attach_spinbutton", (PyCFunction)_wrap_gwy_table_attach_spinbutton, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_table_attach_row", (PyCFunction)_wrap_gwy_table_attach_row, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_table_attach_hscale", (PyCFunction)_wrap_gwy_table_attach_hscale, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_table_hscale_set_sensitive", (PyCFunction)_wrap_gwy_table_hscale_set_sensitive, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_table_get_child_widget", (PyCFunction)_wrap_gwy_table_get_child_widget, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_color_selector_for_mask", (PyCFunction)_wrap_gwy_color_selector_for_mask, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_mask_color_selector_run", (PyCFunction)_wrap_gwy_mask_color_selector_run, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_dialog_prevent_delete_cb", (PyCFunction)_wrap_gwy_dialog_prevent_delete_cb, METH_NOARGS,
      NULL },
    { "gwy_label_new_header", (PyCFunction)_wrap_gwy_label_new_header, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_widget_get_activate_on_unfocus", (PyCFunction)_wrap_gwy_widget_get_activate_on_unfocus, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_widget_set_activate_on_unfocus", (PyCFunction)_wrap_gwy_widget_set_activate_on_unfocus, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_widget_sync_sensitivity", (PyCFunction)_wrap_gwy_widget_sync_sensitivity, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_graph_draw_point", (PyCFunction)_wrap_gwy_graph_draw_point, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_graph_get_preset_color", (PyCFunction)_wrap_gwy_graph_get_preset_color, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_graph_get_n_preset_colors", (PyCFunction)_wrap_gwy_graph_get_n_preset_colors, METH_NOARGS,
      NULL },
    { "gwy_graph_window_class_set_tooltips", (PyCFunction)_wrap_gwy_graph_window_class_set_tooltips, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_graph_window_class_get_tooltips", (PyCFunction)_wrap_gwy_graph_window_class_get_tooltips, METH_NOARGS,
      NULL },
    { "gwy_gradient_tree_view_set_active", (PyCFunction)_wrap_gwy_gradient_tree_view_set_active, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_gradient_selection_get_active", (PyCFunction)_wrap_gwy_gradient_selection_get_active, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_gradient_selection_set_active", (PyCFunction)_wrap_gwy_gradient_selection_set_active, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_gl_material_tree_view_set_active", (PyCFunction)_wrap_gwy_gl_material_tree_view_set_active, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_gl_material_selection_get_active", (PyCFunction)_wrap_gwy_gl_material_selection_get_active, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_gl_material_selection_set_active", (PyCFunction)_wrap_gwy_gl_material_selection_set_active, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_resource_tree_view_set_active", (PyCFunction)_wrap_gwy_resource_tree_view_set_active, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_radio_button_get_value", (PyCFunction)_wrap_gwy_radio_button_get_value, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_radio_button_set_value", (PyCFunction)_wrap_gwy_radio_button_set_value, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_stock_register_stock_items", (PyCFunction)_wrap_gwy_stock_register_stock_items, METH_NOARGS,
      NULL },
    { "gwy_app_data_browser_get_data_ids", (PyCFunction)_wrap_gwy_app_data_browser_get_data_ids_wrap, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_get_key_from_name", (PyCFunction)_wrap_gwy_get_key_from_name, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_tip_dilation", (PyCFunction)_wrap_gwy_tip_dilation_wrap, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_tip_erosion", (PyCFunction)_wrap_gwy_tip_erosion_wrap, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_tip_cmap", (PyCFunction)_wrap_gwy_tip_cmap_wrap, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_tip_estimate_partial", (PyCFunction)_wrap_gwy_tip_estimate_partial_wrap, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_tip_estimate_full", (PyCFunction)_wrap_gwy_tip_estimate_full_wrap, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_app_data_browser_get_current", (PyCFunction)_wrap_gwy_app_data_browser_get_current, METH_VARARGS|METH_KEYWORDS,
      NULL },
    { "gwy_app_data_browser_get_containers", (PyCFunction)_wrap_gwy_app_data_browser_get_containers, METH_NOARGS,
      NULL },
    { NULL, NULL, 0, NULL }
};


/* ----------- enums and flags ----------- */

static void
pygwy_add_constants(PyObject *module, const gchar *strip_prefix)
{
#ifdef VERSION
    PyModule_AddStringConstant(module, "__version__", VERSION);
#endif
  pyg_enum_add(module, "MergeType", strip_prefix, GWY_TYPE_MERGE_TYPE);
  pyg_enum_add(module, "WatershedStateType", strip_prefix, GWY_TYPE_WATERSHED_STATE_TYPE);
  pyg_enum_add(module, "PlaneSymmetry", strip_prefix, GWY_TYPE_PLANE_SYMMETRY);
  pyg_enum_add(module, "Orientation", strip_prefix, GWY_TYPE_ORIENTATION);
  pyg_enum_add(module, "TransformDirection", strip_prefix, GWY_TYPE_TRANSFORM_DIRECTION);
  pyg_enum_add(module, "DataFieldCached", strip_prefix, GWY_TYPE_DATA_FIELD_CACHED);
  pyg_enum_add(module, "ComputationStateType", strip_prefix, GWY_TYPE_COMPUTATION_STATE_TYPE);
  pyg_enum_add(module, "DWTType", strip_prefix, GWY_TYPE_DWT_TYPE);
  pyg_enum_add(module, "DWTDenoiseType", strip_prefix, GWY_TYPE_DWT_DENOISE_TYPE);
  pyg_enum_add(module, "InterpolationType", strip_prefix, GWY_TYPE_INTERPOLATION_TYPE);
  pyg_enum_add(module, "PlaneFitQuantity", strip_prefix, GWY_TYPE_PLANE_FIT_QUANTITY);
  pyg_enum_add(module, "WindowingType", strip_prefix, GWY_TYPE_WINDOWING_TYPE);
  pyg_enum_add(module, "TipType", strip_prefix, GWY_TYPE_TIP_TYPE);
  pyg_enum_add(module, "CorrelationType", strip_prefix, GWY_TYPE_CORRELATION_TYPE);
  pyg_enum_add(module, "GrainQuantity", strip_prefix, GWY_TYPE_GRAIN_QUANTITY);
  pyg_flags_add(module, "DataCompatibilityFlags", strip_prefix, GWY_TYPE_DATA_COMPATIBILITY_FLAGS);
  pyg_enum_add(module, "LineStatQuantity", strip_prefix, GWY_TYPE_LINE_STAT_QUANTITY);
  pyg_enum_add(module, "ExteriorType", strip_prefix, GWY_TYPE_EXTERIOR_TYPE);
  pyg_enum_add(module, "SIUnitFormatStyle", strip_prefix, GWY_TYPE_SI_UNIT_FORMAT_STYLE);
  pyg_enum_add(module, "ExprError", strip_prefix, GWY_TYPE_EXPR_ERROR);
  pyg_enum_add(module, "AppWhat", strip_prefix, GWY_TYPE_APP_WHAT);
  pyg_enum_add(module, "DataItem", strip_prefix, GWY_TYPE_DATA_ITEM);
  pyg_enum_add(module, "VisibilityResetType", strip_prefix, GWY_TYPE_VISIBILITY_RESET_TYPE);
  pyg_flags_add(module, "PlainToolChanged", strip_prefix, GWY_TYPE_PLAIN_TOOL_CHANGED);
  pyg_flags_add(module, "MenuSensFlags", strip_prefix, GWY_TYPE_MENU_SENS_FLAGS);
  pyg_enum_add(module, "AppSettingsError", strip_prefix, GWY_TYPE_APP_SETTINGS_ERROR);
  pyg_flags_add(module, "FileOperationType", strip_prefix, GWY_TYPE_FILE_OPERATION_TYPE);
  pyg_enum_add(module, "ToolSwitchEvent", strip_prefix, GWY_TYPE_TOOL_SWITCH_EVENT);
  pyg_flags_add(module, "RunType", strip_prefix, GWY_TYPE_RUN_TYPE);
  pyg_enum_add(module, "ModuleFileError", strip_prefix, GWY_TYPE_MODULE_FILE_ERROR);
  pyg_enum_add(module, "ModuleError", strip_prefix, GWY_TYPE_MODULE_ERROR);
  pyg_enum_add(module, "AxisScaleFormat", strip_prefix, GWY_TYPE_AXIS_SCALE_FORMAT);
  pyg_enum_add(module, "UnitsPlacement", strip_prefix, GWY_TYPE_UNITS_PLACEMENT);
  pyg_enum_add(module, "HScaleStyle", strip_prefix, GWY_TYPE_HSCALE_STYLE);
  pyg_enum_add(module, "GraphStatusType", strip_prefix, GWY_TYPE_GRAPH_STATUS_TYPE);
  pyg_enum_add(module, "GraphGridType", strip_prefix, GWY_TYPE_GRAPH_GRID_TYPE);
  pyg_enum_add(module, "GraphPointType", strip_prefix, GWY_TYPE_GRAPH_POINT_TYPE);
  pyg_enum_add(module, "GraphCurveType", strip_prefix, GWY_TYPE_GRAPH_CURVE_TYPE);
  pyg_enum_add(module, "GraphLabelPosition", strip_prefix, GWY_TYPE_GRAPH_LABEL_POSITION);
  pyg_enum_add(module, "GraphModelExportStyle", strip_prefix, GWY_TYPE_GRAPH_MODEL_EXPORT_STYLE);
  pyg_enum_add(module, "LayerBasicRangeType", strip_prefix, GWY_TYPE_LAYER_BASIC_RANGE_TYPE);
  pyg_enum_add(module, "CurveType", strip_prefix, GWY_TYPE_CURVE_TYPE);
  pyg_enum_add(module, "CurveChannel", strip_prefix, GWY_TYPE_CURVE_CHANNEL);
  pyg_enum_add(module, "MarkerOperationType", strip_prefix, GWY_TYPE_MARKER_OPERATION_TYPE);
  pyg_enum_add(module, "DataViewLayerType", strip_prefix, GWY_TYPE_DATA_VIEW_LAYER_TYPE);
  pyg_enum_add(module, "TicksStyle", strip_prefix, GWY_TYPE_TICKS_STYLE);

  if (PyErr_Occurred())
    PyErr_Print();
}

/* initialise stuff extension classes */
static void
pygwy_register_classes(PyObject *d)
{
    PyObject *module;

    if ((module = PyImport_ImportModule("gobject")) != NULL) {
        _PyGObject_Type = (PyTypeObject *)PyObject_GetAttrString(module, "GObject");
        if (_PyGObject_Type == NULL) {
            PyErr_SetString(PyExc_ImportError,
                "cannot import name GObject from gobject");
            return ;
        }
    } else {
        PyErr_SetString(PyExc_ImportError,
            "could not import gobject");
        return ;
    }
    if ((module = PyImport_ImportModule("gtk")) != NULL) {
        _PyGtkTable_Type = (PyTypeObject *)PyObject_GetAttrString(module, "Table");
        if (_PyGtkTable_Type == NULL) {
            PyErr_SetString(PyExc_ImportError,
                "cannot import name Table from gtk");
            return ;
        }
        _PyGtkWidget_Type = (PyTypeObject *)PyObject_GetAttrString(module, "Widget");
        if (_PyGtkWidget_Type == NULL) {
            PyErr_SetString(PyExc_ImportError,
                "cannot import name Widget from gtk");
            return ;
        }
        _PyGtkDialog_Type = (PyTypeObject *)PyObject_GetAttrString(module, "Dialog");
        if (_PyGtkDialog_Type == NULL) {
            PyErr_SetString(PyExc_ImportError,
                "cannot import name Dialog from gtk");
            return ;
        }
        _PyGtkButton_Type = (PyTypeObject *)PyObject_GetAttrString(module, "Button");
        if (_PyGtkButton_Type == NULL) {
            PyErr_SetString(PyExc_ImportError,
                "cannot import name Button from gtk");
            return ;
        }
        _PyGtkDrawingArea_Type = (PyTypeObject *)PyObject_GetAttrString(module, "DrawingArea");
        if (_PyGtkDrawingArea_Type == NULL) {
            PyErr_SetString(PyExc_ImportError,
                "cannot import name DrawingArea from gtk");
            return ;
        }
        _PyGtkObject_Type = (PyTypeObject *)PyObject_GetAttrString(module, "Object");
        if (_PyGtkObject_Type == NULL) {
            PyErr_SetString(PyExc_ImportError,
                "cannot import name Object from gtk");
            return ;
        }
        _PyGtkWindow_Type = (PyTypeObject *)PyObject_GetAttrString(module, "Window");
        if (_PyGtkWindow_Type == NULL) {
            PyErr_SetString(PyExc_ImportError,
                "cannot import name Window from gtk");
            return ;
        }
        _PyGtkLayout_Type = (PyTypeObject *)PyObject_GetAttrString(module, "Layout");
        if (_PyGtkLayout_Type == NULL) {
            PyErr_SetString(PyExc_ImportError,
                "cannot import name Layout from gtk");
            return ;
        }
        _PyGtkTreeView_Type = (PyTypeObject *)PyObject_GetAttrString(module, "TreeView");
        if (_PyGtkTreeView_Type == NULL) {
            PyErr_SetString(PyExc_ImportError,
                "cannot import name TreeView from gtk");
            return ;
        }
        _PyGtkVBox_Type = (PyTypeObject *)PyObject_GetAttrString(module, "VBox");
        if (_PyGtkVBox_Type == NULL) {
            PyErr_SetString(PyExc_ImportError,
                "cannot import name VBox from gtk");
            return ;
        }
        _PyGtkStatusbar_Type = (PyTypeObject *)PyObject_GetAttrString(module, "Statusbar");
        if (_PyGtkStatusbar_Type == NULL) {
            PyErr_SetString(PyExc_ImportError,
                "cannot import name Statusbar from gtk");
            return ;
        }
        _PyGtkComboBox_Type = (PyTypeObject *)PyObject_GetAttrString(module, "ComboBox");
        if (_PyGtkComboBox_Type == NULL) {
            PyErr_SetString(PyExc_ImportError,
                "cannot import name ComboBox from gtk");
            return ;
        }
        _PyGtkTooltips_Type = (PyTypeObject *)PyObject_GetAttrString(module, "Tooltips");
        if (_PyGtkTooltips_Type == NULL) {
            PyErr_SetString(PyExc_ImportError,
                "cannot import name Tooltips from gtk");
            return ;
        }
        _PyGtkOrientation_Type = (PyTypeObject *)PyObject_GetAttrString(module, "Orientation");
        if (_PyGtkOrientation_Type == NULL) {
            PyErr_SetString(PyExc_ImportError,
                "cannot import name Orientation from gtk");
            return ;
        }
        _PyGtkPositionType_Type = (PyTypeObject *)PyObject_GetAttrString(module, "PositionType");
        if (_PyGtkPositionType_Type == NULL) {
            PyErr_SetString(PyExc_ImportError,
                "cannot import name PositionType from gtk");
            return ;
        }
        _PyGtkTreeIter_Type = (PyTypeObject *)PyObject_GetAttrString(module, "TreeIter");
        if (_PyGtkTreeIter_Type == NULL) {
            PyErr_SetString(PyExc_ImportError,
                "cannot import name TreeIter from gtk");
            return ;
        }
        _PyGtkListStore_Type = (PyTypeObject *)PyObject_GetAttrString(module, "ListStore");
        if (_PyGtkListStore_Type == NULL) {
            PyErr_SetString(PyExc_ImportError,
                "cannot import name ListStore from gtk");
            return ;
        }
        _PyGtkUpdateType_Type = (PyTypeObject *)PyObject_GetAttrString(module, "UpdateType");
        if (_PyGtkUpdateType_Type == NULL) {
            PyErr_SetString(PyExc_ImportError,
                "cannot import name UpdateType from gtk");
            return ;
        }
    } else {
        PyErr_SetString(PyExc_ImportError,
            "could not import gtk");
        return ;
    }
    if ((module = PyImport_ImportModule("gtk.gdk")) != NULL) {
        _PyGdkDrawable_Type = (PyTypeObject *)PyObject_GetAttrString(module, "Drawable");
        if (_PyGdkDrawable_Type == NULL) {
            PyErr_SetString(PyExc_ImportError,
                "cannot import name Drawable from gtk.gdk");
            return ;
        }
        _PyGdkPixbuf_Type = (PyTypeObject *)PyObject_GetAttrString(module, "Pixbuf");
        if (_PyGdkPixbuf_Type == NULL) {
            PyErr_SetString(PyExc_ImportError,
                "cannot import name Pixbuf from gtk.gdk");
            return ;
        }
        _PyGdkGC_Type = (PyTypeObject *)PyObject_GetAttrString(module, "GC");
        if (_PyGdkGC_Type == NULL) {
            PyErr_SetString(PyExc_ImportError,
                "cannot import name GC from gtk.gdk");
            return ;
        }
        _PyGdkLineStyle_Type = (PyTypeObject *)PyObject_GetAttrString(module, "LineStyle");
        if (_PyGdkLineStyle_Type == NULL) {
            PyErr_SetString(PyExc_ImportError,
                "cannot import name LineStyle from gtk.gdk");
            return ;
        }
    } else {
        PyErr_SetString(PyExc_ImportError,
            "could not import gtk.gdk");
        return ;
    }


#line 20005 "pygwywrap.c"
    pygobject_register_class(d, "GwyAxis", GWY_TYPE_AXIS, &PyGwyAxis_Type, Py_BuildValue("(O)", &PyGtkWidget_Type));
    pygobject_register_class(d, "GwyColorAxis", GWY_TYPE_COLOR_AXIS, &PyGwyColorAxis_Type, Py_BuildValue("(O)", &PyGtkWidget_Type));
    pygobject_register_class(d, "GwyColorButton", GWY_TYPE_COLOR_BUTTON, &PyGwyColorButton_Type, Py_BuildValue("(O)", &PyGtkButton_Type));
    pyg_set_object_has_new_constructor(GWY_TYPE_COLOR_BUTTON);
    pygobject_register_class(d, "GwyContainer", GWY_TYPE_CONTAINER, &PyGwyContainer_Type, Py_BuildValue("(O)", &PyGObject_Type));
    pyg_set_object_has_new_constructor(GWY_TYPE_CONTAINER);
    pygobject_register_class(d, "GwyCurve", GWY_TYPE_CURVE, &PyGwyCurve_Type, Py_BuildValue("(O)", &PyGtkDrawingArea_Type));
    pyg_set_object_has_new_constructor(GWY_TYPE_CURVE);
    pygobject_register_class(d, "GwyDataField", GWY_TYPE_DATA_FIELD, &PyGwyDataField_Type, Py_BuildValue("(O)", &PyGObject_Type));
    pygobject_register_class(d, "GwyDataLine", GWY_TYPE_DATA_LINE, &PyGwyDataLine_Type, Py_BuildValue("(O)", &PyGObject_Type));
    pygobject_register_class(d, "GwyDataView", GWY_TYPE_DATA_VIEW, &PyGwyDataView_Type, Py_BuildValue("(O)", &PyGtkWidget_Type));
    pygobject_register_class(d, "GwyDataViewLayer", GWY_TYPE_DATA_VIEW_LAYER, &PyGwyDataViewLayer_Type, Py_BuildValue("(O)", &PyGtkObject_Type));
    pygobject_register_class(d, "GwyDataWindow", GWY_TYPE_DATA_WINDOW, &PyGwyDataWindow_Type, Py_BuildValue("(O)", &PyGtkWindow_Type));
    pygobject_register_class(d, "GwyGraph", GWY_TYPE_GRAPH, &PyGwyGraph_Type, Py_BuildValue("(O)", &PyGtkTable_Type));
    pygobject_register_class(d, "GwyGraphArea", GWY_TYPE_GRAPH_AREA, &PyGwyGraphArea_Type, Py_BuildValue("(O)", &PyGtkLayout_Type));
    pyg_set_object_has_new_constructor(GWY_TYPE_GRAPH_AREA);
    pygobject_register_class(d, "GwyGraphCorner", GWY_TYPE_GRAPH_CORNER, &PyGwyGraphCorner_Type, Py_BuildValue("(O)", &PyGtkWidget_Type));
    pyg_set_object_has_new_constructor(GWY_TYPE_GRAPH_CORNER);
    pygobject_register_class(d, "GwyGraphCurveModel", GWY_TYPE_GRAPH_CURVE_MODEL, &PyGwyGraphCurveModel_Type, Py_BuildValue("(O)", &PyGObject_Type));
    pyg_set_object_has_new_constructor(GWY_TYPE_GRAPH_CURVE_MODEL);
    pygobject_register_class(d, "GwyGraphCurves", GWY_TYPE_GRAPH_CURVES, &PyGwyGraphCurves_Type, Py_BuildValue("(O)", &PyGtkTreeView_Type));
    pygobject_register_class(d, "GwyGraphData", GWY_TYPE_GRAPH_DATA, &PyGwyGraphData_Type, Py_BuildValue("(O)", &PyGtkTreeView_Type));
    pygobject_register_class(d, "GwyGraphLabel", GWY_TYPE_GRAPH_LABEL, &PyGwyGraphLabel_Type, Py_BuildValue("(O)", &PyGtkWidget_Type));
    pyg_set_object_has_new_constructor(GWY_TYPE_GRAPH_LABEL);
    pygobject_register_class(d, "GwyGraphModel", GWY_TYPE_GRAPH_MODEL, &PyGwyGraphModel_Type, Py_BuildValue("(O)", &PyGObject_Type));
    pyg_set_object_has_new_constructor(GWY_TYPE_GRAPH_MODEL);
    pygobject_register_class(d, "GwyGraphWindow", GWY_TYPE_GRAPH_WINDOW, &PyGwyGraphWindow_Type, Py_BuildValue("(O)", &PyGtkWindow_Type));
    pygobject_register_class(d, "GwyInventory", GWY_TYPE_INVENTORY, &PyGwyInventory_Type, Py_BuildValue("(O)", &PyGObject_Type));
    pygobject_register_class(d, "GwyInventoryStore", GWY_TYPE_INVENTORY_STORE, &PyGwyInventoryStore_Type, Py_BuildValue("(O)", &PyGObject_Type));
    pyg_set_object_has_new_constructor(GWY_TYPE_INVENTORY_STORE);
    pygobject_register_class(d, "GwyMarkerBox", GWY_TYPE_MARKER_BOX, &PyGwyMarkerBox_Type, Py_BuildValue("(O)", &PyGtkWidget_Type));
    pygobject_register_class(d, "GwyHMarkerBox", GWY_TYPE_HMARKER_BOX, &PyGwyHMarkerBox_Type, Py_BuildValue("(O)", &PyGwyMarkerBox_Type));
    pygobject_register_class(d, "GwyNullStore", GWY_TYPE_NULL_STORE, &PyGwyNullStore_Type, Py_BuildValue("(O)", &PyGObject_Type));
    pygobject_register_class(d, "GwyPixmapLayer", GWY_TYPE_PIXMAP_LAYER, &PyGwyPixmapLayer_Type, Py_BuildValue("(O)", &PyGwyDataViewLayer_Type));
    pygobject_register_class(d, "GwyLayerMask", GWY_TYPE_LAYER_MASK, &PyGwyLayerMask_Type, Py_BuildValue("(O)", &PyGwyPixmapLayer_Type));
    pyg_set_object_has_new_constructor(GWY_TYPE_LAYER_MASK);
    pygobject_register_class(d, "GwyLayerBasic", GWY_TYPE_LAYER_BASIC, &PyGwyLayerBasic_Type, Py_BuildValue("(O)", &PyGwyPixmapLayer_Type));
    pyg_set_object_has_new_constructor(GWY_TYPE_LAYER_BASIC);
    pygobject_register_class(d, "GwyResource", GWY_TYPE_RESOURCE, &PyGwyResource_Type, Py_BuildValue("(O)", &PyGObject_Type));
    pyg_set_object_has_new_constructor(GWY_TYPE_RESOURCE);
    pygobject_register_class(d, "GwyNLFitPreset", GWY_TYPE_NLFIT_PRESET, &PyGwyNLFitPreset_Type, Py_BuildValue("(O)", &PyGwyResource_Type));
    pyg_set_object_has_new_constructor(GWY_TYPE_NLFIT_PRESET);
    pygobject_register_class(d, "GwyFDCurvePreset", GWY_TYPE_FD_CURVE_PRESET, &PyGwyFDCurvePreset_Type, Py_BuildValue("(O)", &PyGwyNLFitPreset_Type));
    pyg_set_object_has_new_constructor(GWY_TYPE_FD_CURVE_PRESET);
    pygobject_register_class(d, "GwyGradient", GWY_TYPE_GRADIENT, &PyGwyGradient_Type, Py_BuildValue("(O)", &PyGwyResource_Type));
    pyg_set_object_has_new_constructor(GWY_TYPE_GRADIENT);
    pygobject_register_class(d, "GwyGLMaterial", GWY_TYPE_GL_MATERIAL, &PyGwyGLMaterial_Type, Py_BuildValue("(O)", &PyGwyResource_Type));
    pyg_set_object_has_new_constructor(GWY_TYPE_GL_MATERIAL);
    pygobject_register_class(d, "GwyCDLine", GWY_TYPE_CDLINE, &PyGwyCDLine_Type, Py_BuildValue("(O)", &PyGwyResource_Type));
    pyg_set_object_has_new_constructor(GWY_TYPE_CDLINE);
    pygobject_register_class(d, "GwyResourceEditor", GWY_TYPE_RESOURCE_EDITOR, &PyGwyResourceEditor_Type, Py_BuildValue("(O)", &PyGtkWindow_Type));
    pygobject_register_class(d, "GwyRuler", GWY_TYPE_RULER, &PyGwyRuler_Type, Py_BuildValue("(O)", &PyGtkWidget_Type));
    pygobject_register_class(d, "GwyHRuler", GWY_TYPE_HRULER, &PyGwyHRuler_Type, Py_BuildValue("(O)", &PyGwyRuler_Type));
    pygobject_register_class(d, "GwySIUnit", GWY_TYPE_SI_UNIT, &PyGwySIUnit_Type, Py_BuildValue("(O)", &PyGObject_Type));
    pyg_set_object_has_new_constructor(GWY_TYPE_SI_UNIT);
    pygobject_register_class(d, "GwySciText", GWY_TYPE_SCI_TEXT, &PyGwySciText_Type, Py_BuildValue("(O)", &PyGtkVBox_Type));
    pyg_set_object_has_new_constructor(GWY_TYPE_SCI_TEXT);
    pygobject_register_class(d, "GwySelection", GWY_TYPE_SELECTION, &PyGwySelection_Type, Py_BuildValue("(O)", &PyGObject_Type));
    pyg_set_object_has_new_constructor(GWY_TYPE_SELECTION);
    pygobject_register_class(d, "GwySelectionGraph1DArea", GWY_TYPE_SELECTION_GRAPH_1DAREA, &PyGwySelectionGraph1DArea_Type, Py_BuildValue("(O)", &PyGwySelection_Type));
    pyg_set_object_has_new_constructor(GWY_TYPE_SELECTION_GRAPH_1DAREA);
    pygobject_register_class(d, "GwySelectionGraphArea", GWY_TYPE_SELECTION_GRAPH_AREA, &PyGwySelectionGraphArea_Type, Py_BuildValue("(O)", &PyGwySelection_Type));
    pyg_set_object_has_new_constructor(GWY_TYPE_SELECTION_GRAPH_AREA);
    pygobject_register_class(d, "GwySelectionGraphLine", GWY_TYPE_SELECTION_GRAPH_LINE, &PyGwySelectionGraphLine_Type, Py_BuildValue("(O)", &PyGwySelection_Type));
    pyg_set_object_has_new_constructor(GWY_TYPE_SELECTION_GRAPH_LINE);
    pygobject_register_class(d, "GwySelectionGraphPoint", GWY_TYPE_SELECTION_GRAPH_POINT, &PyGwySelectionGraphPoint_Type, Py_BuildValue("(O)", &PyGwySelection_Type));
    pyg_set_object_has_new_constructor(GWY_TYPE_SELECTION_GRAPH_POINT);
    pygobject_register_class(d, "GwySelectionGraphZoom", GWY_TYPE_SELECTION_GRAPH_ZOOM, &PyGwySelectionGraphZoom_Type, Py_BuildValue("(O)", &PyGwySelection_Type));
    pyg_set_object_has_new_constructor(GWY_TYPE_SELECTION_GRAPH_ZOOM);
    pygobject_register_class(d, "GwySensitivityGroup", GWY_TYPE_SENSITIVITY_GROUP, &PyGwySensitivityGroup_Type, Py_BuildValue("(O)", &PyGObject_Type));
    pyg_set_object_has_new_constructor(GWY_TYPE_SENSITIVITY_GROUP);
    pygobject_register_class(d, "GwyShader", GWY_TYPE_SHADER, &PyGwyShader_Type, Py_BuildValue("(O)", &PyGtkWidget_Type));
    pygobject_register_class(d, "GwySpectra", GWY_TYPE_SPECTRA, &PyGwySpectra_Type, Py_BuildValue("(O)", &PyGObject_Type));
    pyg_set_object_has_new_constructor(GWY_TYPE_SPECTRA);
    pygobject_register_class(d, "GwyStatusbar", GWY_TYPE_STATUSBAR, &PyGwyStatusbar_Type, Py_BuildValue("(O)", &PyGtkStatusbar_Type));
    pyg_set_object_has_new_constructor(GWY_TYPE_STATUSBAR);
    pygobject_register_class(d, "GwyStringList", GWY_TYPE_STRING_LIST, &PyGwyStringList_Type, Py_BuildValue("(O)", &PyGObject_Type));
    pyg_set_object_has_new_constructor(GWY_TYPE_STRING_LIST);
    pygobject_register_class(d, "GwyVRuler", GWY_TYPE_VRULER, &PyGwyVRuler_Type, Py_BuildValue("(O)", &PyGwyRuler_Type));
    pygobject_register_class(d, "GwyVectorLayer", GWY_TYPE_VECTOR_LAYER, &PyGwyVectorLayer_Type, Py_BuildValue("(O)", &PyGwyDataViewLayer_Type));
}
