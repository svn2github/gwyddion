<?xml version='1.0' encoding='utf-8'?>
<!-- @(#) $Id$ -->
<!DOCTYPE book PUBLIC '-//OASIS//DTD DocBook XML V4.2//EN'
               'http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd'>
<sect1 id="managing-files">
  <title>Managing Files</title>
  <para>
    Gwyddion uses its internal data format (.gwy) to store data. The main
    advantage of this format is fact, that it stores complete state of
    processing of concrete data, including selections and other tool and
    processing function settings. It can also store more channels and graphs
    that have any relation in one single file. Therefore we recommned to use
    this format for saving processed files. If you open our example files,
    you can see that each one is plotted in different false color palette.
    This is direct consequence of the fact that Gwyddion stores full state of
    the data window including its palette.
  </para>
  <para>
    Other data file formats can be handled with appropriate loading and
    saving modules or plugins. Beside several file formats used in
    microscopy, graphical file types (JPEG, PNG, PPM, TIFF, BMP) and raw
    binary and ASCII data can be imported too.
  </para>
  <para>
    We expect that more file IO modules and plugins will be written,
    depending on demands and file format specifications available. We
    encourage you to write IO module or plugin for your instrument-specific
    data file format, or, at least, to send us your format specifications.
  </para>
  <table frame='none' id="table-file-formats">
    <title>Supported file formats</title>
    <indexterm>
      <primary>file</primary>
      <primary>supported formats</primary>
    </indexterm>
    <tgroup cols='2'>
      <colspec align='left'/>
      <colspec align='left'/>
      <colspec align='left'/>
      <colspec align='left'/>
      <colspec align='left'/>
      <thead>
        <row>
          <entry>File Format</entry>
          <entry>Extensions</entry>
          <entry>Supported By</entry>
          <entry>Read</entry>
          <entry>Write</entry>
        </row>
      </thead>
      <tbody>
        <row>
          <entry>APE Research</entry>
          <entry>.dat</entry>
          <entry>apefile module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>ASCII data (raw)</entry>
          <entry></entry>
          <entry>rawfile, asciiexport modules</entry>
          <entry>Yes</entry>
          <entry>
            Yes
            <footnote id='file-format-fn1'>
              <para>
                Only a simple data-matrix format si currently supported.
              </para>
            </footnote>
          </entry>
        </row>
        <row>
          <entry>Assing AFM</entry>
          <entry>.afm</entry>
          <entry>assing-afm module</entry>
          <entry>Yes</entry>
          <entry>Yes</entry>
        </row>
        <row>
          <entry>Image Metrology BCR, BCRF</entry>
          <entry>.bcr, .bcrf</entry>
          <entry>bcrfile module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>Binary data (raw)</entry>
          <entry></entry>
          <entry>rawfile module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>Burleigh v2.1</entry>
          <entry>.img</entry>
          <entry>burleigh module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>Createc</entry>
          <entry>.dat</entry>
          <entry>createc module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>DME Rasterscope</entry>
          <entry>.img</entry>
          <entry>dmefile module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>ECS</entry>
          <entry>.img</entry>
          <entry>ecsfile module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>FRT MicroProf</entry>
          <entry>.txt</entry>
          <entry>microprof module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>Gwyddion native</entry>
          <entry>.gwy</entry>
          <entry>gwyfile module</entry>
          <entry>Yes</entry>
          <entry>Yes</entry>
        </row>
        <row>
          <entry>PSI HDF4</entry>
          <entry>.hdf</entry>
          <entry>hdf4file module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>Hitachi AFM</entry>
          <entry>.afm</entry>
          <entry>hitachi-afm module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>Intematix SDF</entry>
          <entry>.sdf</entry>
          <entry>intematix module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>JEOL SPM</entry>
          <entry>.tif</entry>
          <entry>jeol module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>JPK Instruments</entry>
          <entry>.jpk</entry>
          <entry>jpkscan module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>Zygo binary MetroPro</entry>
          <entry>.dat</entry>
          <entry>metropro module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>Molecular Imaging MI</entry>
          <entry>.mi</entry>
          <entry>mifile module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>Molecular Imaging STP</entry>
          <entry>.stp</entry>
          <entry>stpfile module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>Nanonis</entry>
          <entry>.sxm</entry>
          <entry>nanonis module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>Nanoscope</entry>
          <entry></entry>
          <entry>
            nanoscope, nanoscope-ii modules
            <footnote>
              <para>
                Nanoscope II and Nanoscope III (and newer) are two distinct
                file formats, nanoscope loads the newer files while
                nanoscope-ii loads the old version II files.
              </para>
            </footnote>
          </entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>Nanosurf</entry>
          <entry>.ezd, .nid</entry>
          <entry>ezdfile module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>Nanotop</entry>
          <entry>.spm</entry>
          <entry>nanotop module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>GXSM netCDF</entry>
          <entry>.nc</entry>
          <entry>netcdf module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>NT-MDT</entry>
          <entry>.mdt</entry>
          <entry>nt-mdt module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>Omicron Scala</entry>
          <entry>.par + data</entry>
          <entry>omicron module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>Pacific Nanotechnology PNI</entry>
          <entry>.pni</entry>
          <entry>pnifile module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>Pixmap images</entry>
          <entry>
            .png, .jpeg, .ppm, .tga, .bmp
            <footnote>
              <para>
                And others, namely for import. The exact list depends on
                formats supported by libraries on the particular platform.
              </para>
            </footnote>
          </entry>
          <entry>pixmap module</entry>
          <entry>Yes</entry>
          <entry>
            Yes
            <footnote>
              <para>
                Alhough this is usually lossy. Export to pixmap graphics is
                intended for presentational purpose mainly.
              </para>
            </footnote>
          </entry>
        </row>
        <row>
          <entry>PSIA</entry>
          <entry>.tiff</entry>
          <entry>psia module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>RHK Technology SPM32</entry>
          <entry>.sm2</entry>
          <entry>rhk-spm32 module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>RHK Technology SM3</entry>
          <entry>.sm3</entry>
          <entry>rhk-sm3 module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>Seiko</entry>
          <entry>.xqd</entry>
          <entry>seiko module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>Scanning Probe Microscopy Markup Langugae</entry>
          <entry>.xml</entry>
          <entry>spml module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>Surfstand Surface Data File</entry>
          <entry>.sdf</entry>
          <entry>sdfile module</entry>
          <entry>Yes</entry>
          <entry>
            Yes
            <footnote>
              <para>
                Only the text variant can be exported at present.
              </para>
            </footnote>
          </entry>
        </row>
        <row>
          <entry>CSM Surf</entry>
          <entry>.sur</entry>
          <entry>surffile module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>Surface Imaging Systems</entry>
          <entry>.sis</entry>
          <entry>sis module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>Veeco Instruments</entry>
          <entry>.zfr, .tfr, .zfp, …</entry>
          <entry>spmlab module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>STMPRG</entry>
          <entry></entry>
          <entry>stmprg module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>Unisoku</entry>
          <entry>.hdr + .dat</entry>
          <entry>unisoku module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>WITec</entry>
          <entry>.wit</entry>
          <entry>witfile module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
        <row>
          <entry>WSxM (Nanotec)</entry>
          <entry>.tom, .stp</entry>
          <entry>wsxmfile module</entry>
          <entry>Yes</entry>
          <entry>No</entry>
        </row>
      </tbody>
    </tgroup>
  </table>
  <sect2 id="file-loading">
    <title>File Loading</title>
    <indexterm>
      <primary>file</primary>
      <primary>loading</primary>
    </indexterm>
    <para>
      By default, Gwyddion detects the file format automatically based on
      file contents (i.e. file names and extensions are irrelevant).  This
      usually works well and you will hopefully never need to change it.
      See <link linkend="raw-file-import">Raw Data File Import</link>
      for details of import of data from unsupported formats and from
      <link linkend="pixmap-file-import">pixmap images</link>.
    </para>
    <para>
      If the automatic detection fails it is possible to enforce an attempt
      to load the file as a particular format by expanding the <guilabel>File
        type</guilabel> selector and choosing a file type.  However, if the
      file format is not detected automatically it is very unlikely the file
      can be loaded at all.
    </para>
    <para>
      By enabling <guilabel>Show only loadable files of selected
        type</guilabel> the file list can be limited only to the selected
      type.  The file type label then indicates the filtering by appending
      <guilabel>(filtered)</guilabel> to the end.  In the case of
      <guilabel>Automatically detected</guilabel> file type this means
      the list to files is limited to those Gwyddion thinks it can load.
      This can be very convenient, on the other hand it can slow down listing
      of directories with many files.
    </para>
    <para>
      Once a file type is selected it remains selected even in subsequent
      file open dialog invocations.  If you seem to be suddenly unable to
      load a file, check the file type is set to the corresponding
      type, or to <guilabel>Automatically detected</guilabel>.
    </para>
    <figure id="fix-file-open-screenshot">
      <title>
        File open dialog with expanded file type options and channel preview.
      </title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="file-open.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
  </sect2>
  <sect2 id="file-merging">
    <title>File Merging</title>
    <indexterm>
      <primary>file</primary>
      <primary>merging</primary>
    </indexterm>
    <para>
      File merging is similar to normal file loading, except that the
      selected file (or files) is merged into the current open file.  In
      other words, channels, graphs and spectra, together with all their
      settings and properties are added to those already present in the
      current file.
    </para>
  </sect2>
  <sect2 id="file-saving">
    <title>File Saving</title>
    <indexterm>
      <primary>file</primary>
      <primary>saving</primary>
    </indexterm>
    <para>
      Much of the previous paragraphs applies to file saving too.  One of the
      differences is the reliability of automatic file type determination.
      While loading can and does examine the file contents, saving depends
      on file name and extension.  Combined with the large number of
      different file types using the same extension such as
      <filename>.img</filename>, <filename>.afm</filename> or
      <filename>.dat</filename> it leads to ambiguities.  Select the file
      type explicitly before saving if you are unsure.
    </para>
    <para>
      Since the only file type able to fully represent Gwyddion data
      structures is its native data format, saving to
      a <filename>.gwy</filename> file is the only actual saving.  Saving to
      other file formats essentially consists of exporting of a limited
      subset of the data, typically only the active channel (without masks
      and presentations).  Therefore it does <emphasis>not</emphasis>
      change the file name of the current file to the just saved file name.
    </para>
  </sect2>
  <sect2 id="document-history">
    <title>Document History</title>
    <indexterm>
      <primary>file</primary>
      <primary>recently open</primary>
    </indexterm>
    <para>
      The history of recently opened files can be accessed with
      <menuchoice>
        <guimenu>File</guimenu>
        <guisubmenu>Open Recent</guisubmenu>
      </menuchoice>.
      The submenu contains the last 10 recently used files for quick
      recalling, extensive recent file history is accessed with the last item
      <guimenuitem>Document History</guimenuitem>.
    </para>
    <para>
      Document history lists the files sorted by the last access time (the
      most recently accessed at the top), with previews and some additional
      information about a selected channel.  The function of the bottom row
      of buttons is following:
      <variablelist>
        <varlistentry>
          <term><guibutton>Prune</guibutton></term>
          <listitem>
            Removes history entries of files that have been deleted or are
            no longer accessible for other reasons.
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><guibutton>Close</guibutton></term>
          <listitem>
            Closes the document history window.
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><guibutton>Open</guibutton></term>
          <listitem>
            Opens the selected file.  This can be also achieved by activating
            the selected row, either by double-clicking or with the keyboard.
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
    <para>
      The history can be searched/filtered by file name using the filter
      controls above the buttons.  The filter is activated by pressing
      <keycap>Enter</keycap> in the filter pattern entry.  To display all
      history entries, clear the entry and activate it.  The filter pattern
      is interpreted in two ways:
      <itemizedlist>
        <listitem>
          If the pattern contains wildcards, i.e. <literal>*</literal> or
          <literal>?</literal>, it is interpreted as file glob.  This means
          <literal>?</literal> represents a signle arbitrary character,
          <literal>*</literal> represents an arbitrary sequence of zero or
          more characters, and the file name has to precisely match the
          pattern.  Note directory separators (<literal>/</literal> or
          <literal>\</literal>) are not treated specially, therefore in the
          pattern <literal>*.sis</literal> the initial <literal>*</literal>
          matches all leading directory components.  The pattern syntax is
          described in
          <ulink url="http://developer.gnome.org/doc/API/2.0/glib/glib-Glob-style-pattern-matching.html">GPatternSpec</ulink>
          documentation.
        </listitem>
        <listitem>
          If the pattern does not contain any wildcards, it is directly
          searched as a part of the file name.
        </listitem>
      </itemizedlist>
    </para>
    <para>
      Search case sensitivity, controlled by option <guilabel>Case
        sensitive</guilabel>, is useful mainly on systems distinguishing
      letter case in file names, such as Unix.  On systems that do not
      distinguish the case themselves it is recommended to keep the setting
      on case insensitive.
    </para>
  </sect2>
</sect1>

