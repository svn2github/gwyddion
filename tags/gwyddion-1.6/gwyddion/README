This is more-or-less README-devel...

Run ./configure (or ./autogen) with --enable-maintainer-mode
if you want to make docs or build tarballs

Run ./configure (or ./autogen) with --cache-file=config.cache
to speed up configure

Ideally, with both.

Use ccache.

Note several auxiliary tools are written in Python, most notably
utils/update-msvc.py -- incorporating changes in Makefile.am's into MSC
    makefiles and generating MSC .def files
devel-docs/add-objects.py -- addind object structs to gtkdoc-generated
    section files
You don't need Python to compile Gwyddion, but you may need it to
develop Gwyddion.

See devel-docs/README for HTML doc info (make docs generates it).

Note the stuff in the plugins/ directory is public domain.
Note module/plugin-proxy.c has a special licensing exception too,
you can use it as `dump' format documentation without being `tainted',
see module/plugin-proxy.c for more.

Note library sonames are kept constant in spite of their neverending changes
till a official version is released.

If you change change public interfaces and/or add or remove files, compile
gwyddion and run update-msvc.py before creating tarballs.

Subdir dependencies (fully resolved):
    libgwyddion:  (none)
    libprocess:   libgwyddion
    libdraw:      libgwyddion libprocess
    libgwydgets:  libgwyddion libprocess libdraw
    libgwymodule: libgwyddion libprocess libdraw libgwydgets
    app:          libgwyddion libprocess libdraw libgwydgets libgwymodule
    modules:      libgwyddion libprocess libdraw libgwydgets libgwymodule app
    devel-docs:   libgwyddion libprocess libdraw libgwydgets libgwymodule
    po:           libdraw libgwydgets libgwymodule app modules
    plugins:      (none)
    pixmaps:      (none)
    perl:         (none)
    python:       (none)

Subdir contents:
    libgwyddion:  Gwyddion library
    libprocess:   Gwyddion data processing library
    libdraw:      Gwyddion drawing library
    libgwydgets:  Gwyddion widget library
    libgwymodule: Gwyddion module library
    app:          Gwyddion application library (libgwyapp), main application
    modules:      Standard modules (file, graph, layer, process, tool)
    plugins:      Standard and sample plug-ins (file, process)
    devel-docs:   Developer-documentation for each library
    po:           Translations
    pixmaps:      Stock icons and other graphics
    perl:         Perl modules for plug-in development
    python:       Python modules for plug-in development

